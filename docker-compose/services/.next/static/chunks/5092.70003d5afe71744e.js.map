{"version":3,"file":"static/chunks/5092.70003d5afe71744e.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@graphiql/react/dist/comment.es.js","webpack://_N_E/<anon>"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { a as codemirror } from \"./codemirror.es.js\";\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: \"Module\" }));\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar comment$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports);\n  })(function(CodeMirror) {\n    var noOptions = {};\n    var nonWS = /[^\\s\\u00a0]/;\n    var Pos = CodeMirror.Pos, cmp = CodeMirror.cmpPos;\n    function firstNonWS(str) {\n      var found = str.search(nonWS);\n      return found == -1 ? 0 : found;\n    }\n    __name(firstNonWS, \"firstNonWS\");\n    CodeMirror.commands.toggleComment = function(cm) {\n      cm.toggleComment();\n    };\n    CodeMirror.defineExtension(\"toggleComment\", function(options) {\n      if (!options)\n        options = noOptions;\n      var cm = this;\n      var minLine = Infinity, ranges = this.listSelections(), mode = null;\n      for (var i = ranges.length - 1; i >= 0; i--) {\n        var from = ranges[i].from(), to = ranges[i].to();\n        if (from.line >= minLine)\n          continue;\n        if (to.line >= minLine)\n          to = Pos(minLine, 0);\n        minLine = from.line;\n        if (mode == null) {\n          if (cm.uncomment(from, to, options))\n            mode = \"un\";\n          else {\n            cm.lineComment(from, to, options);\n            mode = \"line\";\n          }\n        } else if (mode == \"un\") {\n          cm.uncomment(from, to, options);\n        } else {\n          cm.lineComment(from, to, options);\n        }\n      }\n    });\n    function probablyInsideString(cm, pos, line) {\n      return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line);\n    }\n    __name(probablyInsideString, \"probablyInsideString\");\n    function getMode(cm, pos) {\n      var mode = cm.getMode();\n      return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos);\n    }\n    __name(getMode, \"getMode\");\n    CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var firstLine = self.getLine(from.line);\n      if (firstLine == null || probablyInsideString(self, from, firstLine))\n        return;\n      var commentString = options.lineComment || mode.lineComment;\n      if (!commentString) {\n        if (options.blockCommentStart || mode.blockCommentStart) {\n          options.fullLines = true;\n          self.blockComment(from, to, options);\n        }\n        return;\n      }\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n      var pad = options.padding == null ? \" \" : options.padding;\n      var blankLines = options.commentBlankLines || from.line == to.line;\n      self.operation(function() {\n        if (options.indent) {\n          var baseString = null;\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i);\n            var whitespace = line.slice(0, firstNonWS(line));\n            if (baseString == null || baseString.length > whitespace.length) {\n              baseString = whitespace;\n            }\n          }\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i), cut = baseString.length;\n            if (!blankLines && !nonWS.test(line))\n              continue;\n            if (line.slice(0, cut) != baseString)\n              cut = firstNonWS(line);\n            self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n          }\n        } else {\n          for (var i = from.line; i < end; ++i) {\n            if (blankLines || nonWS.test(self.getLine(i)))\n              self.replaceRange(commentString + pad, Pos(i, 0));\n          }\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString) {\n        if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n          self.lineComment(from, to, options);\n        return;\n      }\n      if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0))))\n        return;\n      var end = Math.min(to.line, self.lastLine());\n      if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end)))\n        --end;\n      var pad = options.padding == null ? \" \" : options.padding;\n      if (from.line > end)\n        return;\n      self.operation(function() {\n        if (options.fullLines != false) {\n          var lastLineHasText = nonWS.test(self.getLine(end));\n          self.replaceRange(pad + endString, Pos(end));\n          self.replaceRange(startString + pad, Pos(from.line, 0));\n          var lead = options.blockCommentLead || mode.blockCommentLead;\n          if (lead != null) {\n            for (var i = from.line + 1; i <= end; ++i)\n              if (i != end || lastLineHasText)\n                self.replaceRange(lead + pad, Pos(i, 0));\n          }\n        } else {\n          var atCursor = cmp(self.getCursor(\"to\"), to) == 0, empty = !self.somethingSelected();\n          self.replaceRange(endString, to);\n          if (atCursor)\n            self.setSelection(empty ? to : self.getCursor(\"from\"), to);\n          self.replaceRange(startString, from);\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n      var lineString = options.lineComment || mode.lineComment, lines = [];\n      var pad = options.padding == null ? \" \" : options.padding, didSomething;\n      lineComment: {\n        if (!lineString)\n          break lineComment;\n        for (var i = start; i <= end; ++i) {\n          var line = self.getLine(i);\n          var found = line.indexOf(lineString);\n          if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1))))\n            found = -1;\n          if (found == -1 && nonWS.test(line))\n            break lineComment;\n          if (found > -1 && nonWS.test(line.slice(0, found)))\n            break lineComment;\n          lines.push(line);\n        }\n        self.operation(function() {\n          for (var i2 = start; i2 <= end; ++i2) {\n            var line2 = lines[i2 - start];\n            var pos = line2.indexOf(lineString), endPos = pos + lineString.length;\n            if (pos < 0)\n              continue;\n            if (line2.slice(endPos, endPos + pad.length) == pad)\n              endPos += pad.length;\n            didSomething = true;\n            self.replaceRange(\"\", Pos(i2, pos), Pos(i2, endPos));\n          }\n        });\n        if (didSomething)\n          return true;\n      }\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString)\n        return false;\n      var lead = options.blockCommentLead || mode.blockCommentLead;\n      var startLine = self.getLine(start), open = startLine.indexOf(startString);\n      if (open == -1)\n        return false;\n      var endLine = end == start ? startLine : self.getLine(end);\n      var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n      var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1);\n      if (close == -1 || !/comment/.test(self.getTokenTypeAt(insideStart)) || !/comment/.test(self.getTokenTypeAt(insideEnd)) || self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n        return false;\n      var lastStart = startLine.lastIndexOf(startString, from.ch);\n      var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n      if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch)\n        return false;\n      firstEnd = endLine.indexOf(endString, to.ch);\n      var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n      lastStart = firstEnd == -1 || almostLastStart == -1 ? -1 : to.ch + almostLastStart;\n      if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch)\n        return false;\n      self.operation(function() {\n        self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)), Pos(end, close + endString.length));\n        var openEnd = open + startString.length;\n        if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad)\n          openEnd += pad.length;\n        self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n        if (lead)\n          for (var i2 = start + 1; i2 <= end; ++i2) {\n            var line2 = self.getLine(i2), found2 = line2.indexOf(lead);\n            if (found2 == -1 || nonWS.test(line2.slice(0, found2)))\n              continue;\n            var foundEnd = found2 + lead.length;\n            if (pad && line2.slice(foundEnd, foundEnd + pad.length) == pad)\n              foundEnd += pad.length;\n            self.replaceRange(\"\", Pos(i2, found2), Pos(i2, foundEnd));\n          }\n      });\n      return true;\n    });\n  });\n})();\nvar comment = comment$2.exports;\nvar comment$1 = /* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  \"default\": comment\n}, [comment$2.exports]);\nexport { comment$1 as c };\n"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","Symbol","toStringTag","comment$2","exports","mod","CodeMirror","noOptions","nonWS","Pos","cmp","cmpPos","firstNonWS","str","found","search","probablyInsideString","cm","pos","line","test","getTokenTypeAt","getMode","mode","useInnerComments","innerMode","getModeAt","commands","toggleComment","defineExtension","options","minLine","Infinity","ranges","listSelections","i","length","from","to","uncomment","lineComment","self","firstLine","getLine","commentString","blockCommentStart","fullLines","blockComment","end","Math","min","ch","lastLine","pad","padding","blankLines","commentBlankLines","operation","indent","baseString","whitespace","slice","cut","replaceRange","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","atCursor","getCursor","empty","somethingSelected","setSelection","didSomething","start","lineString","lines","indexOf","push","i2","line2","endPos","startLine","open","endLine","close","insideStart","insideEnd","getRange","lastStart","lastIndexOf","firstEnd","almostLastStart","openEnd","found2","foundEnd","_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__","a","comment$1","__proto__"],"sourceRoot":""}