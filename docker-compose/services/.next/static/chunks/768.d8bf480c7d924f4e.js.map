{"version":3,"file":"static/chunks/768.d8bf480c7d924f4e.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@graphiql/react/dist/brace-fold.es.js","webpack://_N_E/<anon>"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { a as codemirror } from \"./codemirror.es.js\";\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: \"Module\" }));\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar braceFold$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports);\n  })(function(CodeMirror) {\n    function bracketFolding(pairs) {\n      return function(cm, start) {\n        var line = start.line, lineText = cm.getLine(line);\n        function findOpening(pair) {\n          var tokenType;\n          for (var at = start.ch, pass = 0; ; ) {\n            var found2 = at <= 0 ? -1 : lineText.lastIndexOf(pair[0], at - 1);\n            if (found2 == -1) {\n              if (pass == 1)\n                break;\n              pass = 1;\n              at = lineText.length;\n              continue;\n            }\n            if (pass == 1 && found2 < start.ch)\n              break;\n            tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found2 + 1));\n            if (!/^(comment|string)/.test(tokenType))\n              return { ch: found2 + 1, tokenType, pair };\n            at = found2 - 1;\n          }\n        }\n        __name(findOpening, \"findOpening\");\n        function findRange(found2) {\n          var count = 1, lastLine = cm.lastLine(), end, startCh = found2.ch, endCh;\n          outer:\n            for (var i2 = line; i2 <= lastLine; ++i2) {\n              var text = cm.getLine(i2), pos = i2 == line ? startCh : 0;\n              for (; ; ) {\n                var nextOpen = text.indexOf(found2.pair[0], pos), nextClose = text.indexOf(found2.pair[1], pos);\n                if (nextOpen < 0)\n                  nextOpen = text.length;\n                if (nextClose < 0)\n                  nextClose = text.length;\n                pos = Math.min(nextOpen, nextClose);\n                if (pos == text.length)\n                  break;\n                if (cm.getTokenTypeAt(CodeMirror.Pos(i2, pos + 1)) == found2.tokenType) {\n                  if (pos == nextOpen)\n                    ++count;\n                  else if (!--count) {\n                    end = i2;\n                    endCh = pos;\n                    break outer;\n                  }\n                }\n                ++pos;\n              }\n            }\n          if (end == null || line == end)\n            return null;\n          return {\n            from: CodeMirror.Pos(line, startCh),\n            to: CodeMirror.Pos(end, endCh)\n          };\n        }\n        __name(findRange, \"findRange\");\n        var found = [];\n        for (var i = 0; i < pairs.length; i++) {\n          var open = findOpening(pairs[i]);\n          if (open)\n            found.push(open);\n        }\n        found.sort(function(a, b) {\n          return a.ch - b.ch;\n        });\n        for (var i = 0; i < found.length; i++) {\n          var range = findRange(found[i]);\n          if (range)\n            return range;\n        }\n        return null;\n      };\n    }\n    __name(bracketFolding, \"bracketFolding\");\n    CodeMirror.registerHelper(\"fold\", \"brace\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"]]));\n    CodeMirror.registerHelper(\"fold\", \"brace-paren\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]));\n    CodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n      function hasImport(line) {\n        if (line < cm.firstLine() || line > cm.lastLine())\n          return null;\n        var start2 = cm.getTokenAt(CodeMirror.Pos(line, 1));\n        if (!/\\S/.test(start2.string))\n          start2 = cm.getTokenAt(CodeMirror.Pos(line, start2.end + 1));\n        if (start2.type != \"keyword\" || start2.string != \"import\")\n          return null;\n        for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n          var text = cm.getLine(i), semi = text.indexOf(\";\");\n          if (semi != -1)\n            return { startCh: start2.end, end: CodeMirror.Pos(i, semi) };\n        }\n      }\n      __name(hasImport, \"hasImport\");\n      var startLine = start.line, has = hasImport(startLine), prev;\n      if (!has || hasImport(startLine - 1) || (prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1)\n        return null;\n      for (var end = has.end; ; ) {\n        var next = hasImport(end.line + 1);\n        if (next == null)\n          break;\n        end = next.end;\n      }\n      return { from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end };\n    });\n    CodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n      function hasInclude(line) {\n        if (line < cm.firstLine() || line > cm.lastLine())\n          return null;\n        var start2 = cm.getTokenAt(CodeMirror.Pos(line, 1));\n        if (!/\\S/.test(start2.string))\n          start2 = cm.getTokenAt(CodeMirror.Pos(line, start2.end + 1));\n        if (start2.type == \"meta\" && start2.string.slice(0, 8) == \"#include\")\n          return start2.start + 8;\n      }\n      __name(hasInclude, \"hasInclude\");\n      var startLine = start.line, has = hasInclude(startLine);\n      if (has == null || hasInclude(startLine - 1) != null)\n        return null;\n      for (var end = startLine; ; ) {\n        var next = hasInclude(end + 1);\n        if (next == null)\n          break;\n        ++end;\n      }\n      return {\n        from: CodeMirror.Pos(startLine, has + 1),\n        to: cm.clipPos(CodeMirror.Pos(end))\n      };\n    });\n  });\n})();\nvar braceFold = braceFold$2.exports;\nvar braceFold$1 = /* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  \"default\": braceFold\n}, [braceFold$2.exports]);\nexport { braceFold$1 as b };\n"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","Symbol","toStringTag","braceFold$2","exports","mod","CodeMirror","bracketFolding","pairs","cm","start","line","lineText","getLine","findOpening","pair","tokenType","at","ch","pass","found2","lastIndexOf","length","getTokenTypeAt","Pos","test","findRange","end","endCh","count","lastLine","startCh","outer","i2","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to","found","i","open","push","sort","a","b","range","registerHelper","hasImport","firstLine","start2","getTokenAt","string","type","semi","prev","startLine","has","next","clipPos","hasInclude","slice","_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__","braceFold$1","__proto__"],"sourceRoot":""}