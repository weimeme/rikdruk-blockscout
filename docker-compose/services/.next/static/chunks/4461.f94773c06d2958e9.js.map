{"version":3,"file":"static/chunks/4461.f94773c06d2958e9.js","mappings":"sFAAA,IAAAA,EAAmBC,EAAQ,OAC3BC,EAAiBD,EAAQ,OACzBE,EAAeF,EAAQ,OAEvBG,SAAA,IAAAC,KAAAC,KAAA,CAAAD,KAAAE,MAAA,GAAAC,KAAAC,GAAA,GAyBAC,CAAAA,EAAAC,OAAA,CAvBA,CAAAC,EAAAC,KACA,IAAAC,EAAAd,EAAAY,GACAG,EAAAb,EAAAY,EAAA,UACAE,EAAAb,EAAAY,CAAA,OAAAA,CAAA,OAAAA,CAAA,QACAE,EAAAd,EAAAY,CAAA,OAAAA,CAAA,OAAAA,CAAA,QACAG,EAAA,OAA4BF,CAAA,IAAW,IAAKA,CAAA,IAAW,IAAKA,CAAA,IAAW,GACvEG,EAAA,OAA4BF,CAAA,IAAW,IAAKA,CAAA,IAAW,IAAKA,CAAA,IAAW,GACvEG,EAAAhB,WAEA;KACA,EAAQS,KAAAQ,GAAAR,EAAA,UAA8BA,EAAK,cAAcA,EAAK;;4DAE9D,EAA8DO,EAAG;wBACjE,EAA0BF,EAAU;wBACpC,EAA0BC,EAAU;;;;oCAIpC,EAAsCC,EAAG;;MAEzC,sBC1BA,IAAAE,IAAA,CAAAC,EAAAC,EAAAC,IAGA,CAFAA,EAAA,GAAAA,CAAAA,GAAA,GACAA,EAAA,GAAAA,CAAAA,GAAA,GACAA,EAAA,KAAAF,EAAA,CAAAC,EAAAD,CAAAA,EAAA,EAAAE,EACAA,EAAA,GAAAD,EACAC,EAAA,IAAAF,EAAA,CAAAC,EAAAD,CAAAA,EAAA,KAAAE,CAAAA,EAAA,EAEAF,CAyBAb,CAAAA,EAAAC,OAAA,CAtBA,CAAAe,EAAAC,EAAAC,KACA,IAAAC,EAAAC,EAAAC,EAGA,GAFAL,GAAA,IAEAC,GAAAA,EACAE,EAAAC,EAAAC,EAAAH,MACI,CACJ,IAAAJ,EAAAI,EAAA,GAAAA,EAAA,GAAAD,CAAAA,EAAAC,EAAAD,EAAAC,EAAAD,EACAJ,EAAA,EAAAK,EAAAJ,EAEAK,EAAAP,IAAAC,EAAAC,EAAAE,EAAA,KACAI,EAAAR,IAAAC,EAAAC,EAAAE,GACAK,EAAAT,IAAAC,EAAAC,EAAAE,EAAA,IACA,CAEA,OACArB,KAAA2B,GAAA,GAAA3B,KAAA4B,GAAA,CAAA5B,KAAA6B,KAAA,CAAAL,IAAAA,GAAA,MACAxB,KAAA2B,GAAA,GAAA3B,KAAA4B,GAAA,CAAA5B,KAAA6B,KAAA,CAAAJ,IAAAA,GAAA,MACAzB,KAAA2B,GAAA,GAAA3B,KAAA4B,GAAA,CAAA5B,KAAA6B,KAAA,CAAAH,IAAAA,GAAA,MACA,qBCrBArB,EAAAC,OAAA,CARA,CAAAe,EAAAC,EAAAC,IACA,CACA,CAAAF,EAAAC,EAAAC,EAAA,CACA,EAAAF,EAAA,SAAAC,EAAAC,EAAA,CACA,EAAAF,EAAA,SAAAC,EAAAC,EAAA,CACA,gCCWAlB,CAAAA,EAAAC,OAAA,CAdA,SAAAC,CAAA,EAIA,IAHA,IAAAE,EAAA,KACAqB,EAAAvB,EAAAwB,MAAA,CAEAD,GACArB,EAAA,GAAAA,EAAAF,EAAAyB,UAAA,GAAAF,GAMA,OAAArB,IAAA,CACA","sources":["webpack://_N_E/./node_modules/gradient-avatar/index.js","webpack://_N_E/./node_modules/hsl-rgb/index.js","webpack://_N_E/./node_modules/hsl-triad/index.js","webpack://_N_E/./node_modules/string-hash/index.js","webpack://_N_E/<anon>"],"sourcesContent":["const stringHash = require('string-hash');\r\nconst hslTriad = require('hsl-triad');\r\nconst hslRgb = require('hsl-rgb');\r\n\r\nconst uniqueID = () => Math.floor(Math.random() * Date.now());\r\n\r\nconst avatar = (str, size) => {\r\n  const hash = stringHash(str);\r\n  const colors = hslTriad(hash % 360, 1, 0.5);\r\n  const color1 = hslRgb(colors[0][0], colors[0][1], colors[0][2]);\r\n  const color2 = hslRgb(colors[1][0], colors[1][1], colors[1][2]);\r\n  const color1str = `rgb(${ color1[0] }, ${ color1[1] }, ${ color1[2] })`;\r\n  const color2str = `rgb(${ color2[0] }, ${ color2[1] }, ${ color2[2] })`;\r\n  const id = uniqueID();\r\n\r\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<svg ${ size != undefined ? `width=\"${size}px\" height=\"${size}px\"` : '' } viewBox=\"0 0 80 80\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n  <defs>\r\n    <linearGradient x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\" id=\"${id}\">\r\n      <stop stop-color=\"${color1str}\" offset=\"0%\"></stop>\r\n      <stop stop-color=\"${color2str}\" offset=\"100%\"></stop>\r\n    </linearGradient>\r\n  </defs>\r\n  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\r\n    <rect id=\"Rectangle\" fill=\"url(#${id})\" x=\"0\" y=\"0\" width=\"80\" height=\"80\"></rect>\r\n  </g>\r\n</svg>`;\r\n};\r\n\r\nmodule.exports = avatar;\r\n","const hue = (p, q, t) => {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1/6) return p + (q - p) * 6 * t;\n  if (t < 1/2) return q;\n  if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n\n  return p;\n}\n\nconst hslRgb = (h, s, l) => {\n  let r, g, b;\n  h = h / 360;\n\n  if (s == 0) {\n    r = g = b = l;\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n\n    r = hue(p, q, h + 1/3);\n    g = hue(p, q, h);\n    b = hue(p, q, h - 1/3);\n  }\n\n  return [\n    Math.max(0, Math.min(Math.round(r * 255), 255)),\n    Math.max(0, Math.min(Math.round(g * 255), 255)),\n    Math.max(0, Math.min(Math.round(b * 255), 255)) \n  ];\n};\n\nmodule.exports = hslRgb;","const hslTriad = (h, s, l) => {\r\n  return [\r\n    [h, s, l],\r\n    [(h + 120) % 360, s, l],\r\n    [(h + 240) % 360, s, l],\r\n  ]\r\n};\r\n\r\nmodule.exports = hslTriad;","\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n"],"names":["stringHash","__webpack_require__","hslTriad","hslRgb","uniqueID","Math","floor","random","Date","now","module","exports","str","size","hash","colors","color1","color2","color1str","color2str","id","undefined","hue","p","q","t","h","s","l","r","g","b","max","min","round","i","length","charCodeAt"],"sourceRoot":""}