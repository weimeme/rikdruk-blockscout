"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2584],{92584:function(e,n,t){let i,r,a,s;t.d(n,{S:function(){return V},T:function(){return x},a:function(){return R}});var o,l,p,u,c=Object.defineProperty,__name=(e,n)=>c(e,"name",{value:n,configurable:!0});function inspect(e){return formatValue(e,[])}function formatValue(e,n){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return formatObjectValue(e,n);default:return String(e)}}function formatObjectValue(e,n){if(null===e)return"null";if(n.includes(e))return"[Circular]";let t=[...n,e];if(isJSONable(e)){let n=e.toJSON();if(n!==e)return"string"==typeof n?n:formatValue(n,t)}else if(Array.isArray(e))return formatArray(e,t);return formatObject(e,t)}function isJSONable(e){return"function"==typeof e.toJSON}function formatObject(e,n){let t=Object.entries(e);if(0===t.length)return"{}";if(n.length>2)return"["+getObjectTag(e)+"]";let i=t.map(([e,t])=>e+": "+formatValue(t,n));return"{ "+i.join(", ")+" }"}function formatArray(e,n){if(0===e.length)return"[]";if(n.length>2)return"[Array]";let t=Math.min(10,e.length),i=e.length-t,r=[];for(let i=0;i<t;++i)r.push(formatValue(e[i],n));return 1===i?r.push("... 1 more item"):i>1&&r.push(`... ${i} more items`),"["+r.join(", ")+"]"}function getObjectTag(e){let n=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===n&&"function"==typeof e.constructor){let n=e.constructor.name;if("string"==typeof n&&""!==n)return n}return n}function invariant(e,n){if(!e)throw Error(null!=n?n:"Unexpected invariant triggered.")}function isWhiteSpace(e){return 9===e||32===e}function isDigit$1(e){return e>=48&&e<=57}function isLetter(e){return e>=97&&e<=122||e>=65&&e<=90}function isNameStart(e){return isLetter(e)||95===e}function isNameContinue(e){return isLetter(e)||isDigit$1(e)||95===e}function printBlockString(e,n){let t=e.replace(/"""/g,'\\"""'),i=t.split(/\r\n|[\n\r]/g),r=1===i.length,a=i.length>1&&i.slice(1).every(e=>0===e.length||isWhiteSpace(e.charCodeAt(0))),s=t.endsWith('\\"""'),o=e.endsWith('"')&&!s,l=e.endsWith("\\"),p=o||l,u=!(null!=n&&n.minimize)&&(!r||e.length>70||p||a||s),c="",d=r&&isWhiteSpace(e.charCodeAt(0));return(u&&!d||a)&&(c+="\n"),c+=t,(u||p)&&(c+="\n"),'"""'+c+'"""'}function printString(e){return`"${e.replace(d,escapedReplacer)}"`}__name(inspect,"inspect"),__name(formatValue,"formatValue"),__name(formatObjectValue,"formatObjectValue"),__name(isJSONable,"isJSONable"),__name(formatObject,"formatObject"),__name(formatArray,"formatArray"),__name(getObjectTag,"getObjectTag"),__name(invariant,"invariant"),(o=i||(i={})).QUERY="QUERY",o.MUTATION="MUTATION",o.SUBSCRIPTION="SUBSCRIPTION",o.FIELD="FIELD",o.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",o.FRAGMENT_SPREAD="FRAGMENT_SPREAD",o.INLINE_FRAGMENT="INLINE_FRAGMENT",o.VARIABLE_DEFINITION="VARIABLE_DEFINITION",o.SCHEMA="SCHEMA",o.SCALAR="SCALAR",o.OBJECT="OBJECT",o.FIELD_DEFINITION="FIELD_DEFINITION",o.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",o.INTERFACE="INTERFACE",o.UNION="UNION",o.ENUM="ENUM",o.ENUM_VALUE="ENUM_VALUE",o.INPUT_OBJECT="INPUT_OBJECT",o.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION",__name(isWhiteSpace,"isWhiteSpace"),__name(isDigit$1,"isDigit$1"),__name(isLetter,"isLetter"),__name(isNameStart,"isNameStart"),__name(isNameContinue,"isNameContinue"),__name(printBlockString,"printBlockString"),__name(printString,"printString");let d=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function escapedReplacer(e){return f[e.charCodeAt(0)]}__name(escapedReplacer,"escapedReplacer");let f=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"];function devAssert(e,n){if(!e)throw Error(n)}__name(devAssert,"devAssert");let h={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},m=new Set(Object.keys(h));function isNode(e){let n=null==e?void 0:e.kind;return"string"==typeof n&&m.has(n)}__name(isNode,"isNode"),(l=r||(r={})).QUERY="query",l.MUTATION="mutation",l.SUBSCRIPTION="subscription",(p=a||(a={})).NAME="Name",p.DOCUMENT="Document",p.OPERATION_DEFINITION="OperationDefinition",p.VARIABLE_DEFINITION="VariableDefinition",p.SELECTION_SET="SelectionSet",p.FIELD="Field",p.ARGUMENT="Argument",p.FRAGMENT_SPREAD="FragmentSpread",p.INLINE_FRAGMENT="InlineFragment",p.FRAGMENT_DEFINITION="FragmentDefinition",p.VARIABLE="Variable",p.INT="IntValue",p.FLOAT="FloatValue",p.STRING="StringValue",p.BOOLEAN="BooleanValue",p.NULL="NullValue",p.ENUM="EnumValue",p.LIST="ListValue",p.OBJECT="ObjectValue",p.OBJECT_FIELD="ObjectField",p.DIRECTIVE="Directive",p.NAMED_TYPE="NamedType",p.LIST_TYPE="ListType",p.NON_NULL_TYPE="NonNullType",p.SCHEMA_DEFINITION="SchemaDefinition",p.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",p.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",p.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",p.FIELD_DEFINITION="FieldDefinition",p.INPUT_VALUE_DEFINITION="InputValueDefinition",p.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",p.UNION_TYPE_DEFINITION="UnionTypeDefinition",p.ENUM_TYPE_DEFINITION="EnumTypeDefinition",p.ENUM_VALUE_DEFINITION="EnumValueDefinition",p.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",p.DIRECTIVE_DEFINITION="DirectiveDefinition",p.SCHEMA_EXTENSION="SchemaExtension",p.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",p.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",p.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",p.UNION_TYPE_EXTENSION="UnionTypeExtension",p.ENUM_TYPE_EXTENSION="EnumTypeExtension",p.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension";let y=Object.freeze({});function visit(e,n,t=h){let i,r,s;let o=new Map;for(let e of Object.values(a))o.set(e,getEnterLeaveForKind(n,e));let l=Array.isArray(e),p=[e],u=-1,c=[],d=e,f=[],m=[];do{var T,N,v;let e;u++;let a=u===p.length,h=a&&0!==c.length;if(a){if(r=0===m.length?void 0:f[f.length-1],d=s,s=m.pop(),h){if(l){d=d.slice();let e=0;for(let[n,t]of c){let i=n-e;null===t?(d.splice(i,1),e++):d[i]=t}}else for(let[e,n]of(d=Object.defineProperties({},Object.getOwnPropertyDescriptors(d)),c))d[e]=n}u=i.index,p=i.keys,c=i.edits,l=i.inArray,i=i.prev}else if(s){if(null==(d=s[r=l?u:p[u]]))continue;f.push(r)}if(!Array.isArray(d)){isNode(d)||devAssert(!1,`Invalid AST Node: ${inspect(d)}.`);let t=a?null===(T=o.get(d.kind))||void 0===T?void 0:T.leave:null===(N=o.get(d.kind))||void 0===N?void 0:N.enter;if((e=null==t?void 0:t.call(n,d,r,s,f,m))===y)break;if(!1===e){if(!a){f.pop();continue}}else if(void 0!==e&&(c.push([r,e]),!a)){if(isNode(e))d=e;else{f.pop();continue}}}void 0===e&&h&&c.push([r,d]),a?f.pop():(i={inArray:l,index:u,keys:p,edits:c,prev:i},p=(l=Array.isArray(d))?d:null!==(v=t[d.kind])&&void 0!==v?v:[],u=-1,c=[],s&&m.push(s),s=d)}while(void 0!==i);return 0!==c.length?c[c.length-1][1]:e}function getEnterLeaveForKind(e,n){let t=e[n];return"object"==typeof t?t:"function"==typeof t?{enter:t,leave:void 0}:{enter:e.enter,leave:e.leave}}function print(e){return visit(e,T)}__name(visit,"visit"),__name(getEnterLeaveForKind,"getEnterLeaveForKind"),__name(print,"print");let T={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>join(e.definitions,"\n\n")},OperationDefinition:{leave(e){let n=wrap("(",join(e.variableDefinitions,", "),")"),t=join([e.operation,join([e.name,n]),join(e.directives," ")]," ");return("query"===t?"":t+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:n,defaultValue:t,directives:i})=>e+": "+n+wrap(" = ",t)+wrap(" ",join(i," "))},SelectionSet:{leave:({selections:e})=>block(e)},Field:{leave({alias:e,name:n,arguments:t,directives:i,selectionSet:r}){let a=wrap("",e,": ")+n,s=a+wrap("(",join(t,", "),")");return s.length>80&&(s=a+wrap("(\n",indent(join(t,"\n")),"\n)")),join([s,join(i," "),r]," ")}},Argument:{leave:({name:e,value:n})=>e+": "+n},FragmentSpread:{leave:({name:e,directives:n})=>"..."+e+wrap(" ",join(n," "))},InlineFragment:{leave:({typeCondition:e,directives:n,selectionSet:t})=>join(["...",wrap("on ",e),join(n," "),t]," ")},FragmentDefinition:{leave:({name:e,typeCondition:n,variableDefinitions:t,directives:i,selectionSet:r})=>`fragment ${e}${wrap("(",join(t,", "),")")} on ${n} ${wrap("",join(i," ")," ")}`+r},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:n})=>n?printBlockString(e):printString(e)},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+join(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+join(e,", ")+"}"},ObjectField:{leave:({name:e,value:n})=>e+": "+n},Directive:{leave:({name:e,arguments:n})=>"@"+e+wrap("(",join(n,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:n,operationTypes:t})=>wrap("",e,"\n")+join(["schema",join(n," "),block(t)]," ")},OperationTypeDefinition:{leave:({operation:e,type:n})=>e+": "+n},ScalarTypeDefinition:{leave:({description:e,name:n,directives:t})=>wrap("",e,"\n")+join(["scalar",n,join(t," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:n,interfaces:t,directives:i,fields:r})=>wrap("",e,"\n")+join(["type",n,wrap("implements ",join(t," & ")),join(i," "),block(r)]," ")},FieldDefinition:{leave:({description:e,name:n,arguments:t,type:i,directives:r})=>wrap("",e,"\n")+n+(hasMultilineItems(t)?wrap("(\n",indent(join(t,"\n")),"\n)"):wrap("(",join(t,", "),")"))+": "+i+wrap(" ",join(r," "))},InputValueDefinition:{leave:({description:e,name:n,type:t,defaultValue:i,directives:r})=>wrap("",e,"\n")+join([n+": "+t,wrap("= ",i),join(r," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:n,interfaces:t,directives:i,fields:r})=>wrap("",e,"\n")+join(["interface",n,wrap("implements ",join(t," & ")),join(i," "),block(r)]," ")},UnionTypeDefinition:{leave:({description:e,name:n,directives:t,types:i})=>wrap("",e,"\n")+join(["union",n,join(t," "),wrap("= ",join(i," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:n,directives:t,values:i})=>wrap("",e,"\n")+join(["enum",n,join(t," "),block(i)]," ")},EnumValueDefinition:{leave:({description:e,name:n,directives:t})=>wrap("",e,"\n")+join([n,join(t," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:n,directives:t,fields:i})=>wrap("",e,"\n")+join(["input",n,join(t," "),block(i)]," ")},DirectiveDefinition:{leave:({description:e,name:n,arguments:t,repeatable:i,locations:r})=>wrap("",e,"\n")+"directive @"+n+(hasMultilineItems(t)?wrap("(\n",indent(join(t,"\n")),"\n)"):wrap("(",join(t,", "),")"))+(i?" repeatable":"")+" on "+join(r," | ")},SchemaExtension:{leave:({directives:e,operationTypes:n})=>join(["extend schema",join(e," "),block(n)]," ")},ScalarTypeExtension:{leave:({name:e,directives:n})=>join(["extend scalar",e,join(n," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:n,directives:t,fields:i})=>join(["extend type",e,wrap("implements ",join(n," & ")),join(t," "),block(i)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:n,directives:t,fields:i})=>join(["extend interface",e,wrap("implements ",join(n," & ")),join(t," "),block(i)]," ")},UnionTypeExtension:{leave:({name:e,directives:n,types:t})=>join(["extend union",e,join(n," "),wrap("= ",join(t," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:n,values:t})=>join(["extend enum",e,join(n," "),block(t)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:n,fields:t})=>join(["extend input",e,join(n," "),block(t)]," ")}};function join(e,n=""){var t;return null!==(t=null==e?void 0:e.filter(e=>e).join(n))&&void 0!==t?t:""}function block(e){return wrap("{\n",indent(join(e,"\n")),"\n}")}function wrap(e,n,t=""){return null!=n&&""!==n?e+n+t:""}function indent(e){return wrap("  ",e.replace(/\n/g,"\n  "))}function hasMultilineItems(e){var n;return null!==(n=null==e?void 0:e.some(e=>e.includes("\n")))&&void 0!==n&&n}function isIterableObject(e){return"object"==typeof e&&"function"==typeof(null==e?void 0:e[Symbol.iterator])}function isObjectLike(e){return"object"==typeof e&&null!==e}function didYouMean(e,n){let[t,i]=n?[e,n]:[void 0,e],r=" Did you mean ";t&&(r+=t+" ");let a=i.map(e=>`"${e}"`);switch(a.length){case 0:return"";case 1:return r+a[0]+"?";case 2:return r+a[0]+" or "+a[1]+"?"}let s=a.slice(0,5),o=s.pop();return r+s.join(", ")+", or "+o+"?"}function identityFunc(e){return e}__name(join,"join"),__name(block,"block"),__name(wrap,"wrap"),__name(indent,"indent"),__name(hasMultilineItems,"hasMultilineItems"),__name(isIterableObject,"isIterableObject"),__name(isObjectLike,"isObjectLike"),__name(didYouMean,"didYouMean"),__name(identityFunc,"identityFunc");let N=__name(function(e,n){return e instanceof n},"instanceOf");function keyMap(e,n){let t=Object.create(null);for(let i of e)t[n(i)]=i;return t}function keyValMap(e,n,t){let i=Object.create(null);for(let r of e)i[n(r)]=t(r);return i}function mapValue(e,n){let t=Object.create(null);for(let i of Object.keys(e))t[i]=n(e[i],i);return t}function naturalCompare(e,n){let t=0,i=0;for(;t<e.length&&i<n.length;){let r=e.charCodeAt(t),a=n.charCodeAt(i);if(isDigit(r)&&isDigit(a)){let s=0;do++t,s=10*s+r-v,r=e.charCodeAt(t);while(isDigit(r)&&s>0);let o=0;do++i,o=10*o+a-v,a=n.charCodeAt(i);while(isDigit(a)&&o>0);if(s<o)return -1;if(s>o)return 1}else{if(r<a)return -1;if(r>a)return 1;++t,++i}}return e.length-n.length}__name(keyMap,"keyMap"),__name(keyValMap,"keyValMap"),__name(mapValue,"mapValue"),__name(naturalCompare,"naturalCompare");let v=48;function isDigit(e){return!isNaN(e)&&v<=e&&e<=57}function suggestionList(e,n){let t=Object.create(null),i=new LexicalDistance(e),r=Math.floor(.4*e.length)+1;for(let e of n){let n=i.measure(e,r);void 0!==n&&(t[e]=n)}return Object.keys(t).sort((e,n)=>{let i=t[e]-t[n];return 0!==i?i:naturalCompare(e,n)})}__name(isDigit,"isDigit"),__name(suggestionList,"suggestionList");let LexicalDistance=class LexicalDistance{constructor(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=stringToArray(this._inputLowerCase),this._rows=[Array(e.length+1).fill(0),Array(e.length+1).fill(0),Array(e.length+1).fill(0)]}measure(e,n){if(this._input===e)return 0;let t=e.toLowerCase();if(this._inputLowerCase===t)return 1;let i=stringToArray(t),r=this._inputArray;if(i.length<r.length){let e=i;i=r,r=e}let a=i.length,s=r.length;if(a-s>n)return;let o=this._rows;for(let e=0;e<=s;e++)o[0][e]=e;for(let e=1;e<=a;e++){let t=o[(e-1)%3],a=o[e%3],l=a[0]=e;for(let n=1;n<=s;n++){let s=i[e-1]===r[n-1]?0:1,p=Math.min(t[n]+1,a[n-1]+1,t[n-1]+s);if(e>1&&n>1&&i[e-1]===r[n-2]&&i[e-2]===r[n-1]){let t=o[(e-2)%3][n-2];p=Math.min(p,t+1)}p<l&&(l=p),a[n]=p}if(l>n)return}let l=o[a%3][s];return l<=n?l:void 0}};function stringToArray(e){let n=e.length,t=Array(n);for(let i=0;i<n;++i)t[i]=e.charCodeAt(i);return t}function toObjMap(e){if(null==e)return Object.create(null);if(null===Object.getPrototypeOf(e))return e;let n=Object.create(null);for(let[t,i]of Object.entries(e))n[t]=i;return n}__name(LexicalDistance,"LexicalDistance"),__name(stringToArray,"stringToArray"),__name(toObjMap,"toObjMap");let E=/\r\n|[\n\r]/g;function getLocation(e,n){let t=0,i=1;for(let r of e.body.matchAll(E)){if("number"==typeof r.index||invariant(!1),r.index>=n)break;t=r.index+r[0].length,i+=1}return{line:i,column:n+1-t}}function printLocation(e){return printSourceLocation(e.source,getLocation(e.source,e.start))}function printSourceLocation(e,n){let t=e.locationOffset.column-1,i="".padStart(t)+e.body,r=n.line-1,a=e.locationOffset.line-1,s=n.line+a,o=1===n.line?t:0,l=n.column+o,p=`${e.name}:${s}:${l}
`,u=i.split(/\r\n|[\n\r]/g),c=u[r];if(c.length>120){let e=Math.floor(l/80),n=l%80,t=[];for(let e=0;e<c.length;e+=80)t.push(c.slice(e,e+80));return p+printPrefixedLines([[`${s} |`,t[0]],...t.slice(1,e+1).map(e=>["|",e]),["|","^".padStart(n)],["|",t[e+1]]])}return p+printPrefixedLines([[`${s-1} |`,u[r-1]],[`${s} |`,c],["|","^".padStart(l)],[`${s+1} |`,u[r+1]]])}function printPrefixedLines(e){let n=e.filter(([e,n])=>void 0!==n),t=Math.max(...n.map(([e])=>e.length));return n.map(([e,n])=>e.padStart(t)+(n?" "+n:"")).join("\n")}function toNormalizedOptions(e){let n=e[0];return null==n||"kind"in n||"length"in n?{nodes:n,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:n}__name(getLocation,"getLocation"),__name(printLocation,"printLocation"),__name(printSourceLocation,"printSourceLocation"),__name(printPrefixedLines,"printPrefixedLines"),__name(toNormalizedOptions,"toNormalizedOptions");let GraphQLError=class GraphQLError extends Error{constructor(e,...n){var t,i,r;let{nodes:a,source:s,positions:o,path:l,originalError:p,extensions:u}=toNormalizedOptions(n);super(e),this.name="GraphQLError",this.path=null!=l?l:void 0,this.originalError=null!=p?p:void 0,this.nodes=undefinedIfEmpty(Array.isArray(a)?a:a?[a]:void 0);let c=undefinedIfEmpty(null===(t=this.nodes)||void 0===t?void 0:t.map(e=>e.loc).filter(e=>null!=e));this.source=null!=s?s:null==c?void 0:null===(i=c[0])||void 0===i?void 0:i.source,this.positions=null!=o?o:null==c?void 0:c.map(e=>e.start),this.locations=o&&s?o.map(e=>getLocation(s,e)):null==c?void 0:c.map(e=>getLocation(e.source,e.start));let d=isObjectLike(null==p?void 0:p.extensions)?null==p?void 0:p.extensions:void 0;this.extensions=null!==(r=null!=u?u:d)&&void 0!==r?r:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=p&&p.stack?Object.defineProperty(this,"stack",{value:p.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,GraphQLError):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(let n of this.nodes)n.loc&&(e+="\n\n"+printLocation(n.loc));else if(this.source&&this.locations)for(let n of this.locations)e+="\n\n"+printSourceLocation(this.source,n);return e}toJSON(){let e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}};function undefinedIfEmpty(e){return void 0===e||0===e.length?void 0:e}function valueFromASTUntyped(e,n){switch(e.kind){case a.NULL:return null;case a.INT:return parseInt(e.value,10);case a.FLOAT:return parseFloat(e.value);case a.STRING:case a.ENUM:case a.BOOLEAN:return e.value;case a.LIST:return e.values.map(e=>valueFromASTUntyped(e,n));case a.OBJECT:return keyValMap(e.fields,e=>e.name.value,e=>valueFromASTUntyped(e.value,n));case a.VARIABLE:return null==n?void 0:n[e.name.value]}}function assertName(e){if(null!=e||devAssert(!1,"Must provide name."),"string"==typeof e||devAssert(!1,"Expected name to be a string."),0===e.length)throw new GraphQLError("Expected name to be a non-empty string.");for(let n=1;n<e.length;++n)if(!isNameContinue(e.charCodeAt(n)))throw new GraphQLError(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);if(!isNameStart(e.charCodeAt(0)))throw new GraphQLError(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}function assertEnumValueName(e){if("true"===e||"false"===e||"null"===e)throw new GraphQLError(`Enum values cannot be named: ${e}`);return assertName(e)}function isType(e){return isScalarType(e)||isObjectType(e)||isInterfaceType(e)||isUnionType(e)||isEnumType(e)||isInputObjectType(e)||isListType(e)||isNonNullType(e)}function isScalarType(e){return N(e,GraphQLScalarType)}function isObjectType(e){return N(e,GraphQLObjectType)}function isInterfaceType(e){return N(e,GraphQLInterfaceType)}function isUnionType(e){return N(e,GraphQLUnionType)}function isEnumType(e){return N(e,GraphQLEnumType)}function isInputObjectType(e){return N(e,GraphQLInputObjectType)}function isListType(e){return N(e,GraphQLList)}function isNonNullType(e){return N(e,GraphQLNonNull)}function isLeafType(e){return isScalarType(e)||isEnumType(e)}function isAbstractType(e){return isInterfaceType(e)||isUnionType(e)}__name(GraphQLError,"GraphQLError"),__name(undefinedIfEmpty,"undefinedIfEmpty"),__name(valueFromASTUntyped,"valueFromASTUntyped"),__name(assertName,"assertName"),__name(assertEnumValueName,"assertEnumValueName"),__name(isType,"isType"),__name(isScalarType,"isScalarType"),__name(isObjectType,"isObjectType"),__name(isInterfaceType,"isInterfaceType"),__name(isUnionType,"isUnionType"),__name(isEnumType,"isEnumType"),__name(isInputObjectType,"isInputObjectType"),__name(isListType,"isListType"),__name(isNonNullType,"isNonNullType"),__name(isLeafType,"isLeafType"),__name(isAbstractType,"isAbstractType");let GraphQLList=class GraphQLList{constructor(e){isType(e)||devAssert(!1,`Expected ${inspect(e)} to be a GraphQL type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}};__name(GraphQLList,"GraphQLList");let GraphQLNonNull=class GraphQLNonNull{constructor(e){isNullableType(e)||devAssert(!1,`Expected ${inspect(e)} to be a GraphQL nullable type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}};function isNullableType(e){return isType(e)&&!isNonNullType(e)}function resolveReadonlyArrayThunk(e){return"function"==typeof e?e():e}function resolveObjMapThunk(e){return"function"==typeof e?e():e}__name(GraphQLNonNull,"GraphQLNonNull"),__name(isNullableType,"isNullableType"),__name(resolveReadonlyArrayThunk,"resolveReadonlyArrayThunk"),__name(resolveObjMapThunk,"resolveObjMapThunk");let GraphQLScalarType=class GraphQLScalarType{constructor(e){var n,t,i,r;let a=null!==(n=e.parseValue)&&void 0!==n?n:identityFunc;this.name=assertName(e.name),this.description=e.description,this.specifiedByURL=e.specifiedByURL,this.serialize=null!==(t=e.serialize)&&void 0!==t?t:identityFunc,this.parseValue=a,this.parseLiteral=null!==(i=e.parseLiteral)&&void 0!==i?i:(e,n)=>a(valueFromASTUntyped(e,n)),this.extensions=toObjMap(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(r=e.extensionASTNodes)&&void 0!==r?r:[],null==e.specifiedByURL||"string"==typeof e.specifiedByURL||devAssert(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${inspect(e.specifiedByURL)}.`),null==e.serialize||"function"==typeof e.serialize||devAssert(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||devAssert(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};__name(GraphQLScalarType,"GraphQLScalarType");let GraphQLObjectType=class GraphQLObjectType{constructor(e){var n;this.name=assertName(e.name),this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=toObjMap(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._fields=()=>defineFieldMap(e),this._interfaces=()=>defineInterfaces(e),null==e.isTypeOf||"function"==typeof e.isTypeOf||devAssert(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${inspect(e.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fieldsToFieldsConfig(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};function defineInterfaces(e){var n;let t=resolveReadonlyArrayThunk(null!==(n=e.interfaces)&&void 0!==n?n:[]);return Array.isArray(t)||devAssert(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),t}function defineFieldMap(e){let n=resolveObjMapThunk(e.fields);return isPlainObj(n)||devAssert(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),mapValue(n,(n,t)=>{var i;isPlainObj(n)||devAssert(!1,`${e.name}.${t} field config must be an object.`),null==n.resolve||"function"==typeof n.resolve||devAssert(!1,`${e.name}.${t} field resolver must be a function if provided, but got: ${inspect(n.resolve)}.`);let r=null!==(i=n.args)&&void 0!==i?i:{};return isPlainObj(r)||devAssert(!1,`${e.name}.${t} args must be an object with argument names as keys.`),{name:assertName(t),description:n.description,type:n.type,args:defineArguments(r),resolve:n.resolve,subscribe:n.subscribe,deprecationReason:n.deprecationReason,extensions:toObjMap(n.extensions),astNode:n.astNode}})}function defineArguments(e){return Object.entries(e).map(([e,n])=>({name:assertName(e),description:n.description,type:n.type,defaultValue:n.defaultValue,deprecationReason:n.deprecationReason,extensions:toObjMap(n.extensions),astNode:n.astNode}))}function isPlainObj(e){return isObjectLike(e)&&!Array.isArray(e)}function fieldsToFieldsConfig(e){return mapValue(e,e=>({description:e.description,type:e.type,args:argsToArgsConfig(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}))}function argsToArgsConfig(e){return keyValMap(e,e=>e.name,e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}))}__name(GraphQLObjectType,"GraphQLObjectType"),__name(defineInterfaces,"defineInterfaces"),__name(defineFieldMap,"defineFieldMap"),__name(defineArguments,"defineArguments"),__name(isPlainObj,"isPlainObj"),__name(fieldsToFieldsConfig,"fieldsToFieldsConfig"),__name(argsToArgsConfig,"argsToArgsConfig");let GraphQLInterfaceType=class GraphQLInterfaceType{constructor(e){var n;this.name=assertName(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=toObjMap(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._fields=defineFieldMap.bind(void 0,e),this._interfaces=defineInterfaces.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||devAssert(!1,`${this.name} must provide "resolveType" as a function, but got: ${inspect(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fieldsToFieldsConfig(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};__name(GraphQLInterfaceType,"GraphQLInterfaceType");let GraphQLUnionType=class GraphQLUnionType{constructor(e){var n;this.name=assertName(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=toObjMap(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._types=defineTypes.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||devAssert(!1,`${this.name} must provide "resolveType" as a function, but got: ${inspect(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};function defineTypes(e){let n=resolveReadonlyArrayThunk(e.types);return Array.isArray(n)||devAssert(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),n}__name(GraphQLUnionType,"GraphQLUnionType"),__name(defineTypes,"defineTypes");let GraphQLEnumType=class GraphQLEnumType{constructor(e){var n;this.name=assertName(e.name),this.description=e.description,this.extensions=toObjMap(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._values=defineEnumValues(this.name,e.values),this._valueLookup=new Map(this._values.map(e=>[e.value,e])),this._nameLookup=keyMap(this._values,e=>e.name)}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(e){return this._nameLookup[e]}serialize(e){let n=this._valueLookup.get(e);if(void 0===n)throw new GraphQLError(`Enum "${this.name}" cannot represent value: ${inspect(e)}`);return n.name}parseValue(e){if("string"!=typeof e){let n=inspect(e);throw new GraphQLError(`Enum "${this.name}" cannot represent non-string value: ${n}.`+didYouMeanEnumValue(this,n))}let n=this.getValue(e);if(null==n)throw new GraphQLError(`Value "${e}" does not exist in "${this.name}" enum.`+didYouMeanEnumValue(this,e));return n.value}parseLiteral(e,n){if(e.kind!==a.ENUM){let n=print(e);throw new GraphQLError(`Enum "${this.name}" cannot represent non-enum value: ${n}.`+didYouMeanEnumValue(this,n),{nodes:e})}let t=this.getValue(e.value);if(null==t){let n=print(e);throw new GraphQLError(`Value "${n}" does not exist in "${this.name}" enum.`+didYouMeanEnumValue(this,n),{nodes:e})}return t.value}toConfig(){let e=keyValMap(this.getValues(),e=>e.name,e=>({description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}));return{name:this.name,description:this.description,values:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};function didYouMeanEnumValue(e,n){let t=e.getValues().map(e=>e.name),i=suggestionList(n,t);return didYouMean("the enum value",i)}function defineEnumValues(e,n){return isPlainObj(n)||devAssert(!1,`${e} values must be an object with value names as keys.`),Object.entries(n).map(([n,t])=>(isPlainObj(t)||devAssert(!1,`${e}.${n} must refer to an object with a "value" key representing an internal value but got: ${inspect(t)}.`),{name:assertEnumValueName(n),description:t.description,value:void 0!==t.value?t.value:n,deprecationReason:t.deprecationReason,extensions:toObjMap(t.extensions),astNode:t.astNode}))}__name(GraphQLEnumType,"GraphQLEnumType"),__name(didYouMeanEnumValue,"didYouMeanEnumValue"),__name(defineEnumValues,"defineEnumValues");let GraphQLInputObjectType=class GraphQLInputObjectType{constructor(e){var n;this.name=assertName(e.name),this.description=e.description,this.extensions=toObjMap(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(n=e.extensionASTNodes)&&void 0!==n?n:[],this._fields=defineInputFieldMap.bind(void 0,e)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){let e=mapValue(this.getFields(),e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}));return{name:this.name,description:this.description,fields:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};function defineInputFieldMap(e){let n=resolveObjMapThunk(e.fields);return isPlainObj(n)||devAssert(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),mapValue(n,(n,t)=>("resolve"in n&&devAssert(!1,`${e.name}.${t} field has a resolve property, but Input Types cannot define resolvers.`),{name:assertName(t),description:n.description,type:n.type,defaultValue:n.defaultValue,deprecationReason:n.deprecationReason,extensions:toObjMap(n.extensions),astNode:n.astNode}))}__name(GraphQLInputObjectType,"GraphQLInputObjectType"),__name(defineInputFieldMap,"defineInputFieldMap");let b=new GraphQLScalarType({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){let n=serializeObject(e);if("boolean"==typeof n)return n?1:0;let t=n;if("string"==typeof n&&""!==n&&(t=Number(n)),"number"!=typeof t||!Number.isInteger(t))throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(n)}`);if(t>2147483647||t<-2147483648)throw new GraphQLError("Int cannot represent non 32-bit signed integer value: "+inspect(n));return t},parseValue(e){if("number"!=typeof e||!Number.isInteger(e))throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(e)}`);if(e>2147483647||e<-2147483648)throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==a.INT)throw new GraphQLError(`Int cannot represent non-integer value: ${print(e)}`,{nodes:e});let n=parseInt(e.value,10);if(n>2147483647||n<-2147483648)throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return n}}),L=new GraphQLScalarType({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){let n=serializeObject(e);if("boolean"==typeof n)return n?1:0;let t=n;if("string"==typeof n&&""!==n&&(t=Number(n)),"number"!=typeof t||!Number.isFinite(t))throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(n)}`);return t},parseValue(e){if("number"!=typeof e||!Number.isFinite(e))throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(e)}`);return e},parseLiteral(e){if(e.kind!==a.FLOAT&&e.kind!==a.INT)throw new GraphQLError(`Float cannot represent non numeric value: ${print(e)}`,e);return parseFloat(e.value)}}),_=new GraphQLScalarType({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){let n=serializeObject(e);if("string"==typeof n)return n;if("boolean"==typeof n)return n?"true":"false";if("number"==typeof n&&Number.isFinite(n))return n.toString();throw new GraphQLError(`String cannot represent value: ${inspect(e)}`)},parseValue(e){if("string"!=typeof e)throw new GraphQLError(`String cannot represent a non string value: ${inspect(e)}`);return e},parseLiteral(e){if(e.kind!==a.STRING)throw new GraphQLError(`String cannot represent a non string value: ${print(e)}`,{nodes:e});return e.value}}),I=new GraphQLScalarType({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){let n=serializeObject(e);if("boolean"==typeof n)return n;if(Number.isFinite(n))return 0!==n;throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(n)}`)},parseValue(e){if("boolean"!=typeof e)throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(e)}`);return e},parseLiteral(e){if(e.kind!==a.BOOLEAN)throw new GraphQLError(`Boolean cannot represent a non boolean value: ${print(e)}`,{nodes:e});return e.value}}),g=new GraphQLScalarType({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){let n=serializeObject(e);if("string"==typeof n)return n;if(Number.isInteger(n))return String(n);throw new GraphQLError(`ID cannot represent value: ${inspect(e)}`)},parseValue(e){if("string"==typeof e)return e;if("number"==typeof e&&Number.isInteger(e))return e.toString();throw new GraphQLError(`ID cannot represent value: ${inspect(e)}`)},parseLiteral(e){if(e.kind!==a.STRING&&e.kind!==a.INT)throw new GraphQLError("ID cannot represent a non-string and non-integer value: "+print(e),{nodes:e});return e.value}});function serializeObject(e){if(isObjectLike(e)){if("function"==typeof e.valueOf){let n=e.valueOf();if(!isObjectLike(n))return n}if("function"==typeof e.toJSON)return e.toJSON()}return e}function astFromValue(e,n){if(isNonNullType(n)){let t=astFromValue(e,n.ofType);return(null==t?void 0:t.kind)===a.NULL?null:t}if(null===e)return{kind:a.NULL};if(void 0===e)return null;if(isListType(n)){let t=n.ofType;if(isIterableObject(e)){let n=[];for(let i of e){let e=astFromValue(i,t);null!=e&&n.push(e)}return{kind:a.LIST,values:n}}return astFromValue(e,t)}if(isInputObjectType(n)){if(!isObjectLike(e))return null;let t=[];for(let i of Object.values(n.getFields())){let n=astFromValue(e[i.name],i.type);n&&t.push({kind:a.OBJECT_FIELD,name:{kind:a.NAME,value:i.name},value:n})}return{kind:a.OBJECT,fields:t}}if(isLeafType(n)){let t=n.serialize(e);if(null==t)return null;if("boolean"==typeof t)return{kind:a.BOOLEAN,value:t};if("number"==typeof t&&Number.isFinite(t)){let e=String(t);return O.test(e)?{kind:a.INT,value:e}:{kind:a.FLOAT,value:e}}if("string"==typeof t)return isEnumType(n)?{kind:a.ENUM,value:t}:n===g&&O.test(t)?{kind:a.INT,value:t}:{kind:a.STRING,value:t};throw TypeError(`Cannot convert value to AST: ${inspect(t)}.`)}invariant(!1,"Unexpected input type: "+inspect(n))}Object.freeze([_,b,L,I,g]),__name(serializeObject,"serializeObject"),__name(astFromValue,"astFromValue");let O=/^-?(?:0|[1-9][0-9]*)$/,j=new GraphQLObjectType({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:_,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(w))),resolve:e=>Object.values(e.getTypeMap())},queryType:{description:"The type that query operations will be rooted at.",type:new GraphQLNonNull(w),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:w,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:w,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(A))),resolve:e=>e.getDirectives()}})}),A=new GraphQLObjectType({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:()=>({name:{type:new GraphQLNonNull(_),resolve:e=>e.name},description:{type:_,resolve:e=>e.description},isRepeatable:{type:new GraphQLNonNull(I),resolve:e=>e.isRepeatable},locations:{type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(S))),resolve:e=>e.locations},args:{type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(G))),args:{includeDeprecated:{type:I,defaultValue:!1}},resolve:(e,{includeDeprecated:n})=>n?e.args:e.args.filter(e=>null==e.deprecationReason)}})}),S=new GraphQLEnumType({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:i.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:i.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:i.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:i.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:i.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:i.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:i.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:i.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:i.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:i.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:i.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:i.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:i.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:i.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:i.UNION,description:"Location adjacent to a union definition."},ENUM:{value:i.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:i.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:i.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:i.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),w=new GraphQLObjectType({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new GraphQLNonNull(Q),resolve:e=>isScalarType(e)?s.SCALAR:isObjectType(e)?s.OBJECT:isInterfaceType(e)?s.INTERFACE:isUnionType(e)?s.UNION:isEnumType(e)?s.ENUM:isInputObjectType(e)?s.INPUT_OBJECT:isListType(e)?s.LIST:isNonNullType(e)?s.NON_NULL:void invariant(!1,`Unexpected type: "${inspect(e)}".`)},name:{type:_,resolve:e=>"name"in e?e.name:void 0},description:{type:_,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:_,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new GraphQLList(new GraphQLNonNull(F)),args:{includeDeprecated:{type:I,defaultValue:!1}},resolve(e,{includeDeprecated:n}){if(isObjectType(e)||isInterfaceType(e)){let t=Object.values(e.getFields());return n?t:t.filter(e=>null==e.deprecationReason)}}},interfaces:{type:new GraphQLList(new GraphQLNonNull(w)),resolve(e){if(isObjectType(e)||isInterfaceType(e))return e.getInterfaces()}},possibleTypes:{type:new GraphQLList(new GraphQLNonNull(w)),resolve(e,n,t,{schema:i}){if(isAbstractType(e))return i.getPossibleTypes(e)}},enumValues:{type:new GraphQLList(new GraphQLNonNull(D)),args:{includeDeprecated:{type:I,defaultValue:!1}},resolve(e,{includeDeprecated:n}){if(isEnumType(e)){let t=e.getValues();return n?t:t.filter(e=>null==e.deprecationReason)}}},inputFields:{type:new GraphQLList(new GraphQLNonNull(G)),args:{includeDeprecated:{type:I,defaultValue:!1}},resolve(e,{includeDeprecated:n}){if(isInputObjectType(e)){let t=Object.values(e.getFields());return n?t:t.filter(e=>null==e.deprecationReason)}}},ofType:{type:w,resolve:e=>"ofType"in e?e.ofType:void 0}})}),F=new GraphQLObjectType({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new GraphQLNonNull(_),resolve:e=>e.name},description:{type:_,resolve:e=>e.description},args:{type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(G))),args:{includeDeprecated:{type:I,defaultValue:!1}},resolve:(e,{includeDeprecated:n})=>n?e.args:e.args.filter(e=>null==e.deprecationReason)},type:{type:new GraphQLNonNull(w),resolve:e=>e.type},isDeprecated:{type:new GraphQLNonNull(I),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:_,resolve:e=>e.deprecationReason}})}),G=new GraphQLObjectType({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new GraphQLNonNull(_),resolve:e=>e.name},description:{type:_,resolve:e=>e.description},type:{type:new GraphQLNonNull(w),resolve:e=>e.type},defaultValue:{type:_,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){let{type:n,defaultValue:t}=e,i=astFromValue(t,n);return i?print(i):null}},isDeprecated:{type:new GraphQLNonNull(I),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:_,resolve:e=>e.deprecationReason}})}),D=new GraphQLObjectType({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new GraphQLNonNull(_),resolve:e=>e.name},description:{type:_,resolve:e=>e.description},isDeprecated:{type:new GraphQLNonNull(I),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:_,resolve:e=>e.deprecationReason}})});(u=s||(s={})).SCALAR="SCALAR",u.OBJECT="OBJECT",u.INTERFACE="INTERFACE",u.UNION="UNION",u.ENUM="ENUM",u.INPUT_OBJECT="INPUT_OBJECT",u.LIST="LIST",u.NON_NULL="NON_NULL";let Q=new GraphQLEnumType({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:s.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:s.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:s.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:s.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:s.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:s.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:s.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:s.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),V={name:"__schema",type:new GraphQLNonNull(j),description:"Access the current type schema of this server.",args:[],resolve:(e,n,t,{schema:i})=>i,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},x={name:"__type",type:w,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new GraphQLNonNull(_),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:n},t,{schema:i})=>i.getType(n),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},R={name:"__typename",type:new GraphQLNonNull(_),description:"The name of the current Object type at runtime.",args:[],resolve:(e,n,t,{parentType:i})=>i.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};Object.freeze([j,A,S,w,F,G,D,Q])}}]);
//# sourceMappingURL=2584.6bf74f06e2a43bfb.js.map