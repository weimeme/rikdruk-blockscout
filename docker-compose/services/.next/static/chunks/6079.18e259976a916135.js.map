{"version":3,"file":"static/chunks/6079.18e259976a916135.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@graphiql/react/dist/show-hint.es.js","webpack://_N_E/<anon>"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { a as codemirror } from \"./codemirror.es.js\";\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: \"Module\" }));\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar showHint$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports);\n  })(function(CodeMirror) {\n    var HINT_ELEMENT_CLASS = \"CodeMirror-hint\";\n    var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n    CodeMirror.showHint = function(cm, getHints, options) {\n      if (!getHints)\n        return cm.showHint(options);\n      if (options && options.async)\n        getHints.async = true;\n      var newOpts = { hint: getHints };\n      if (options)\n        for (var prop in options)\n          newOpts[prop] = options[prop];\n      return cm.showHint(newOpts);\n    };\n    CodeMirror.defineExtension(\"showHint\", function(options) {\n      options = parseOptions(this, this.getCursor(\"start\"), options);\n      var selections = this.listSelections();\n      if (selections.length > 1)\n        return;\n      if (this.somethingSelected()) {\n        if (!options.hint.supportsSelection)\n          return;\n        for (var i = 0; i < selections.length; i++)\n          if (selections[i].head.line != selections[i].anchor.line)\n            return;\n      }\n      if (this.state.completionActive)\n        this.state.completionActive.close();\n      var completion = this.state.completionActive = new Completion(this, options);\n      if (!completion.options.hint)\n        return;\n      CodeMirror.signal(this, \"startCompletion\", this);\n      completion.update(true);\n    });\n    CodeMirror.defineExtension(\"closeHint\", function() {\n      if (this.state.completionActive)\n        this.state.completionActive.close();\n    });\n    function Completion(cm, options) {\n      this.cm = cm;\n      this.options = options;\n      this.widget = null;\n      this.debounce = 0;\n      this.tick = 0;\n      this.startPos = this.cm.getCursor(\"start\");\n      this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n      if (this.options.updateOnCursorActivity) {\n        var self = this;\n        cm.on(\"cursorActivity\", this.activityFunc = function() {\n          self.cursorActivity();\n        });\n      }\n    }\n    __name(Completion, \"Completion\");\n    var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n      return setTimeout(fn, 1e3 / 60);\n    };\n    var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n    Completion.prototype = {\n      close: function() {\n        if (!this.active())\n          return;\n        this.cm.state.completionActive = null;\n        this.tick = null;\n        if (this.options.updateOnCursorActivity) {\n          this.cm.off(\"cursorActivity\", this.activityFunc);\n        }\n        if (this.widget && this.data)\n          CodeMirror.signal(this.data, \"close\");\n        if (this.widget)\n          this.widget.close();\n        CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n      },\n      active: function() {\n        return this.cm.state.completionActive == this;\n      },\n      pick: function(data, i) {\n        var completion = data.list[i], self = this;\n        this.cm.operation(function() {\n          if (completion.hint)\n            completion.hint(self.cm, data, completion);\n          else\n            self.cm.replaceRange(getText(completion), completion.from || data.from, completion.to || data.to, \"complete\");\n          CodeMirror.signal(data, \"pick\", completion);\n          self.cm.scrollIntoView();\n        });\n        if (this.options.closeOnPick) {\n          this.close();\n        }\n      },\n      cursorActivity: function() {\n        if (this.debounce) {\n          cancelAnimationFrame(this.debounce);\n          this.debounce = 0;\n        }\n        var identStart = this.startPos;\n        if (this.data) {\n          identStart = this.data.from;\n        }\n        var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n        if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch || pos.ch < identStart.ch || this.cm.somethingSelected() || (!pos.ch || this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n          this.close();\n        } else {\n          var self = this;\n          this.debounce = requestAnimationFrame(function() {\n            self.update();\n          });\n          if (this.widget)\n            this.widget.disable();\n        }\n      },\n      update: function(first) {\n        if (this.tick == null)\n          return;\n        var self = this, myTick = ++this.tick;\n        fetchHints(this.options.hint, this.cm, this.options, function(data) {\n          if (self.tick == myTick)\n            self.finishUpdate(data, first);\n        });\n      },\n      finishUpdate: function(data, first) {\n        if (this.data)\n          CodeMirror.signal(this.data, \"update\");\n        var picked = this.widget && this.widget.picked || first && this.options.completeSingle;\n        if (this.widget)\n          this.widget.close();\n        this.data = data;\n        if (data && data.list.length) {\n          if (picked && data.list.length == 1) {\n            this.pick(data, 0);\n          } else {\n            this.widget = new Widget(this, data);\n            CodeMirror.signal(data, \"shown\");\n          }\n        }\n      }\n    };\n    function parseOptions(cm, pos, options) {\n      var editor = cm.options.hintOptions;\n      var out = {};\n      for (var prop in defaultOptions)\n        out[prop] = defaultOptions[prop];\n      if (editor) {\n        for (var prop in editor)\n          if (editor[prop] !== void 0)\n            out[prop] = editor[prop];\n      }\n      if (options) {\n        for (var prop in options)\n          if (options[prop] !== void 0)\n            out[prop] = options[prop];\n      }\n      if (out.hint.resolve)\n        out.hint = out.hint.resolve(cm, pos);\n      return out;\n    }\n    __name(parseOptions, \"parseOptions\");\n    function getText(completion) {\n      if (typeof completion == \"string\")\n        return completion;\n      else\n        return completion.text;\n    }\n    __name(getText, \"getText\");\n    function buildKeyMap(completion, handle) {\n      var baseMap = {\n        Up: function() {\n          handle.moveFocus(-1);\n        },\n        Down: function() {\n          handle.moveFocus(1);\n        },\n        PageUp: function() {\n          handle.moveFocus(-handle.menuSize() + 1, true);\n        },\n        PageDown: function() {\n          handle.moveFocus(handle.menuSize() - 1, true);\n        },\n        Home: function() {\n          handle.setFocus(0);\n        },\n        End: function() {\n          handle.setFocus(handle.length - 1);\n        },\n        Enter: handle.pick,\n        Tab: handle.pick,\n        Esc: handle.close\n      };\n      var mac = /Mac/.test(navigator.platform);\n      if (mac) {\n        baseMap[\"Ctrl-P\"] = function() {\n          handle.moveFocus(-1);\n        };\n        baseMap[\"Ctrl-N\"] = function() {\n          handle.moveFocus(1);\n        };\n      }\n      var custom = completion.options.customKeys;\n      var ourMap = custom ? {} : baseMap;\n      function addBinding(key2, val) {\n        var bound;\n        if (typeof val != \"string\")\n          bound = /* @__PURE__ */ __name(function(cm) {\n            return val(cm, handle);\n          }, \"bound\");\n        else if (baseMap.hasOwnProperty(val))\n          bound = baseMap[val];\n        else\n          bound = val;\n        ourMap[key2] = bound;\n      }\n      __name(addBinding, \"addBinding\");\n      if (custom) {\n        for (var key in custom)\n          if (custom.hasOwnProperty(key))\n            addBinding(key, custom[key]);\n      }\n      var extra = completion.options.extraKeys;\n      if (extra) {\n        for (var key in extra)\n          if (extra.hasOwnProperty(key))\n            addBinding(key, extra[key]);\n      }\n      return ourMap;\n    }\n    __name(buildKeyMap, \"buildKeyMap\");\n    function getHintElement(hintsElement, el) {\n      while (el && el != hintsElement) {\n        if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement)\n          return el;\n        el = el.parentNode;\n      }\n    }\n    __name(getHintElement, \"getHintElement\");\n    function Widget(completion, data) {\n      this.id = \"cm-complete-\" + Math.floor(Math.random(1e6));\n      this.completion = completion;\n      this.data = data;\n      this.picked = false;\n      var widget = this, cm = completion.cm;\n      var ownerDocument = cm.getInputField().ownerDocument;\n      var parentWindow = ownerDocument.defaultView || ownerDocument.parentWindow;\n      var hints = this.hints = ownerDocument.createElement(\"ul\");\n      hints.setAttribute(\"role\", \"listbox\");\n      hints.setAttribute(\"aria-expanded\", \"true\");\n      hints.id = this.id;\n      var theme = completion.cm.options.theme;\n      hints.className = \"CodeMirror-hints \" + theme;\n      this.selectedHint = data.selectedHint || 0;\n      var completions = data.list;\n      for (var i = 0; i < completions.length; ++i) {\n        var elt = hints.appendChild(ownerDocument.createElement(\"li\")), cur = completions[i];\n        var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n        if (cur.className != null)\n          className = cur.className + \" \" + className;\n        elt.className = className;\n        if (i == this.selectedHint)\n          elt.setAttribute(\"aria-selected\", \"true\");\n        elt.id = this.id + \"-\" + i;\n        elt.setAttribute(\"role\", \"option\");\n        if (cur.render)\n          cur.render(elt, data, cur);\n        else\n          elt.appendChild(ownerDocument.createTextNode(cur.displayText || getText(cur)));\n        elt.hintId = i;\n      }\n      var container = completion.options.container || ownerDocument.body;\n      var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n      var left = pos.left, top = pos.bottom, below = true;\n      var offsetLeft = 0, offsetTop = 0;\n      if (container !== ownerDocument.body) {\n        var isContainerPositioned = [\"absolute\", \"relative\", \"fixed\"].indexOf(parentWindow.getComputedStyle(container).position) !== -1;\n        var offsetParent = isContainerPositioned ? container : container.offsetParent;\n        var offsetParentPosition = offsetParent.getBoundingClientRect();\n        var bodyPosition = ownerDocument.body.getBoundingClientRect();\n        offsetLeft = offsetParentPosition.left - bodyPosition.left - offsetParent.scrollLeft;\n        offsetTop = offsetParentPosition.top - bodyPosition.top - offsetParent.scrollTop;\n      }\n      hints.style.left = left - offsetLeft + \"px\";\n      hints.style.top = top - offsetTop + \"px\";\n      var winW = parentWindow.innerWidth || Math.max(ownerDocument.body.offsetWidth, ownerDocument.documentElement.offsetWidth);\n      var winH = parentWindow.innerHeight || Math.max(ownerDocument.body.offsetHeight, ownerDocument.documentElement.offsetHeight);\n      container.appendChild(hints);\n      cm.getInputField().setAttribute(\"aria-autocomplete\", \"list\");\n      cm.getInputField().setAttribute(\"aria-owns\", this.id);\n      cm.getInputField().setAttribute(\"aria-activedescendant\", this.id + \"-\" + this.selectedHint);\n      var box = completion.options.moveOnOverlap ? hints.getBoundingClientRect() : new DOMRect();\n      var scrolls = completion.options.paddingForScrollbar ? hints.scrollHeight > hints.clientHeight + 1 : false;\n      var startScroll;\n      setTimeout(function() {\n        startScroll = cm.getScrollInfo();\n      });\n      var overlapY = box.bottom - winH;\n      if (overlapY > 0) {\n        var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n        if (curTop - height > 0) {\n          hints.style.top = (top = pos.top - height - offsetTop) + \"px\";\n          below = false;\n        } else if (height > winH) {\n          hints.style.height = winH - 5 + \"px\";\n          hints.style.top = (top = pos.bottom - box.top - offsetTop) + \"px\";\n          var cursor = cm.getCursor();\n          if (data.from.ch != cursor.ch) {\n            pos = cm.cursorCoords(cursor);\n            hints.style.left = (left = pos.left - offsetLeft) + \"px\";\n            box = hints.getBoundingClientRect();\n          }\n        }\n      }\n      var overlapX = box.right - winW;\n      if (scrolls)\n        overlapX += cm.display.nativeBarWidth;\n      if (overlapX > 0) {\n        if (box.right - box.left > winW) {\n          hints.style.width = winW - 5 + \"px\";\n          overlapX -= box.right - box.left - winW;\n        }\n        hints.style.left = (left = pos.left - overlapX - offsetLeft) + \"px\";\n      }\n      if (scrolls)\n        for (var node = hints.firstChild; node; node = node.nextSibling)\n          node.style.paddingRight = cm.display.nativeBarWidth + \"px\";\n      cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n        moveFocus: function(n, avoidWrap) {\n          widget.changeActive(widget.selectedHint + n, avoidWrap);\n        },\n        setFocus: function(n) {\n          widget.changeActive(n);\n        },\n        menuSize: function() {\n          return widget.screenAmount();\n        },\n        length: completions.length,\n        close: function() {\n          completion.close();\n        },\n        pick: function() {\n          widget.pick();\n        },\n        data\n      }));\n      if (completion.options.closeOnUnfocus) {\n        var closingOnBlur;\n        cm.on(\"blur\", this.onBlur = function() {\n          closingOnBlur = setTimeout(function() {\n            completion.close();\n          }, 100);\n        });\n        cm.on(\"focus\", this.onFocus = function() {\n          clearTimeout(closingOnBlur);\n        });\n      }\n      cm.on(\"scroll\", this.onScroll = function() {\n        var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n        if (!startScroll)\n          startScroll = cm.getScrollInfo();\n        var newTop = top + startScroll.top - curScroll.top;\n        var point = newTop - (parentWindow.pageYOffset || (ownerDocument.documentElement || ownerDocument.body).scrollTop);\n        if (!below)\n          point += hints.offsetHeight;\n        if (point <= editor.top || point >= editor.bottom)\n          return completion.close();\n        hints.style.top = newTop + \"px\";\n        hints.style.left = left + startScroll.left - curScroll.left + \"px\";\n      });\n      CodeMirror.on(hints, \"dblclick\", function(e) {\n        var t = getHintElement(hints, e.target || e.srcElement);\n        if (t && t.hintId != null) {\n          widget.changeActive(t.hintId);\n          widget.pick();\n        }\n      });\n      CodeMirror.on(hints, \"click\", function(e) {\n        var t = getHintElement(hints, e.target || e.srcElement);\n        if (t && t.hintId != null) {\n          widget.changeActive(t.hintId);\n          if (completion.options.completeOnSingleClick)\n            widget.pick();\n        }\n      });\n      CodeMirror.on(hints, \"mousedown\", function() {\n        setTimeout(function() {\n          cm.focus();\n        }, 20);\n      });\n      var selectedHintRange = this.getSelectedHintRange();\n      if (selectedHintRange.from !== 0 || selectedHintRange.to !== 0) {\n        this.scrollToActive();\n      }\n      CodeMirror.signal(data, \"select\", completions[this.selectedHint], hints.childNodes[this.selectedHint]);\n      return true;\n    }\n    __name(Widget, \"Widget\");\n    Widget.prototype = {\n      close: function() {\n        if (this.completion.widget != this)\n          return;\n        this.completion.widget = null;\n        if (this.hints.parentNode)\n          this.hints.parentNode.removeChild(this.hints);\n        this.completion.cm.removeKeyMap(this.keyMap);\n        var input = this.completion.cm.getInputField();\n        input.removeAttribute(\"aria-activedescendant\");\n        input.removeAttribute(\"aria-owns\");\n        var cm = this.completion.cm;\n        if (this.completion.options.closeOnUnfocus) {\n          cm.off(\"blur\", this.onBlur);\n          cm.off(\"focus\", this.onFocus);\n        }\n        cm.off(\"scroll\", this.onScroll);\n      },\n      disable: function() {\n        this.completion.cm.removeKeyMap(this.keyMap);\n        var widget = this;\n        this.keyMap = { Enter: function() {\n          widget.picked = true;\n        } };\n        this.completion.cm.addKeyMap(this.keyMap);\n      },\n      pick: function() {\n        this.completion.pick(this.data, this.selectedHint);\n      },\n      changeActive: function(i, avoidWrap) {\n        if (i >= this.data.list.length)\n          i = avoidWrap ? this.data.list.length - 1 : 0;\n        else if (i < 0)\n          i = avoidWrap ? 0 : this.data.list.length - 1;\n        if (this.selectedHint == i)\n          return;\n        var node = this.hints.childNodes[this.selectedHint];\n        if (node) {\n          node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n          node.removeAttribute(\"aria-selected\");\n        }\n        node = this.hints.childNodes[this.selectedHint = i];\n        node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n        node.setAttribute(\"aria-selected\", \"true\");\n        this.completion.cm.getInputField().setAttribute(\"aria-activedescendant\", node.id);\n        this.scrollToActive();\n        CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n      },\n      scrollToActive: function() {\n        var selectedHintRange = this.getSelectedHintRange();\n        var node1 = this.hints.childNodes[selectedHintRange.from];\n        var node2 = this.hints.childNodes[selectedHintRange.to];\n        var firstNode = this.hints.firstChild;\n        if (node1.offsetTop < this.hints.scrollTop)\n          this.hints.scrollTop = node1.offsetTop - firstNode.offsetTop;\n        else if (node2.offsetTop + node2.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n          this.hints.scrollTop = node2.offsetTop + node2.offsetHeight - this.hints.clientHeight + firstNode.offsetTop;\n      },\n      screenAmount: function() {\n        return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n      },\n      getSelectedHintRange: function() {\n        var margin = this.completion.options.scrollMargin || 0;\n        return {\n          from: Math.max(0, this.selectedHint - margin),\n          to: Math.min(this.data.list.length - 1, this.selectedHint + margin)\n        };\n      }\n    };\n    function applicableHelpers(cm, helpers) {\n      if (!cm.somethingSelected())\n        return helpers;\n      var result = [];\n      for (var i = 0; i < helpers.length; i++)\n        if (helpers[i].supportsSelection)\n          result.push(helpers[i]);\n      return result;\n    }\n    __name(applicableHelpers, \"applicableHelpers\");\n    function fetchHints(hint, cm, options, callback) {\n      if (hint.async) {\n        hint(cm, callback, options);\n      } else {\n        var result = hint(cm, options);\n        if (result && result.then)\n          result.then(callback);\n        else\n          callback(result);\n      }\n    }\n    __name(fetchHints, \"fetchHints\");\n    function resolveAutoHints(cm, pos) {\n      var helpers = cm.getHelpers(pos, \"hint\"), words;\n      if (helpers.length) {\n        var resolved = /* @__PURE__ */ __name(function(cm2, callback, options) {\n          var app = applicableHelpers(cm2, helpers);\n          function run(i) {\n            if (i == app.length)\n              return callback(null);\n            fetchHints(app[i], cm2, options, function(result) {\n              if (result && result.list.length > 0)\n                callback(result);\n              else\n                run(i + 1);\n            });\n          }\n          __name(run, \"run\");\n          run(0);\n        }, \"resolved\");\n        resolved.async = true;\n        resolved.supportsSelection = true;\n        return resolved;\n      } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n        return function(cm2) {\n          return CodeMirror.hint.fromList(cm2, { words });\n        };\n      } else if (CodeMirror.hint.anyword) {\n        return function(cm2, options) {\n          return CodeMirror.hint.anyword(cm2, options);\n        };\n      } else {\n        return function() {\n        };\n      }\n    }\n    __name(resolveAutoHints, \"resolveAutoHints\");\n    CodeMirror.registerHelper(\"hint\", \"auto\", {\n      resolve: resolveAutoHints\n    });\n    CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n      var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n      var term, from = CodeMirror.Pos(cur.line, token.start), to = cur;\n      if (token.start < cur.ch && /\\w/.test(token.string.charAt(cur.ch - token.start - 1))) {\n        term = token.string.substr(0, cur.ch - token.start);\n      } else {\n        term = \"\";\n        from = cur;\n      }\n      var found = [];\n      for (var i = 0; i < options.words.length; i++) {\n        var word = options.words[i];\n        if (word.slice(0, term.length) == term)\n          found.push(word);\n      }\n      if (found.length)\n        return { list: found, from, to };\n    });\n    CodeMirror.commands.autocomplete = CodeMirror.showHint;\n    var defaultOptions = {\n      hint: CodeMirror.hint.auto,\n      completeSingle: true,\n      alignWithWord: true,\n      closeCharacters: /[\\s()\\[\\]{};:>,]/,\n      closeOnPick: true,\n      closeOnUnfocus: true,\n      updateOnCursorActivity: true,\n      completeOnSingleClick: true,\n      container: null,\n      customKeys: null,\n      extraKeys: null,\n      paddingForScrollbar: true,\n      moveOnOverlap: true\n    };\n    CodeMirror.defineOption(\"hintOptions\", null);\n  });\n})();\nvar showHint = showHint$2.exports;\nvar showHint$1 = /* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  \"default\": showHint\n}, [showHint$2.exports]);\nexport { showHint$1 as s };\n"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","Symbol","toStringTag","showHint$2","exports","mod","CodeMirror","ACTIVE_HINT_ELEMENT_CLASS","Completion","cm","options","widget","debounce","tick","startPos","getCursor","startLen","getLine","line","length","getSelection","updateOnCursorActivity","self","on","activityFunc","cursorActivity","showHint","getHints","async","newOpts","hint","prop","defineExtension","parseOptions","selections","listSelections","somethingSelected","supportsSelection","i","head","anchor","state","completionActive","close","completion","signal","update","requestAnimationFrame","window","fn","setTimeout","cancelAnimationFrame","clearTimeout","pos","editor","hintOptions","out","defaultOptions","resolve","getText","text","buildKeyMap","handle","baseMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","Enter","pick","Tab","Esc","test","navigator","platform","custom","customKeys","ourMap","addBinding","key2","val","bound","hasOwnProperty","key","extra","extraKeys","getHintElement","hintsElement","el","nodeName","toUpperCase","parentNode","Widget","data","id","Math","floor","random","picked","startScroll","closingOnBlur","ownerDocument","getInputField","parentWindow","defaultView","hints","createElement","setAttribute","theme","className","selectedHint","completions","list","elt","appendChild","cur","HINT_ELEMENT_CLASS","render","createTextNode","displayText","hintId","container","body","cursorCoords","alignWithWord","from","left","top","bottom","below","offsetLeft","offsetTop","offsetParent","isContainerPositioned","indexOf","getComputedStyle","position","offsetParentPosition","getBoundingClientRect","bodyPosition","scrollLeft","scrollTop","style","winW","innerWidth","max","offsetWidth","documentElement","winH","innerHeight","offsetHeight","box","moveOnOverlap","DOMRect","scrolls","paddingForScrollbar","scrollHeight","clientHeight","getScrollInfo","overlapY","height","curTop","cursor","ch","overlapX","right","display","nativeBarWidth","width","node","firstChild","nextSibling","paddingRight","addKeyMap","keyMap","avoidWrap","changeActive","screenAmount","closeOnUnfocus","onBlur","onFocus","onScroll","curScroll","getWrapperElement","newTop","point","pageYOffset","t","srcElement","completeOnSingleClick","focus","selectedHintRange","getSelectedHintRange","to","scrollToActive","childNodes","applicableHelpers","helpers","result","push","fetchHints","callback","then","resolveAutoHints","words","getHelpers","resolved","cm2","app","run","getHelper","fromList","anyword","prototype","active","off","operation","replaceRange","scrollIntoView","closeOnPick","identStart","closeCharacters","charAt","disable","first","myTick","finishUpdate","completeSingle","removeChild","removeKeyMap","input","removeAttribute","replace","node1","node2","firstNode","margin","scrollMargin","min","registerHelper","term","token","getTokenAt","Pos","start","string","substr","found","word","slice","commands","autocomplete","auto","defineOption","_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__","a","showHint$1","__proto__"],"sourceRoot":""}