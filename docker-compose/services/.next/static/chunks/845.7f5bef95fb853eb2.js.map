{"version":3,"file":"static/chunks/845.7f5bef95fb853eb2.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@graphiql/react/dist/closebrackets.es.js","webpack://_N_E/<anon>"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { a as codemirror } from \"./codemirror.es.js\";\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: \"Module\" }));\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar closebrackets$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports);\n  })(function(CodeMirror) {\n    var defaults = {\n      pairs: `()[]{}''\"\"`,\n      closeBefore: `)]}'\":;>`,\n      triples: \"\",\n      explode: \"[]{}\"\n    };\n    var Pos = CodeMirror.Pos;\n    CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\n      if (old && old != CodeMirror.Init) {\n        cm.removeKeyMap(keyMap);\n        cm.state.closeBrackets = null;\n      }\n      if (val) {\n        ensureBound(getOption(val, \"pairs\"));\n        cm.state.closeBrackets = val;\n        cm.addKeyMap(keyMap);\n      }\n    });\n    function getOption(conf, name) {\n      if (name == \"pairs\" && typeof conf == \"string\")\n        return conf;\n      if (typeof conf == \"object\" && conf[name] != null)\n        return conf[name];\n      return defaults[name];\n    }\n    __name(getOption, \"getOption\");\n    var keyMap = { Backspace: handleBackspace, Enter: handleEnter };\n    function ensureBound(chars) {\n      for (var i = 0; i < chars.length; i++) {\n        var ch = chars.charAt(i), key = \"'\" + ch + \"'\";\n        if (!keyMap[key])\n          keyMap[key] = handler(ch);\n      }\n    }\n    __name(ensureBound, \"ensureBound\");\n    ensureBound(defaults.pairs + \"`\");\n    function handler(ch) {\n      return function(cm) {\n        return handleChar(cm, ch);\n      };\n    }\n    __name(handler, \"handler\");\n    function getConfig(cm) {\n      var deflt = cm.state.closeBrackets;\n      if (!deflt || deflt.override)\n        return deflt;\n      var mode = cm.getModeAt(cm.getCursor());\n      return mode.closeBrackets || deflt;\n    }\n    __name(getConfig, \"getConfig\");\n    function handleBackspace(cm) {\n      var conf = getConfig(cm);\n      if (!conf || cm.getOption(\"disableInput\"))\n        return CodeMirror.Pass;\n      var pairs = getOption(conf, \"pairs\");\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        if (!ranges[i].empty())\n          return CodeMirror.Pass;\n        var around = charsAround(cm, ranges[i].head);\n        if (!around || pairs.indexOf(around) % 2 != 0)\n          return CodeMirror.Pass;\n      }\n      for (var i = ranges.length - 1; i >= 0; i--) {\n        var cur = ranges[i].head;\n        cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), \"+delete\");\n      }\n    }\n    __name(handleBackspace, \"handleBackspace\");\n    function handleEnter(cm) {\n      var conf = getConfig(cm);\n      var explode = conf && getOption(conf, \"explode\");\n      if (!explode || cm.getOption(\"disableInput\"))\n        return CodeMirror.Pass;\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        if (!ranges[i].empty())\n          return CodeMirror.Pass;\n        var around = charsAround(cm, ranges[i].head);\n        if (!around || explode.indexOf(around) % 2 != 0)\n          return CodeMirror.Pass;\n      }\n      cm.operation(function() {\n        var linesep = cm.lineSeparator() || \"\\n\";\n        cm.replaceSelection(linesep + linesep, null);\n        moveSel(cm, -1);\n        ranges = cm.listSelections();\n        for (var i2 = 0; i2 < ranges.length; i2++) {\n          var line = ranges[i2].head.line;\n          cm.indentLine(line, null, true);\n          cm.indentLine(line + 1, null, true);\n        }\n      });\n    }\n    __name(handleEnter, \"handleEnter\");\n    function moveSel(cm, dir) {\n      var newRanges = [], ranges = cm.listSelections(), primary = 0;\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head == cm.getCursor())\n          primary = i;\n        var pos = range.head.ch || dir > 0 ? { line: range.head.line, ch: range.head.ch + dir } : { line: range.head.line - 1 };\n        newRanges.push({ anchor: pos, head: pos });\n      }\n      cm.setSelections(newRanges, primary);\n    }\n    __name(moveSel, \"moveSel\");\n    function contractSelection(sel) {\n      var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n      return {\n        anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n        head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))\n      };\n    }\n    __name(contractSelection, \"contractSelection\");\n    function handleChar(cm, ch) {\n      var conf = getConfig(cm);\n      if (!conf || cm.getOption(\"disableInput\"))\n        return CodeMirror.Pass;\n      var pairs = getOption(conf, \"pairs\");\n      var pos = pairs.indexOf(ch);\n      if (pos == -1)\n        return CodeMirror.Pass;\n      var closeBefore = getOption(conf, \"closeBefore\");\n      var triples = getOption(conf, \"triples\");\n      var identical = pairs.charAt(pos + 1) == ch;\n      var ranges = cm.listSelections();\n      var opening = pos % 2 == 0;\n      var type;\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i], cur = range.head, curType;\n        var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n        if (opening && !range.empty()) {\n          curType = \"surround\";\n        } else if ((identical || !opening) && next == ch) {\n          if (identical && stringStartsAfter(cm, cur))\n            curType = \"both\";\n          else if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n            curType = \"skipThree\";\n          else\n            curType = \"skip\";\n        } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 && cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch) {\n          if (cur.ch > 2 && /\\bstring/.test(cm.getTokenTypeAt(Pos(cur.line, cur.ch - 2))))\n            return CodeMirror.Pass;\n          curType = \"addFour\";\n        } else if (identical) {\n          var prev = cur.ch == 0 ? \" \" : cm.getRange(Pos(cur.line, cur.ch - 1), cur);\n          if (!CodeMirror.isWordChar(next) && prev != ch && !CodeMirror.isWordChar(prev))\n            curType = \"both\";\n          else\n            return CodeMirror.Pass;\n        } else if (opening && (next.length === 0 || /\\s/.test(next) || closeBefore.indexOf(next) > -1)) {\n          curType = \"both\";\n        } else {\n          return CodeMirror.Pass;\n        }\n        if (!type)\n          type = curType;\n        else if (type != curType)\n          return CodeMirror.Pass;\n      }\n      var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n      var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n      cm.operation(function() {\n        if (type == \"skip\") {\n          moveSel(cm, 1);\n        } else if (type == \"skipThree\") {\n          moveSel(cm, 3);\n        } else if (type == \"surround\") {\n          var sels = cm.getSelections();\n          for (var i2 = 0; i2 < sels.length; i2++)\n            sels[i2] = left + sels[i2] + right;\n          cm.replaceSelections(sels, \"around\");\n          sels = cm.listSelections().slice();\n          for (var i2 = 0; i2 < sels.length; i2++)\n            sels[i2] = contractSelection(sels[i2]);\n          cm.setSelections(sels);\n        } else if (type == \"both\") {\n          cm.replaceSelection(left + right, null);\n          cm.triggerElectric(left + right);\n          moveSel(cm, -1);\n        } else if (type == \"addFour\") {\n          cm.replaceSelection(left + left + left + left, \"before\");\n          moveSel(cm, 1);\n        }\n      });\n    }\n    __name(handleChar, \"handleChar\");\n    function charsAround(cm, pos) {\n      var str = cm.getRange(Pos(pos.line, pos.ch - 1), Pos(pos.line, pos.ch + 1));\n      return str.length == 2 ? str : null;\n    }\n    __name(charsAround, \"charsAround\");\n    function stringStartsAfter(cm, pos) {\n      var token = cm.getTokenAt(Pos(pos.line, pos.ch + 1));\n      return /\\bstring/.test(token.type) && token.start == pos.ch && (pos.ch == 0 || !/\\bstring/.test(cm.getTokenTypeAt(pos)));\n    }\n    __name(stringStartsAfter, \"stringStartsAfter\");\n  });\n})();\nvar closebrackets = closebrackets$2.exports;\nvar closebrackets$1 = /* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  \"default\": closebrackets\n}, [closebrackets$2.exports]);\nexport { closebrackets$1 as c };\n"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","Symbol","toStringTag","closebrackets$2","exports","mod","CodeMirror","defaults","pairs","closeBefore","triples","explode","Pos","getOption","conf","name","defineOption","cm","val","old","Init","removeKeyMap","keyMap","state","closeBrackets","ensureBound","addKeyMap","Backspace","handleBackspace","Enter","handleEnter","chars","i","length","ch","charAt","key","handler","handleChar","getConfig","deflt","override","mode","getModeAt","getCursor","Pass","ranges","listSelections","empty","around","charsAround","head","indexOf","cur","replaceRange","line","operation","linesep","lineSeparator","replaceSelection","moveSel","i2","indentLine","dir","newRanges","primary","range","pos","push","anchor","setSelections","contractSelection","sel","inverted","cmpPos","identical","opening","type","curType","next","getRange","stringStartsAfter","test","getTokenTypeAt","prev","isWordChar","left","right","sels","getSelections","replaceSelections","slice","triggerElectric","str","token","getTokenAt","start","_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__","a","closebrackets$1","__proto__"],"sourceRoot":""}