{"version":3,"file":"static/chunks/4305.a0f8de9436e47317.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@graphiql/react/dist/Range.es.js","webpack://_N_E/./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs","webpack://_N_E/./node_modules/@graphiql/react/dist/lint.es.js","webpack://_N_E/<anon>"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nclass CharacterStream {\n  constructor(sourceText) {\n    this.getStartOfToken = () => this._start;\n    this.getCurrentPosition = () => this._pos;\n    this.eol = () => this._sourceText.length === this._pos;\n    this.sol = () => this._pos === 0;\n    this.peek = () => {\n      return this._sourceText.charAt(this._pos) ? this._sourceText.charAt(this._pos) : null;\n    };\n    this.next = () => {\n      const char = this._sourceText.charAt(this._pos);\n      this._pos++;\n      return char;\n    };\n    this.eat = (pattern) => {\n      const isMatched = this._testNextCharacter(pattern);\n      if (isMatched) {\n        this._start = this._pos;\n        this._pos++;\n        return this._sourceText.charAt(this._pos - 1);\n      }\n      return void 0;\n    };\n    this.eatWhile = (match) => {\n      let isMatched = this._testNextCharacter(match);\n      let didEat = false;\n      if (isMatched) {\n        didEat = isMatched;\n        this._start = this._pos;\n      }\n      while (isMatched) {\n        this._pos++;\n        isMatched = this._testNextCharacter(match);\n        didEat = true;\n      }\n      return didEat;\n    };\n    this.eatSpace = () => this.eatWhile(/[\\s\\u00a0]/);\n    this.skipToEnd = () => {\n      this._pos = this._sourceText.length;\n    };\n    this.skipTo = (position) => {\n      this._pos = position;\n    };\n    this.match = (pattern, consume = true, caseFold = false) => {\n      let token = null;\n      let match = null;\n      if (typeof pattern === \"string\") {\n        const regex = new RegExp(pattern, caseFold ? \"i\" : \"g\");\n        match = regex.test(this._sourceText.substr(this._pos, pattern.length));\n        token = pattern;\n      } else if (pattern instanceof RegExp) {\n        match = this._sourceText.slice(this._pos).match(pattern);\n        token = match === null || match === void 0 ? void 0 : match[0];\n      }\n      if (match != null) {\n        if (typeof pattern === \"string\" || match instanceof Array && this._sourceText.startsWith(match[0], this._pos)) {\n          if (consume) {\n            this._start = this._pos;\n            if (token && token.length) {\n              this._pos += token.length;\n            }\n          }\n          return match;\n        }\n      }\n      return false;\n    };\n    this.backUp = (num) => {\n      this._pos -= num;\n    };\n    this.column = () => this._pos;\n    this.indentation = () => {\n      const match = this._sourceText.match(/\\s*/);\n      let indent = 0;\n      if (match && match.length !== 0) {\n        const whitespaces = match[0];\n        let pos = 0;\n        while (whitespaces.length > pos) {\n          if (whitespaces.charCodeAt(pos) === 9) {\n            indent += 2;\n          } else {\n            indent++;\n          }\n          pos++;\n        }\n      }\n      return indent;\n    };\n    this.current = () => this._sourceText.slice(this._start, this._pos);\n    this._start = 0;\n    this._pos = 0;\n    this._sourceText = sourceText;\n  }\n  _testNextCharacter(pattern) {\n    const character = this._sourceText.charAt(this._pos);\n    let isMatched = false;\n    if (typeof pattern === \"string\") {\n      isMatched = character === pattern;\n    } else {\n      isMatched = pattern instanceof RegExp ? pattern.test(character) : pattern(character);\n    }\n    return isMatched;\n  }\n}\n__name(CharacterStream, \"CharacterStream\");\nclass Range {\n  constructor(start, end) {\n    this.containsPosition = (position) => {\n      if (this.start.line === position.line) {\n        return this.start.character <= position.character;\n      } else if (this.end.line === position.line) {\n        return this.end.character >= position.character;\n      } else {\n        return this.start.line <= position.line && this.end.line >= position.line;\n      }\n    };\n    this.start = start;\n    this.end = end;\n  }\n  setStart(line, character) {\n    this.start = new Position(line, character);\n  }\n  setEnd(line, character) {\n    this.end = new Position(line, character);\n  }\n}\n__name(Range, \"Range\");\nclass Position {\n  constructor(line, character) {\n    this.lessThanOrEqualTo = (position) => this.line < position.line || this.line === position.line && this.character <= position.character;\n    this.line = line;\n    this.character = character;\n  }\n  setLine(line) {\n    this.line = line;\n  }\n  setCharacter(character) {\n    this.character = character;\n  }\n}\n__name(Position, \"Position\");\nexport { CharacterStream as C, Position as P, Range as R };\n","import { invariant } from '../../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../../error/GraphQLError.mjs';\nimport { getNamedType, isInputObjectType } from '../../../type/definition.mjs';\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field(node) {\n      const fieldDef = context.getFieldDef();\n      const deprecationReason =\n        fieldDef === null || fieldDef === void 0\n          ? void 0\n          : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        const parentType = context.getParentType();\n        parentType != null || invariant(false);\n        context.reportError(\n          new GraphQLError(\n            `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    Argument(node) {\n      const argDef = context.getArgument();\n      const deprecationReason =\n        argDef === null || argDef === void 0\n          ? void 0\n          : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        const directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(\n            new GraphQLError(\n              `Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        } else {\n          const parentType = context.getParentType();\n          const fieldDef = context.getFieldDef();\n          (parentType != null && fieldDef != null) || invariant(false);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        const deprecationReason =\n          inputFieldDef === null || inputFieldDef === void 0\n            ? void 0\n            : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(\n            new GraphQLError(\n              `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    EnumValue(node) {\n      const enumValueDef = context.getEnumValue();\n      const deprecationReason =\n        enumValueDef === null || enumValueDef === void 0\n          ? void 0\n          : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        const enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(false);\n        context.reportError(\n          new GraphQLError(\n            `The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { C as CodeMirror } from \"./codemirror.es.js\";\nimport { specifiedRules, NoUnusedFragmentsRule, ExecutableDefinitionsRule, KnownFragmentNamesRule, validate, Kind, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, print, parse, GraphQLError, NoDeprecatedCustomRule } from \"graphql\";\nimport { o as onlineParser } from \"./types.es.js\";\nimport { C as CharacterStream, R as Range, P as Position } from \"./Range.es.js\";\nimport \"./index.es.js\";\nimport \"react\";\nimport \"react-dom\";\nconst specifiedSDLRules = [\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule\n];\nfunction validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n  const rules = specifiedRules.filter((rule) => {\n    if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n      return false;\n    }\n    if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n      return false;\n    }\n    return true;\n  });\n  if (customRules) {\n    Array.prototype.push.apply(rules, customRules);\n  }\n  if (isSchemaDocument) {\n    Array.prototype.push.apply(rules, specifiedSDLRules);\n  }\n  const errors = validate(schema, ast, rules);\n  return errors.filter((error) => {\n    if (error.message.indexOf(\"Unknown directive\") !== -1 && error.nodes) {\n      const node = error.nodes[0];\n      if (node && node.kind === Kind.DIRECTIVE) {\n        const name = node.name.value;\n        if (name === \"arguments\" || name === \"argumentDefinitions\") {\n          return false;\n        }\n      }\n    }\n    return true;\n  });\n}\n__name(validateWithCustomRules, \"validateWithCustomRules\");\nconst SEVERITY$1 = {\n  Error: \"Error\",\n  Warning: \"Warning\",\n  Information: \"Information\",\n  Hint: \"Hint\"\n};\nconst DIAGNOSTIC_SEVERITY = {\n  [SEVERITY$1.Error]: 1,\n  [SEVERITY$1.Warning]: 2,\n  [SEVERITY$1.Information]: 3,\n  [SEVERITY$1.Hint]: 4\n};\nconst invariant = /* @__PURE__ */ __name((condition, message) => {\n  if (!condition) {\n    throw new Error(message);\n  }\n}, \"invariant\");\nfunction getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n  var _a, _b;\n  let ast = null;\n  if (externalFragments) {\n    if (typeof externalFragments === \"string\") {\n      query += \"\\n\\n\" + externalFragments;\n    } else {\n      query += \"\\n\\n\" + externalFragments.reduce((agg, node) => {\n        agg += print(node) + \"\\n\\n\";\n        return agg;\n      }, \"\");\n    }\n  }\n  try {\n    ast = parse(query);\n  } catch (error) {\n    if (error instanceof GraphQLError) {\n      const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, query);\n      return [\n        {\n          severity: DIAGNOSTIC_SEVERITY.Error,\n          message: error.message,\n          source: \"GraphQL: Syntax\",\n          range\n        }\n      ];\n    }\n    throw error;\n  }\n  return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\n__name(getDiagnostics, \"getDiagnostics\");\nfunction validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n  if (!schema) {\n    return [];\n  }\n  const validationErrorAnnotations = mapCat(validateWithCustomRules(schema, ast, customRules, isRelayCompatMode), (error) => annotations(error, DIAGNOSTIC_SEVERITY.Error, \"Validation\"));\n  const deprecationWarningAnnotations = mapCat(validate(schema, ast, [NoDeprecatedCustomRule]), (error) => annotations(error, DIAGNOSTIC_SEVERITY.Warning, \"Deprecation\"));\n  return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\n__name(validateQuery, \"validateQuery\");\nfunction mapCat(array, mapper) {\n  return Array.prototype.concat.apply([], array.map(mapper));\n}\n__name(mapCat, \"mapCat\");\nfunction annotations(error, severity, type) {\n  if (!error.nodes) {\n    return [];\n  }\n  const highlightedNodes = [];\n  error.nodes.forEach((node) => {\n    const highlightNode = node.kind !== \"Variable\" && \"name\" in node && node.name !== void 0 ? node.name : \"variable\" in node && node.variable !== void 0 ? node.variable : node;\n    if (highlightNode) {\n      invariant(error.locations, \"GraphQL validation error requires locations.\");\n      const loc = error.locations[0];\n      const highlightLoc = getLocation(highlightNode);\n      const end = loc.column + (highlightLoc.end - highlightLoc.start);\n      highlightedNodes.push({\n        source: `GraphQL: ${type}`,\n        message: error.message,\n        severity,\n        range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end))\n      });\n    }\n  });\n  return highlightedNodes;\n}\n__name(annotations, \"annotations\");\nfunction getRange(location, queryText) {\n  const parser = onlineParser();\n  const state = parser.startState();\n  const lines = queryText.split(\"\\n\");\n  invariant(lines.length >= location.line, \"Query text must have more lines than where the error happened\");\n  let stream = null;\n  for (let i = 0; i < location.line; i++) {\n    stream = new CharacterStream(lines[i]);\n    while (!stream.eol()) {\n      const style = parser.token(stream, state);\n      if (style === \"invalidchar\") {\n        break;\n      }\n    }\n  }\n  invariant(stream, \"Expected Parser stream to be available.\");\n  const line = location.line - 1;\n  const start = stream.getStartOfToken();\n  const end = stream.getCurrentPosition();\n  return new Range(new Position(line, start), new Position(line, end));\n}\n__name(getRange, \"getRange\");\nfunction getLocation(node) {\n  const typeCastedNode = node;\n  const location = typeCastedNode.loc;\n  invariant(location, \"Expected ASTNode to have a location.\");\n  return location;\n}\n__name(getLocation, \"getLocation\");\nconst SEVERITY = [\"error\", \"warning\", \"information\", \"hint\"];\nconst TYPE = {\n  \"GraphQL: Validation\": \"validation\",\n  \"GraphQL: Deprecation\": \"deprecation\",\n  \"GraphQL: Syntax\": \"syntax\"\n};\nCodeMirror.registerHelper(\"lint\", \"graphql\", (text, options) => {\n  const schema = options.schema;\n  const rawResults = getDiagnostics(text, schema, options.validationRules, void 0, options.externalFragments);\n  const results = rawResults.map((error) => ({\n    message: error.message,\n    severity: error.severity ? SEVERITY[error.severity - 1] : SEVERITY[0],\n    type: error.source ? TYPE[error.source] : void 0,\n    from: CodeMirror.Pos(error.range.start.line, error.range.start.character),\n    to: CodeMirror.Pos(error.range.end.line, error.range.end.character)\n  }));\n  return results;\n});\n"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","CharacterStream","constructor","sourceText","getStartOfToken","_start","getCurrentPosition","_pos","eol","_sourceText","length","sol","peek","charAt","next","char","eat","isMatched","_testNextCharacter","pattern","eatWhile","match","didEat","eatSpace","skipToEnd","skipTo","position","consume","caseFold","token","regex","RegExp","test","substr","slice","Array","startsWith","backUp","num","column","indentation","indent","whitespaces","pos","charCodeAt","current","character","Range","start","end","containsPosition","line","setStart","Position","setEnd","lessThanOrEqualTo","setLine","setCharacter","NoDeprecatedCustomRule","context","Field","node","fieldDef","getFieldDef","deprecationReason","parentType","getParentType","invariant","k","reportError","GraphQLError","__","name","nodes","Argument","argDef","getArgument","directiveDef","getDirective","ObjectField","inputObjectDef","definition","xC","getParentInputType","hL","inputFieldDef","getFields","EnumValue","enumValueDef","getEnumValue","enumTypeDef","getInputType","specifiedSDLRules","LoneSchemaDefinitionRule","t","UniqueOperationTypesRule","q","UniqueTypeNamesRule","P","UniqueEnumValueNamesRule","L","UniqueFieldDefinitionNamesRule","y","UniqueDirectiveNamesRule","o","KnownTypeNamesRule","I","KnownDirectivesRule","J","UniqueDirectivesPerLocationRule","PossibleTypeExtensionsRule","g","UniqueArgumentNamesRule","UniqueInputFieldNamesRule","validateWithCustomRules","schema","ast","customRules","isRelayCompatMode","isSchemaDocument","rules","specifiedRules","i","filter","rule","NoUnusedFragmentsRule","ExecutableDefinitionsRule","KnownFragmentNamesRule","a","prototype","push","apply","errors","validate","Gu","error","message","indexOf","kind","kinds","h","DIRECTIVE","SEVERITY$1","Error","Warning","Information","Hint","DIAGNOSTIC_SEVERITY","lint_es_invariant","condition","getDiagnostics","query","externalFragments","_a","_b","reduce","agg","printer","S","parser","Qc","range","getRange","locations","severity","source","validateQuery","validationErrorAnnotations","mapCat","annotations","deprecationWarningAnnotations","concat","array","mapper","map","type","highlightedNodes","forEach","highlightNode","variable","loc","highlightLoc","getLocation","Range_es","R","location","queryText","types_es","state","startState","lines","split","stream","C","style","typeCastedNode","SEVERITY","TYPE","codemirror_es","registerHelper","text","options","rawResults","validationRules","results","from","Pos","to"],"sourceRoot":""}