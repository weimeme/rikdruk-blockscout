{"version":3,"file":"static/chunks/471.040a7e097a321cfe.js","mappings":"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","sources":["webpack://_N_E/./lib/delay.ts","webpack://_N_E/./lib/hexToBytes.ts","webpack://_N_E/./lib/hexToUtf8.ts","webpack://_N_E/./lib/hooks/useIsInitialLoading.tsx","webpack://_N_E/./lib/networks/getNetworkValidatorTitle.ts","webpack://_N_E/./stubs/utils.ts","webpack://_N_E/./types/api/transaction.ts","webpack://_N_E/./lib/tx/getConfirmationDuration.ts","webpack://_N_E/./ui/shared/RawInputData.tsx","webpack://_N_E/./stubs/txInterpretation.ts","webpack://_N_E/./ui/tx/interpretation/utils.ts","webpack://_N_E/./ui/tx/interpretation/TxInterpretation.tsx","webpack://_N_E/./ui/tx/details/txDetailsActions/TxDetailsActionsWrapper.tsx","webpack://_N_E/./ui/tx/details/txDetailsActions/TxDetailsActionsInterpretation.tsx","webpack://_N_E/./ui/tx/details/txDetailsActions/TxDetailsAction.tsx","webpack://_N_E/./ui/tx/details/txDetailsActions/TxDetailsActionsRaw.tsx","webpack://_N_E/./ui/tx/details/txDetailsActions/TxDetailsActions.tsx","webpack://_N_E/./ui/tx/details/TxDetailsFeePerGas.tsx","webpack://_N_E/./ui/tx/details/TxDetailsGasPrice.tsx","webpack://_N_E/./ui/tx/details/TxDetailsOther.tsx","webpack://_N_E/./ui/tx/NftTokenTransferSnippet.tsx","webpack://_N_E/./ui/tx/details/TxDetailsTokenTransfer.tsx","webpack://_N_E/./ui/tx/details/TxDetailsTokenTransfers.tsx","webpack://_N_E/./types/api/l2Withdrawals.ts","webpack://_N_E/./ui/tx/details/TxDetailsWithdrawalStatus.tsx","webpack://_N_E/./ui/tx/details/TxRevertReason.tsx","webpack://_N_E/./ui/tx/TxAllowedPeekers.tsx","webpack://_N_E/./ui/tx/TxSocketAlert.tsx","webpack://_N_E/./ui/tx/useFetchTxInfo.tsx","webpack://_N_E/./ui/tx/TxDetails.tsx","webpack://_N_E/./ui/tx/TxDetailsWrapped.tsx","webpack://_N_E/./ui/tx/internals/TxInternalsListItem.tsx","webpack://_N_E/./ui/tx/internals/TxInternalsList.tsx","webpack://_N_E/./ui/tx/internals/TxInternalsTableItem.tsx","webpack://_N_E/./ui/tx/internals/TxInternalsTable.tsx","webpack://_N_E/./ui/tx/TxPendingAlert.tsx","webpack://_N_E/./ui/tx/TxInternals.tsx","webpack://_N_E/./ui/tx/TxLogs.tsx","webpack://_N_E/./ui/tx/TxRawTrace.tsx","webpack://_N_E/./stubs/txStateChanges.ts","webpack://_N_E/./ui/tx/state/TxStateTokenIdList.tsx","webpack://_N_E/./ui/tx/state/utils.tsx","webpack://_N_E/./ui/tx/state/TxStateListItem.tsx","webpack://_N_E/./ui/tx/state/TxStateList.tsx","webpack://_N_E/./ui/tx/state/TxStateTableItem.tsx","webpack://_N_E/./ui/tx/state/TxStateTable.tsx","webpack://_N_E/./ui/tx/TxState.tsx","webpack://_N_E/./ui/tx/TxSubHeading.tsx","webpack://_N_E/./ui/tx/TxTokenTransfer.tsx","webpack://_N_E/./ui/pages/Transaction.tsx","webpack://_N_E/./ui/shared/DetailsInfoItemDivider.tsx","webpack://_N_E/./ui/shared/EntityTags.tsx","webpack://_N_E/./ui/shared/ListItemMobile/ListItemMobile.tsx","webpack://_N_E/./ui/shared/NetworkExplorers.tsx","webpack://_N_E/./ui/shared/entities/block/ZkEvmBatchEntityL2.tsx","webpack://_N_E/./ui/shared/entities/tx/TxEntityL1.tsx","webpack://_N_E/./ui/shared/sort/getNextSortValue.ts","webpack://_N_E/./ui/shared/verificationSteps/VerificationStep.tsx","webpack://_N_E/./ui/shared/verificationSteps/VerificationSteps.tsx","webpack://_N_E/./node_modules/@chakra-ui/checkbox/dist/chunk-6XFPBTDN.mjs","webpack://_N_E/./node_modules/@chakra-ui/checkbox/dist/chunk-HPA3SDH4.mjs","webpack://_N_E/./node_modules/@chakra-ui/checkbox/dist/chunk-OW24QTOM.mjs","webpack://_N_E/./node_modules/@chakra-ui/checkbox/dist/chunk-DFEUIRKX.mjs","webpack://_N_E/./node_modules/@chakra-ui/checkbox/dist/chunk-VFYM6BU6.mjs","webpack://_N_E/./node_modules/@chakra-ui/media-query/dist/chunk-DZU5YH7Z.mjs","webpack://_N_E/./node_modules/@chakra-ui/media-query/dist/chunk-OLSEFBIG.mjs","webpack://_N_E/./node_modules/@chakra-ui/media-query/dist/chunk-R3K6W4OF.mjs","webpack://_N_E/./node_modules/@chakra-ui/media-query/dist/chunk-VVU6AIWW.mjs","webpack://_N_E/./node_modules/@chakra-ui/visually-hidden/dist/chunk-RSUMUOHR.mjs","webpack://_N_E/<anon>"],"sourcesContent":["export default function delay(time: number) {\n  return new Promise((resolve) => window.setTimeout(resolve, time));\n}\n","export default function hexToBytes(hex: string) {\n  const bytes = [];\n  for (let c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.substring(c, c + 2), 16));\n  }\n  return bytes;\n}\n","import hexToBytes from 'lib/hexToBytes';\n\nexport default function hexToUtf8(hex: string) {\n  const utf8decoder = new TextDecoder();\n  const bytes = new Uint8Array(hexToBytes(hex));\n\n  return utf8decoder.decode(bytes);\n}\n","import React from 'react';\n\nexport default function useIsInitialLoading(isLoading: boolean | undefined) {\n  const [ isInitialLoading, setIsInitialLoading ] = React.useState(Boolean(isLoading));\n\n  React.useEffect(() => {\n    if (!isLoading) {\n      setIsInitialLoading(false);\n    }\n  }, [ isLoading ]);\n\n  return isInitialLoading;\n}\n","import config from 'configs/app';\n\nexport default function getNetworkValidatorTitle() {\n  return config.chain.verificationType === 'validation' ? 'validator' : 'miner';\n}\n","import type { ArrayElement } from 'types/utils';\n\nimport type { PaginatedResources, PaginatedResponse } from 'lib/api/resources';\n\nexport function generateListStub<Resource extends PaginatedResources>(\n  stub: ArrayElement<PaginatedResponse<Resource>['items']>,\n  num = 50,\n  rest: Omit<PaginatedResponse<Resource>, 'items'>,\n) {\n  return {\n    items: Array(num).fill(stub),\n    ...rest,\n  };\n}\n","import type { AddressParam } from './addressParams';\nimport type { BlockTransactionsResponse } from './block';\nimport type { DecodedInput } from './decodedInput';\nimport type { Fee } from './fee';\nimport type { L2WithdrawalStatus } from './l2Withdrawals';\nimport type { TokenInfo } from './token';\nimport type { TokenTransfer } from './tokenTransfer';\nimport type { TxAction } from './txAction';\n\nexport type TransactionRevertReason = {\n  raw: string;\n} | DecodedInput;\n\ntype WrappedTransactionFields = 'decoded_input' | 'fee' | 'gas_limit' | 'gas_price' | 'hash' | 'max_fee_per_gas' |\n'max_priority_fee_per_gas' | 'method' | 'nonce' | 'raw_input' | 'to' | 'type' | 'value';\n\nexport interface OpWithdrawal {\n  l1_transaction_hash: string;\n  nonce: number;\n  status: L2WithdrawalStatus;\n}\n\nexport type Transaction = {\n  to: AddressParam | null;\n  created_contract: AddressParam | null;\n  hash: string;\n  result: string;\n  confirmations: number;\n  status: 'ok' | 'error' | null;\n  block: number | null;\n  timestamp: string | null;\n  confirmation_duration: Array<number>;\n  from: AddressParam;\n  value: string;\n  fee: Fee;\n  gas_price: string;\n  type: number | null;\n  gas_used: string | null;\n  gas_limit: string;\n  max_fee_per_gas: string | null;\n  max_priority_fee_per_gas: string | null;\n  priority_fee: string | null;\n  base_fee_per_gas: string | null;\n  tx_burnt_fee: string | null;\n  nonce: number;\n  position: number | null;\n  revert_reason: TransactionRevertReason | null;\n  raw_input: string;\n  decoded_input: DecodedInput | null;\n  token_transfers: Array<TokenTransfer> | null;\n  token_transfers_overflow: boolean;\n  exchange_rate: string;\n  method: string | null;\n  tx_types: Array<TransactionType>;\n  tx_tag: string | null;\n  actions: Array<TxAction>;\n  l1_fee?: string;\n  l1_fee_scalar?: string;\n  l1_gas_price?: string;\n  l1_gas_used?: string;\n  has_error_in_internal_txs: boolean | null;\n  // optimism fields\n  op_withdrawals?: Array<OpWithdrawal>;\n  // SUAVE fields\n  execution_node?: AddressParam | null;\n  allowed_peekers?: Array<string>;\n  wrapped?: Pick<Transaction, WrappedTransactionFields>;\n  // Stability fields\n  stability_fee?: {\n    dapp_address: AddressParam;\n    dapp_fee: string;\n    token: TokenInfo;\n    total_fee: string;\n    validator_address: AddressParam;\n    validator_fee: string;\n  };\n  // zkEvm fields\n  zkevm_verify_hash?: string;\n  zkevm_batch_number?: number;\n  zkevm_status?: typeof ZKEVM_L2_TX_STATUSES[number];\n  zkevm_sequence_hash?: string;\n}\n\nexport const ZKEVM_L2_TX_STATUSES = [ 'Confirmed by Sequencer', 'L1 Confirmed' ];\n\nexport type TransactionsResponse = TransactionsResponseValidated | TransactionsResponsePending;\n\nexport interface TransactionsResponseValidated {\n  items: Array<Transaction>;\n  next_page_params: {\n    block_number: number;\n    index: number;\n    items_count: number;\n    filter: 'validated';\n  } | null;\n}\n\nexport interface TransactionsResponsePending {\n  items: Array<Transaction>;\n  next_page_params: {\n    inserted_at: string;\n    hash: string;\n    filter: 'pending';\n  } | null;\n}\n\nexport interface TransactionsResponseWatchlist {\n  items: Array<Transaction>;\n  next_page_params: {\n    block_number: number;\n    index: number;\n    items_count: 50;\n  } | null;\n}\n\nexport type TransactionType = 'rootstock_remasc' |\n'rootstock_bridge' |\n'token_transfer' |\n'contract_creation' |\n'contract_call' |\n'token_creation' |\n'coin_transfer'\n\nexport type TxsResponse = TransactionsResponseValidated | TransactionsResponsePending | BlockTransactionsResponse;\n\nexport interface TransactionsSorting {\n  sort: 'value' | 'fee';\n  order: 'asc' | 'desc';\n}\n\nexport type TransactionsSortingField = TransactionsSorting['sort'];\n\nexport type TransactionsSortingValue = `${ TransactionsSortingField }-${ TransactionsSorting['order'] }`;\n","export default function getConfirmationString(durations: Array<number>) {\n  if (durations.length === 0) {\n    return '';\n  }\n\n  const [ lower, upper ] = durations.map((time) => time / 1_000);\n\n  if (!upper) {\n    return `Confirmed within ${ lower.toLocaleString() } secs`;\n  }\n\n  if (lower === 0) {\n    return `Confirmed within <= ${ upper.toLocaleString() } secs`;\n  }\n\n  return `Confirmed within ${ lower.toLocaleString() } - ${ upper.toLocaleString() } secs`;\n}\n","import { Box, Flex, Select, Textarea } from '@chakra-ui/react';\nimport React from 'react';\n\nimport hexToUtf8 from 'lib/hexToUtf8';\nimport CopyToClipboard from 'ui/shared/CopyToClipboard';\n\ntype DataType = 'Hex' | 'UTF-8'\nconst OPTIONS: Array<DataType> = [ 'Hex', 'UTF-8' ];\n\ninterface Props {\n  hex: string;\n}\n\nconst RawInputData = ({ hex }: Props) => {\n  const [ selectedDataType, setSelectedDataType ] = React.useState<DataType>('Hex');\n\n  const handleSelectChange = React.useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedDataType(event.target.value as DataType);\n  }, []);\n\n  return (\n    <Box w=\"100%\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Select size=\"xs\" borderRadius=\"base\" value={ selectedDataType } onChange={ handleSelectChange } focusBorderColor=\"none\" w=\"auto\">\n          { OPTIONS.map((option) => <option key={ option } value={ option }>{ option }</option>) }\n        </Select>\n        <CopyToClipboard text={ hex }/>\n      </Flex>\n      <Textarea\n        value={ selectedDataType === 'Hex' ? hex : hexToUtf8(hex) }\n        w=\"100%\"\n        maxH=\"220px\"\n        mt={ 2 }\n        p={ 4 }\n        variant=\"filledInactive\"\n        fontSize=\"sm\"\n      />\n    </Box>\n  );\n};\n\nexport default React.memo(RawInputData);\n","import type { TxInterpretationResponse } from 'types/api/txInterpretation';\n\nimport { TOKEN_INFO_ERC_20 } from './token';\n\nexport const TX_INTERPRETATION: TxInterpretationResponse = {\n  data: {\n    summaries: [\n      {\n        summary_template: '{action_type} {source_amount} Ether into {destination_amount} {destination_token}',\n        summary_template_variables: {\n          action_type: { type: 'string', value: 'Wrap' },\n          source_amount: { type: 'currency', value: '0.7' },\n          destination_amount: { type: 'currency', value: '0.7' },\n          destination_token: {\n            type: 'token',\n            value: TOKEN_INFO_ERC_20,\n          },\n        },\n      },\n      {\n        summary_template: '{action_type} {source_amount} Ether into {destination_amount} {destination_token}',\n        summary_template_variables: {\n          action_type: { type: 'string', value: 'Wrap' },\n          source_amount: { type: 'currency', value: '0.7' },\n          destination_amount: { type: 'currency', value: '0.7' },\n          destination_token: {\n            type: 'token',\n            value: TOKEN_INFO_ERC_20,\n          },\n        },\n      },\n    ],\n  },\n};\n","// we use that regex as a separator when splitting template and dont want to capture variables\n// eslint-disable-next-line regexp/no-useless-non-capturing-group\nexport const VAR_REGEXP = /\\{(?:[^}]+)\\}/g;\n\nexport const NATIVE_COIN_SYMBOL_VAR_NAME = 'native';\n\nexport function extractVariables(templateString: string) {\n\n  const matches = templateString.match(VAR_REGEXP);\n\n  const variablesNames = matches ? matches.map(match => match.slice(1, -1)) : [];\n\n  return variablesNames;\n}\n\nexport function getStringChunks(template: string) {\n  return template.split(VAR_REGEXP);\n}\n","import { Skeleton, Flex, Text, chakra } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { TxInterpretationSummary, TxInterpretationVariable } from 'types/api/txInterpretation';\n\nimport dayjs from 'lib/date/dayjs';\nimport * as mixpanel from 'lib/mixpanel/index';\nimport { currencyUnits } from 'lib/units';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\nimport IconSvg from 'ui/shared/IconSvg';\n\nimport { extractVariables, getStringChunks, NATIVE_COIN_SYMBOL_VAR_NAME } from './utils';\n\ntype Props = {\n  summary?: TxInterpretationSummary;\n  isLoading?: boolean;\n  className?: string;\n}\n\nconst TxInterpretationElementByType = ({ variable }: { variable?: TxInterpretationVariable }) => {\n  const onAddressClick = React.useCallback(() => {\n    mixpanel.logEvent(mixpanel.EventTypes.TX_INTERPRETATION_INTERACTION, { Type: 'Address click' });\n  }, []);\n\n  const onTokenClick = React.useCallback(() => {\n    mixpanel.logEvent(mixpanel.EventTypes.TX_INTERPRETATION_INTERACTION, { Type: 'Token click' });\n  }, []);\n\n  if (!variable) {\n    return null;\n  }\n\n  const { type, value } = variable;\n  switch (type) {\n    case 'address': {\n      return (\n        <AddressEntity\n          address={ value }\n          truncation=\"constant\"\n          sx={{ ':not(:first-child)': { marginLeft: 1 } }}\n          whiteSpace=\"initial\"\n          onClick={ onAddressClick }\n        />\n      );\n    }\n    case 'token':\n      return (\n        <TokenEntity\n          token={ value }\n          onlySymbol\n          noCopy\n          width=\"fit-content\"\n          sx={{ ':not(:first-child)': { marginLeft: 1 } }}\n          mr={ 2 }\n          whiteSpace=\"initial\"\n          onClick={ onTokenClick }\n        />\n      );\n    case 'currency': {\n      let numberString = '';\n      if (BigNumber(value).isLessThan(0.1)) {\n        numberString = BigNumber(value).toPrecision(2);\n      } else if (BigNumber(value).isLessThan(10000)) {\n        numberString = BigNumber(value).dp(2).toFormat();\n      } else if (BigNumber(value).isLessThan(1000000)) {\n        numberString = BigNumber(value).dividedBy(1000).toFormat(2) + 'K';\n      } else {\n        numberString = BigNumber(value).dividedBy(1000000).toFormat(2) + 'M';\n      }\n      return <Text>{ numberString + ' ' }</Text>;\n    }\n    case 'timestamp':\n      // timestamp is in unix format\n      return <Text color=\"text_secondary\">{ dayjs(Number(value) * 1000).format('llll') + ' ' }</Text>;\n    case 'string':\n    default: {\n      return <Text color=\"text_secondary\">{ value.toString() + ' ' }</Text>;\n    }\n  }\n};\n\nconst TxInterpretation = ({ summary, isLoading, className }: Props) => {\n  if (!summary) {\n    return null;\n  }\n\n  const template = summary.summary_template;\n  const variables = summary.summary_template_variables;\n\n  const variablesNames = extractVariables(template);\n\n  const chunks = getStringChunks(template);\n\n  return (\n    <Skeleton display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\" isLoaded={ !isLoading } className={ className }>\n      <IconSvg name=\"lightning\" boxSize={ 5 } color=\"text_secondary\" mr={ 2 }/>\n      { chunks.map((chunk, index) => {\n        return (\n          <Flex whiteSpace=\"pre\" key={ chunk + index } fontWeight={ 500 }>\n            <Text color=\"text_secondary\">{ chunk.trim() + (chunk.trim() && variablesNames[index] ? ' ' : '') }</Text>\n            { index < variablesNames.length && (\n              variablesNames[index] === NATIVE_COIN_SYMBOL_VAR_NAME ?\n                <Text>{ currencyUnits.ether + ' ' }</Text> :\n                <TxInterpretationElementByType variable={ variables[variablesNames[index]] }/>\n            ) }\n          </Flex>\n        );\n      }) }\n    </Skeleton>\n  );\n};\n\nexport default chakra(TxInterpretation);\n","import { Flex, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nimport DetailsInfoItem from 'ui/shared/DetailsInfoItem';\n\nconst SCROLL_GRADIENT_HEIGHT = 48;\n\ntype Props = {\n  children: React.ReactNode;\n  isLoading?: boolean;\n}\n\nexport const TX_ACTIONS_BLOCK_ID = 'tx-actions';\n\nconst TxDetailsActions = ({ children, isLoading }: Props) => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [ hasScroll, setHasScroll ] = React.useState(false);\n\n  const gradientStartColor = useColorModeValue('whiteAlpha.600', 'blackAlpha.600');\n  const gradientEndColor = useColorModeValue('whiteAlpha.900', 'blackAlpha.900');\n\n  React.useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    setHasScroll(containerRef.current.scrollHeight >= containerRef.current.clientHeight + SCROLL_GRADIENT_HEIGHT / 2);\n  }, []);\n\n  return (\n    <DetailsInfoItem\n      title=\"Transaction action\"\n      hint=\"Highlighted events of the transaction\"\n      note={ hasScroll ? 'Scroll to see more' : undefined }\n      position=\"relative\"\n      isLoading={ isLoading }\n    >\n      <Flex\n        id={ TX_ACTIONS_BLOCK_ID }\n        flexDirection=\"column\"\n        alignItems=\"stretch\"\n        rowGap={ 5 }\n        w=\"100%\"\n        maxH=\"200px\"\n        overflowY=\"scroll\"\n        ref={ containerRef }\n        _after={ hasScroll ? {\n          position: 'absolute',\n          content: '\"\"',\n          bottom: 0,\n          left: 0,\n          right: '20px',\n          height: `${ SCROLL_GRADIENT_HEIGHT }px`,\n          bgGradient: `linear(to-b, ${ gradientStartColor } 37.5%, ${ gradientEndColor } 77.5%)`,\n        } : undefined }\n        pr={ hasScroll ? 5 : 0 }\n        pb={ hasScroll ? 10 : 0 }\n      >\n        { children }\n      </Flex>\n    </DetailsInfoItem>\n  );\n};\n\nexport default React.memo(TxDetailsActions);\n","import React from 'react';\n\nimport useApiQuery from 'lib/api/useApiQuery';\nimport { TX_INTERPRETATION } from 'stubs/txInterpretation';\nimport DetailsInfoItemDivider from 'ui/shared/DetailsInfoItemDivider';\nimport TxInterpretation from 'ui/tx/interpretation/TxInterpretation';\n\nimport TxDetailsActionsWrapper from './TxDetailsActionsWrapper';\n\ninterface Props {\n  hash?: string;\n  isTxDataLoading: boolean;\n}\n\nconst TxDetailsActionsInterpretation = ({ hash, isTxDataLoading }: Props) => {\n  const txInterpretationQuery = useApiQuery('tx_interpretation', {\n    pathParams: { hash },\n    queryOptions: {\n      enabled: Boolean(hash) && !isTxDataLoading,\n      placeholderData: TX_INTERPRETATION,\n      refetchOnMount: false,\n    },\n  });\n\n  const actions = txInterpretationQuery.data?.data.summaries;\n\n  if (!actions || actions.length < 2) {\n    return null;\n  }\n\n  return (\n    <>\n      <TxDetailsActionsWrapper isLoading={ isTxDataLoading || txInterpretationQuery.isPlaceholderData }>\n        { actions.map((action, index: number) => (\n          <TxInterpretation\n            key={ index }\n            summary={ action }\n            isLoading={ isTxDataLoading || txInterpretationQuery.isPlaceholderData }\n          />\n        ),\n        ) }\n      </TxDetailsActionsWrapper>\n      <DetailsInfoItemDivider/>\n    </>\n  );\n};\n\nexport default TxDetailsActionsInterpretation;\n","import { Flex, chakra } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { TxAction, TxActionGeneral } from 'types/api/txAction';\n\nimport config from 'configs/app';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport NftEntity from 'ui/shared/entities/nft/NftEntity';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\nimport IconSvg from 'ui/shared/IconSvg';\n\ninterface Props {\n  action: TxAction;\n}\n\nfunction getActionText(actionType: TxActionGeneral['type']) {\n  switch (actionType) {\n    case 'mint': return [ 'Added', 'liquidity to' ];\n    case 'burn': return [ 'Removed', 'liquidity from' ];\n    case 'collect': return [ 'Collected', 'from' ];\n    case 'swap': return [ 'Swapped', 'on' ];\n  }\n}\n\nconst TxDetailsAction = ({ action }: Props) => {\n  const { protocol, type, data } = action;\n\n  if (protocol !== 'uniswap_v3') {\n    return null;\n  }\n\n  switch (type) {\n    case 'mint':\n    case 'burn':\n    case 'collect':\n    case 'swap': {\n      const amount0 = BigNumber(data.amount0).toFormat();\n      const amount1 = BigNumber(data.amount1).toFormat();\n      const [ text0, text1 ] = getActionText(type);\n      const token0 = {\n        address: data.symbol0 === 'Ether' ? '' : data.address0,\n        name: data.symbol0 === 'Ether' ? config.chain.currency.symbol || null : data.symbol0,\n        type: 'ERC-20',\n        symbol: null,\n        icon_url: null,\n      };\n      const token1 = {\n        address: data.symbol1 === 'Ether' ? '' : data.address1,\n        name: data.symbol1 === 'Ether' ? config.chain.currency.symbol || null : data.symbol1,\n        type: 'ERC-20',\n        symbol: null,\n        icon_url: null,\n      };\n\n      return (\n        <Flex flexWrap=\"wrap\" columnGap={ 2 } rowGap={ 2 } alignItems=\"center\" fontWeight={ 500 }>\n          <chakra.span color=\"text_secondary\">{ text0 }</chakra.span>\n\n          <span>{ amount0 }</span>\n\n          <TokenEntity\n            token={ token0 }\n            noLink={ data.symbol0 === 'Ether' }\n            noCopy\n            noIcon\n            noSymbol\n            w=\"auto\"\n            maxW=\"200px\"\n            flexShrink={ 0 }\n          />\n\n          <chakra.span color=\"text_secondary\">{ type === 'swap' ? 'for' : 'and' }</chakra.span>\n\n          <span>{ amount1 }</span>\n\n          <TokenEntity\n            token={ token1 }\n            noLink={ data.symbol1 === 'Ether' }\n            noIcon\n            noCopy\n            noSymbol\n            w=\"auto\"\n            maxW=\"200px\"\n            flexShrink={ 0 }\n          />\n\n          <chakra.span color=\"text_secondary\">{ text1 }</chakra.span>\n\n          <Flex columnGap={ 2 }>\n            <IconSvg name=\"uniswap\" boxSize={ 5 } color=\"white\" bgColor=\"#ff007a\" borderRadius=\"full\" p=\"2px\"/>\n            <chakra.span>Uniswap V3</chakra.span>\n          </Flex>\n        </Flex>\n      );\n    }\n\n    case 'mint_nft' : {\n      const token = {\n        address: data.address,\n        name: data.name,\n        type: 'ERC-20',\n        symbol: null,\n        icon_url: null,\n      };\n\n      return (\n        <div>\n          <Flex rowGap={ 2 } columnGap={ 2 } flexWrap=\"wrap\" alignItems=\"center\" whiteSpace=\"pre-wrap\" fontWeight={ 500 }>\n            <chakra.span color=\"text_secondary\">Minted</chakra.span>\n\n            <TokenEntity\n              token={ token }\n              noCopy\n              w=\"auto\"\n              rowGap={ 2 }\n            />\n\n            <chakra.span color=\"text_secondary\">to</chakra.span>\n\n            <AddressEntity\n              address={{ hash: data.to }}\n              truncation=\"constant\"\n              noIcon\n              noCopy\n            />\n          </Flex>\n\n          <Flex columnGap={ 1 } rowGap={ 2 } pl={ 3 } flexDirection=\"column\" mt={ 2 } fontWeight={ 500 }>\n            {\n              data.ids.map((id: string) => {\n                return (\n                  <Flex key={ data.address + id } whiteSpace=\"pre-wrap\" columnGap={ 2 }>\n                    <chakra.span flexShrink={ 0 }>1</chakra.span>\n                    <chakra.span color=\"text_secondary\" flexShrink={ 0 }>of token ID</chakra.span>\n                    <NftEntity hash={ data.address } id={ id } w=\"min-content\" iconSize=\"md\"/>\n                  </Flex>\n                );\n              })\n            }\n          </Flex>\n        </div>\n      );\n    }\n\n    default:\n      return null;\n  }\n};\n\nexport default React.memo(TxDetailsAction);\n","import React from 'react';\n\nimport type { TxAction } from 'types/api/txAction';\n\nimport DetailsInfoItemDivider from 'ui/shared/DetailsInfoItemDivider';\n\nimport TxDetailsAction from './TxDetailsAction';\nimport TxDetailsActionsWrapper from './TxDetailsActionsWrapper';\n\ninterface Props {\n  actions: Array<TxAction>;\n  isLoading: boolean;\n}\n\nconst TxDetailsActionsRaw = ({ actions, isLoading }: Props) => {\n  return (\n    <>\n      <TxDetailsActionsWrapper isLoading={ isLoading }>\n        { actions.map((action, index: number) => <TxDetailsAction key={ index } action={ action }/>) }\n      </TxDetailsActionsWrapper>\n      <DetailsInfoItemDivider/>\n    </>\n  );\n};\n\nexport default TxDetailsActionsRaw;\n","import React from 'react';\n\nimport type { TxAction } from 'types/api/txAction';\n\nimport config from 'configs/app';\nimport TxDetailsActionsInterpretation from 'ui/tx/details/txDetailsActions/TxDetailsActionsInterpretation';\nimport TxDetailsActionsRaw from 'ui/tx/details/txDetailsActions/TxDetailsActionsRaw';\n\ntype Props = {\n  isTxDataLoading: boolean;\n  actions?: Array<TxAction>;\n  hash?: string;\n}\n\nconst TxDetailsActions = ({ isTxDataLoading, actions, hash }: Props) => {\n  if (config.features.txInterpretation.isEnabled) {\n    return <TxDetailsActionsInterpretation hash={ hash } isTxDataLoading={ isTxDataLoading }/>;\n  }\n\n  /* if tx interpretation is not configured, show tx actions from tx info */\n  if (actions && actions.length > 0) {\n    return <TxDetailsActionsRaw actions={ actions } isLoading={ isTxDataLoading }/>;\n  }\n\n  return null;\n};\n\nexport default TxDetailsActions;\n","import { Skeleton } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport config from 'configs/app';\nimport { currencyUnits } from 'lib/units';\nimport DetailsInfoItem from 'ui/shared/DetailsInfoItem';\n\ninterface Props {\n  txFee: string | null;\n  gasUsed: string | null;\n  isLoading?: boolean;\n}\n\nconst TxDetailsFeePerGas = ({ txFee, gasUsed, isLoading }: Props) => {\n  if (!config.UI.views.tx.additionalFields?.fee_per_gas || !gasUsed || txFee === null) {\n    return null;\n  }\n\n  return (\n    <DetailsInfoItem\n      title=\"Fee per gas\"\n      hint=\"Fee per gas\"\n      isLoading={ isLoading }\n    >\n      <Skeleton isLoaded={ !isLoading } mr={ 1 }>\n        { BigNumber(txFee).dividedBy(10 ** config.chain.currency.decimals).dividedBy(gasUsed).toFixed() }\n        { config.UI.views.tx.hiddenFields?.fee_currency ? '' : ` ${ currencyUnits.ether }` }\n      </Skeleton>\n    </DetailsInfoItem>\n  );\n};\n\nexport default TxDetailsFeePerGas;\n","import { Skeleton } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport config from 'configs/app';\nimport { WEI, WEI_IN_GWEI } from 'lib/consts';\nimport { currencyUnits } from 'lib/units';\nimport DetailsInfoItem from 'ui/shared/DetailsInfoItem';\n\ninterface Props {\n  gasPrice: string;\n  isLoading?: boolean;\n}\n\nconst TxDetailsGasPrice = ({ gasPrice, isLoading }: Props) => {\n  if (config.UI.views.tx.hiddenFields?.gas_price) {\n    return null;\n  }\n\n  return (\n    <DetailsInfoItem\n      title=\"Gas price\"\n      hint=\"Price per unit of gas specified by the sender. Higher gas prices can prioritize transaction inclusion during times of high usage\"\n      isLoading={ isLoading }\n    >\n      <Skeleton isLoaded={ !isLoading } mr={ 1 }>\n        { BigNumber(gasPrice).dividedBy(WEI).toFixed() } { currencyUnits.ether }\n      </Skeleton>\n      <Skeleton isLoaded={ !isLoading } color=\"text_secondary\">\n        <span>({ BigNumber(gasPrice).dividedBy(WEI_IN_GWEI).toFixed() } { currencyUnits.gwei })</span>\n      </Skeleton>\n    </DetailsInfoItem>\n  );\n};\n\nexport default TxDetailsGasPrice;\n","import { Box, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { Transaction } from 'types/api/transaction';\n\nimport DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport TextSeparator from 'ui/shared/TextSeparator';\n\ntype Props = Pick<Transaction, 'nonce' | 'type' | 'position'>\n\nconst TxDetailsOther = ({ nonce, type, position }: Props) => {\n  return (\n    <DetailsInfoItem\n      title=\"Other\"\n      hint=\"Other data related to this transaction\"\n    >\n      {\n        [\n          typeof type === 'number' && (\n            <Box key=\"type\">\n              <Text as=\"span\" fontWeight=\"500\">Txn type: </Text>\n              <Text fontWeight=\"600\" as=\"span\">{ type }</Text>\n              { type === 2 && <Text fontWeight=\"400\" as=\"span\" ml={ 1 } variant=\"secondary\">(EIP-1559)</Text> }\n            </Box>\n          ),\n          <Box key=\"nonce\">\n            <Text as=\"span\" fontWeight=\"500\">Nonce: </Text>\n            <Text fontWeight=\"600\" as=\"span\">{ nonce }</Text>\n          </Box>,\n          position !== null && position !== undefined && (\n            <Box key=\"position\">\n              <Text as=\"span\" fontWeight=\"500\">Position: </Text>\n              <Text fontWeight=\"600\" as=\"span\">{ position }</Text>\n            </Box>\n          ),\n        ]\n          .filter(Boolean)\n          .map((item, index) => (\n            <>\n              { index !== 0 && <TextSeparator/> }\n              { item }\n            </>\n          ))\n      }\n    </DetailsInfoItem>\n  );\n};\n\nexport default TxDetailsOther;\n","import { Flex, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TokenInfo } from 'types/api/token';\n\nimport NftEntity from 'ui/shared/entities/nft/NftEntity';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\n\ninterface Props {\n  token: TokenInfo;\n  value: string;\n  tokenId: string;\n}\n\nconst NftTokenTransferSnippet = ({ value, token, tokenId }: Props) => {\n  const num = value === '1' ? '' : value;\n\n  return (\n    <Flex alignItems=\"center\" columnGap={ 2 } rowGap={ 2 } flexWrap={{ base: 'wrap', lg: 'nowrap' }}>\n      { num ? (\n        <>\n          <chakra.span color=\"text_secondary\">for</chakra.span>\n          <span>{ num }</span>\n          <chakra.span color=\"text_secondary\">token ID</chakra.span>\n        </>\n      ) : (\n        <chakra.span color=\"text_secondary\">for token ID</chakra.span>\n      ) }\n      <NftEntity\n        hash={ token.address }\n        id={ tokenId }\n        fontWeight={ 600 }\n        iconSize=\"md\"\n        maxW={{ base: '100%', lg: '150px' }}\n        w=\"auto\"\n        flexShrink={ 0 }\n      />\n      <chakra.span color=\"text_secondary\">of</chakra.span>\n      <TokenEntity\n        token={ token }\n        noCopy\n        w=\"auto\"\n        flexGrow={ 1 }\n      />\n    </Flex>\n  );\n};\n\nexport default React.memo(NftTokenTransferSnippet);\n","import { Flex, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TokenTransfer as TTokenTransfer, Erc20TotalPayload, Erc721TotalPayload, Erc1155TotalPayload } from 'types/api/tokenTransfer';\n\nimport getCurrencyValue from 'lib/getCurrencyValue';\nimport AddressFromTo from 'ui/shared/address/AddressFromTo';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\nimport NftTokenTransferSnippet from 'ui/tx/NftTokenTransferSnippet';\n\ninterface Props {\n  data: TTokenTransfer;\n}\n\nconst TxDetailsTokenTransfer = ({ data }: Props) => {\n\n  const content = (() => {\n    switch (data.token.type) {\n      case 'ERC-20': {\n        const total = data.total as Erc20TotalPayload;\n        const { valueStr, usd } = getCurrencyValue({\n          value: total.value,\n          exchangeRate: data.token.exchange_rate,\n          accuracyUsd: 2,\n          decimals: total.decimals,\n        });\n\n        return (\n          <Flex flexWrap=\"wrap\" columnGap={ 2 } rowGap={ 2 }>\n            <chakra.span color=\"text_secondary\">for</chakra.span>\n            <span>{ valueStr }</span>\n            <TokenEntity\n              token={{ ...data.token, name: data.token.symbol || data.token.name }}\n              noCopy\n              noSymbol\n              w=\"auto\"\n            />\n            { usd && <chakra.span color=\"text_secondary\">(${ usd })</chakra.span> }\n          </Flex>\n        );\n      }\n\n      case 'ERC-721': {\n        const total = data.total as Erc721TotalPayload;\n        return (\n          <NftTokenTransferSnippet\n            token={ data.token }\n            tokenId={ total.token_id }\n            value=\"1\"\n          />\n        );\n      }\n\n      case 'ERC-1155': {\n        const total = data.total as Erc1155TotalPayload;\n        return (\n          <NftTokenTransferSnippet\n            key={ total.token_id }\n            token={ data.token }\n            tokenId={ total.token_id }\n            value={ total.value }\n          />\n        );\n      }\n    }\n  })();\n\n  return (\n    <Flex\n      alignItems=\"flex-start\"\n      flexWrap={{ base: 'wrap', lg: 'nowrap' }}\n      columnGap={ 2 }\n      rowGap={ 3 }\n      flexDir=\"row\"\n      w=\"100%\"\n    >\n      <AddressFromTo\n        from={ data.from }\n        to={ data.to }\n        truncation=\"constant\"\n        noIcon\n        fontWeight=\"500\"\n      />\n      <Flex flexDir=\"column\" rowGap={ 5 } w=\"100%\" overflow=\"hidden\" fontWeight={ 500 }>\n        { content }\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default React.memo(TxDetailsTokenTransfer);\n","import { GridItem, Show, Flex } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TokenTransfer } from 'types/api/tokenTransfer';\n\nimport { route } from 'nextjs-routes';\n\nimport DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport IconSvg from 'ui/shared/IconSvg';\nimport LinkInternal from 'ui/shared/LinkInternal';\n\nimport TxDetailsTokenTransfer from './TxDetailsTokenTransfer';\n\ninterface Props {\n  data: Array<TokenTransfer>;\n  txHash: string;\n  isOverflow: boolean;\n}\n\nconst TOKEN_TRANSFERS_TYPES = [\n  { title: 'Tokens transferred', hint: 'List of tokens transferred in the transaction', type: 'token_transfer' },\n  { title: 'Tokens minted', hint: 'List of tokens minted in the transaction', type: 'token_minting' },\n  { title: 'Tokens burnt', hint: 'List of tokens burnt in the transaction', type: 'token_burning' },\n  { title: 'Tokens created', hint: 'List of tokens created in the transaction', type: 'token_spawning' },\n];\n\nconst TxDetailsTokenTransfers = ({ data, txHash, isOverflow }: Props) => {\n  const viewAllUrl = route({ pathname: '/tx/[hash]', query: { hash: txHash, tab: 'token_transfers' } });\n\n  const transferGroups = TOKEN_TRANSFERS_TYPES.map((group) => ({\n    ...group,\n    items: data?.filter((token) => token.type === group.type) || [],\n  }));\n\n  return (\n    <>\n      { transferGroups.map(({ title, hint, type, items }) => {\n        if (items.length === 0) {\n          return null;\n        }\n\n        return (\n          <DetailsInfoItem\n            key={ type }\n            title={ title }\n            hint={ hint }\n            position=\"relative\"\n          >\n            <Flex\n              flexDirection=\"column\"\n              alignItems=\"flex-start\"\n              rowGap={ 5 }\n              w=\"100%\"\n              overflow=\"hidden\"\n            >\n              { items.map((item, index) => <TxDetailsTokenTransfer key={ index } data={ item }/>) }\n            </Flex>\n          </DetailsInfoItem>\n        );\n      }) }\n      { isOverflow && (\n        <>\n          <Show above=\"lg\" ssr={ false }><GridItem></GridItem></Show>\n          <GridItem fontSize=\"sm\" alignItems=\"center\" display=\"inline-flex\" pl={{ base: '28px', lg: 0 }}>\n            <IconSvg name=\"token\" boxSize={ 6 }/>\n            <LinkInternal href={ viewAllUrl }>\n              View all\n            </LinkInternal>\n          </GridItem>\n        </>\n      ) }\n    </>\n  );\n};\n\nexport default React.memo(TxDetailsTokenTransfers);\n","import type { AddressParam } from './addressParams';\n\nexport type L2WithdrawalsItem = {\n  'challenge_period_end': string | null;\n  'from': AddressParam | null;\n  'l1_tx_hash': string | null;\n  'l2_timestamp': string | null;\n  'l2_tx_hash': string;\n  'msg_nonce': number;\n  'msg_nonce_version': number;\n  'status': string;\n}\n\nexport const WITHDRAWAL_STATUSES = [\n  'Waiting for state root',\n  'Ready to prove',\n  'In challenge period',\n  'Ready for relay',\n  'Relayed',\n] as const;\n\nexport type L2WithdrawalStatus = typeof WITHDRAWAL_STATUSES[number];\n\nexport type L2WithdrawalsResponse = {\n  items: Array<L2WithdrawalsItem>;\n  'next_page_params': {\n    'items_count': number;\n    'nonce': string;\n  };\n}\n","import { Button } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { L2WithdrawalStatus } from 'types/api/l2Withdrawals';\nimport { WITHDRAWAL_STATUSES } from 'types/api/l2Withdrawals';\n\nimport TxEntityL1 from 'ui/shared/entities/tx/TxEntityL1';\nimport VerificationSteps from 'ui/shared/verificationSteps/VerificationSteps';\n\ninterface Props {\n  status: L2WithdrawalStatus | undefined;\n  l1TxHash: string | undefined;\n}\n\nconst TxDetailsWithdrawalStatus = ({ status, l1TxHash }: Props) => {\n  if (!status || !WITHDRAWAL_STATUSES.includes(status)) {\n    return null;\n  }\n\n  const hasClaimButton = status === 'Ready for relay';\n\n  const steps = (() => {\n    switch (status) {\n      case 'Ready for relay':\n        return WITHDRAWAL_STATUSES.slice(0, -1);\n      case 'Relayed': {\n        if (l1TxHash) {\n          return WITHDRAWAL_STATUSES.map((status) => {\n            return status === 'Relayed' ? {\n              content: <TxEntityL1 hash={ l1TxHash } truncation=\"constant\" text=\"Relayed\" noIcon/>,\n              label: status,\n            } : status;\n          });\n        }\n\n        return WITHDRAWAL_STATUSES;\n      }\n\n      default:\n        return WITHDRAWAL_STATUSES;\n    }\n  })();\n\n  const rightSlot = hasClaimButton ? (\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      as=\"a\"\n      href=\"https://app.optimism.io/bridge/withdraw\"\n      target=\"_blank\"\n    >\n      Claim funds\n    </Button>\n  ) : null;\n\n  return (\n    <VerificationSteps\n      steps={ steps as unknown as Array<L2WithdrawalStatus> }\n      currentStep={ status }\n      rightSlot={ rightSlot }\n      my={ hasClaimButton ? '-6px' : 0 }\n      lineHeight={ hasClaimButton ? 8 : undefined }\n    />\n  );\n};\n\nexport default React.memo(TxDetailsWithdrawalStatus);\n","import { Grid, GridItem, Text, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TransactionRevertReason } from 'types/api/transaction';\n\nimport hexToUtf8 from 'lib/hexToUtf8';\nimport { HEX_REGEXP } from 'lib/regexp';\nimport LogDecodedInputData from 'ui/shared/logs/LogDecodedInputData';\n\ntype Props = TransactionRevertReason;\n\nconst TxRevertReason = (props: Props) => {\n  const bgColor = useColorModeValue('blackAlpha.50', 'whiteAlpha.50');\n\n  if ('raw' in props) {\n    if (!HEX_REGEXP.test(props.raw)) {\n      return <Text>{ props.raw }</Text>;\n    }\n\n    const decoded = hexToUtf8(props.raw);\n\n    return (\n      <Grid\n        bgColor={ bgColor }\n        p={ 4 }\n        fontSize=\"sm\"\n        borderRadius=\"md\"\n        templateColumns=\"auto minmax(0, 1fr)\"\n        rowGap={ 2 }\n        columnGap={ 4 }\n        whiteSpace=\"normal\"\n      >\n        <GridItem fontWeight={ 500 }>Raw:</GridItem>\n        <GridItem>{ props.raw }</GridItem>\n        { decoded.replace(/\\s|\\0/g, '') && (\n          <>\n            <GridItem fontWeight={ 500 }>Decoded:</GridItem>\n            <GridItem>{ decoded }</GridItem>\n          </>\n        ) }\n      </Grid>\n    );\n  }\n\n  return <LogDecodedInputData data={ props }/>;\n};\n\nexport default React.memo(TxRevertReason);\n","import { Flex, Link, useBoolean } from '@chakra-ui/react';\nimport React from 'react';\n\nimport DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\n\ninterface Props {\n  items: Array<string>;\n}\n\nconst CUT_LENGTH = 2;\n\nconst TxAllowedPeekers = ({ items }: Props) => {\n  const [ isExpanded, expand ] = useBoolean(false);\n\n  return (\n    <DetailsInfoItem\n      title=\"Allowed peekers\"\n      hint=\"Smart contracts allowed to interact with confidential data\"\n    >\n      <Flex flexDir=\"column\" rowGap={ 3 } w=\"100%\">\n        { items\n          .slice(0, isExpanded ? undefined : CUT_LENGTH)\n          .map((item) => <AddressEntity key={ item } address={{ hash: item, is_contract: true }}/>) }\n      </Flex>\n      { items.length > CUT_LENGTH && (\n        <Link\n          display=\"inline-block\"\n          fontSize=\"sm\"\n          textDecorationLine=\"underline\"\n          textDecorationStyle=\"dashed\"\n          onClick={ expand.toggle }\n        >\n          { isExpanded ? 'Hide' : 'Show all' }\n        </Link>\n      ) }\n    </DetailsInfoItem>\n  );\n};\n\nexport default React.memo(TxAllowedPeekers);\n","import { Alert } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface Props {\n  status: 'error' | 'close';\n}\n\nconst TxSocketAlert = ({ status }: Props) => {\n  const text = status === 'close' ?\n    'Connection is lost. Please click here to update transaction info.' :\n    'An error has occurred while fetching transaction info. Please click here to update.';\n\n  return <Alert status=\"warning\" as=\"a\" href={ window.document.location.href }>{ text }</Alert>;\n};\n\nexport default React.memo(TxSocketAlert);\n","import type { UseQueryResult } from '@tanstack/react-query';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type { SocketMessage } from 'lib/socket/types';\nimport type { Transaction } from 'types/api/transaction';\n\nimport config from 'configs/app';\nimport type { ResourceError } from 'lib/api/resources';\nimport useApiQuery, { getResourceKey } from 'lib/api/useApiQuery';\nimport delay from 'lib/delay';\nimport getQueryParamString from 'lib/router/getQueryParamString';\nimport useSocketChannel from 'lib/socket/useSocketChannel';\nimport useSocketMessage from 'lib/socket/useSocketMessage';\nimport { TX, TX_ZKEVM_L2 } from 'stubs/tx';\n\ninterface Params {\n  onTxStatusUpdate?: () => void;\n  updateDelay?: number;\n}\n\ntype ReturnType = UseQueryResult<Transaction, ResourceError<{ status: number }>> & {\n  socketStatus: 'close' | 'error' | undefined;\n}\n\nexport default function useFetchTxInfo({ onTxStatusUpdate, updateDelay }: Params | undefined = {}): ReturnType {\n  const router = useRouter();\n  const queryClient = useQueryClient();\n  const [ socketStatus, setSocketStatus ] = React.useState<'close' | 'error'>();\n  const hash = getQueryParamString(router.query.hash);\n\n  const queryResult = useApiQuery<'tx', { status: number }>('tx', {\n    pathParams: { hash },\n    queryOptions: {\n      enabled: Boolean(hash),\n      refetchOnMount: false,\n      placeholderData: config.features.zkEvmRollup.isEnabled ? TX_ZKEVM_L2 : TX,\n    },\n  });\n  const { data, isError, isPending } = queryResult;\n\n  const handleStatusUpdateMessage: SocketMessage.TxStatusUpdate['handler'] = React.useCallback(async() => {\n    updateDelay && await delay(updateDelay);\n    queryClient.invalidateQueries({\n      queryKey: getResourceKey('tx', { pathParams: { hash } }),\n    });\n    onTxStatusUpdate?.();\n  }, [ onTxStatusUpdate, queryClient, hash, updateDelay ]);\n\n  const handleSocketClose = React.useCallback(() => {\n    setSocketStatus('close');\n  }, []);\n\n  const handleSocketError = React.useCallback(() => {\n    setSocketStatus('error');\n  }, []);\n\n  const channel = useSocketChannel({\n    topic: `transactions:${ hash }`,\n    onSocketClose: handleSocketClose,\n    onSocketError: handleSocketError,\n    isDisabled: isPending || isError || data.status !== null,\n  });\n  useSocketMessage({\n    channel,\n    event: 'collated',\n    handler: handleStatusUpdateMessage,\n  });\n\n  return {\n    ...queryResult,\n    socketStatus,\n  };\n}\n","import {\n  Grid,\n  GridItem,\n  Text,\n  Box,\n  Link,\n  Spinner,\n  Flex,\n  Tooltip,\n  chakra,\n  useColorModeValue,\n  Skeleton,\n  Alert,\n} from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\nimport { scroller, Element } from 'react-scroll';\n\nimport { ZKEVM_L2_TX_STATUSES } from 'types/api/transaction';\n\nimport { route } from 'nextjs-routes';\n\nimport config from 'configs/app';\nimport { WEI, WEI_IN_GWEI } from 'lib/consts';\nimport dayjs from 'lib/date/dayjs';\nimport throwOnResourceLoadError from 'lib/errors/throwOnResourceLoadError';\nimport getNetworkValidatorTitle from 'lib/networks/getNetworkValidatorTitle';\nimport getConfirmationDuration from 'lib/tx/getConfirmationDuration';\nimport { currencyUnits } from 'lib/units';\nimport Tag from 'ui/shared/chakra/Tag';\nimport CopyToClipboard from 'ui/shared/CopyToClipboard';\nimport CurrencyValue from 'ui/shared/CurrencyValue';\nimport DataFetchAlert from 'ui/shared/DataFetchAlert';\nimport DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport DetailsInfoItemDivider from 'ui/shared/DetailsInfoItemDivider';\nimport DetailsSponsoredItem from 'ui/shared/DetailsSponsoredItem';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport BlockEntity from 'ui/shared/entities/block/BlockEntity';\nimport ZkEvmBatchEntityL2 from 'ui/shared/entities/block/ZkEvmBatchEntityL2';\nimport HashStringShortenDynamic from 'ui/shared/HashStringShortenDynamic';\nimport IconSvg from 'ui/shared/IconSvg';\nimport LogDecodedInputData from 'ui/shared/logs/LogDecodedInputData';\nimport RawInputData from 'ui/shared/RawInputData';\nimport TxStatus from 'ui/shared/statusTag/TxStatus';\nimport TextSeparator from 'ui/shared/TextSeparator';\nimport TxFeeStability from 'ui/shared/tx/TxFeeStability';\nimport Utilization from 'ui/shared/Utilization/Utilization';\nimport VerificationSteps from 'ui/shared/verificationSteps/VerificationSteps';\nimport TxDetailsActions from 'ui/tx/details/txDetailsActions/TxDetailsActions';\nimport TxDetailsFeePerGas from 'ui/tx/details/TxDetailsFeePerGas';\nimport TxDetailsGasPrice from 'ui/tx/details/TxDetailsGasPrice';\nimport TxDetailsOther from 'ui/tx/details/TxDetailsOther';\nimport TxDetailsTokenTransfers from 'ui/tx/details/TxDetailsTokenTransfers';\nimport TxDetailsWithdrawalStatus from 'ui/tx/details/TxDetailsWithdrawalStatus';\nimport TxRevertReason from 'ui/tx/details/TxRevertReason';\nimport TxAllowedPeekers from 'ui/tx/TxAllowedPeekers';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\nimport useFetchTxInfo from 'ui/tx/useFetchTxInfo';\n\nconst TxDetails = () => {\n  const { data, isPlaceholderData, isError, socketStatus, error } = useFetchTxInfo();\n\n  const [ isExpanded, setIsExpanded ] = React.useState(false);\n\n  const handleCutClick = React.useCallback(() => {\n    setIsExpanded((flag) => !flag);\n    scroller.scrollTo('TxDetails__cutLink', {\n      duration: 500,\n      smooth: true,\n    });\n  }, []);\n  const executionSuccessIconColor = useColorModeValue('blackAlpha.800', 'whiteAlpha.800');\n\n  if (isError) {\n    if (error?.status === 422 || error?.status === 404) {\n      throwOnResourceLoadError({ isError, error, resource: 'tx' });\n    }\n\n    return <DataFetchAlert/>;\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  const addressFromTags = [\n    ...data.from.private_tags || [],\n    ...data.from.public_tags || [],\n    ...data.from.watchlist_names || [],\n  ].map((tag) => <Tag key={ tag.label }>{ tag.display_name }</Tag>);\n\n  const toAddress = data.to ? data.to : data.created_contract;\n  const addressToTags = [\n    ...toAddress?.private_tags || [],\n    ...toAddress?.public_tags || [],\n    ...toAddress?.watchlist_names || [],\n  ].map((tag) => <Tag key={ tag.label }>{ tag.display_name }</Tag>);\n\n  const executionSuccessBadge = toAddress?.is_contract && data.result === 'success' ? (\n    <Tooltip label=\"Contract execution completed\">\n      <chakra.span display=\"inline-flex\" ml={ 2 } mr={ 1 }>\n        <IconSvg name=\"status/success\" boxSize={ 4 } color={ executionSuccessIconColor } cursor=\"pointer\"/>\n      </chakra.span>\n    </Tooltip>\n  ) : null;\n  const executionFailedBadge = toAddress?.is_contract && Boolean(data.status) && data.result !== 'success' ? (\n    <Tooltip label=\"Error occurred during contract execution\">\n      <chakra.span display=\"inline-flex\" ml={ 2 } mr={ 1 }>\n        <IconSvg name=\"status/error\" boxSize={ 4 } color=\"error\" cursor=\"pointer\"/>\n      </chakra.span>\n    </Tooltip>\n  ) : null;\n\n  return (\n    <>\n      { config.chain.isTestnet && (\n        <Skeleton mb={ 6 } isLoaded={ !isPlaceholderData }>\n          <Alert status=\"warning\">This is a testnet transaction only</Alert>\n        </Skeleton>\n      ) }\n      <Grid columnGap={ 8 } rowGap={{ base: 3, lg: 3 }} templateColumns={{ base: 'minmax(0, 1fr)', lg: 'max-content minmax(728px, auto)' }}>\n        { socketStatus && (\n          <GridItem colSpan={{ base: undefined, lg: 2 }} mb={ 2 }>\n            <TxSocketAlert status={ socketStatus }/>\n          </GridItem>\n        ) }\n        <DetailsInfoItem\n          title=\"Transaction hash\"\n          hint=\"Unique character string (TxID) assigned to every verified transaction\"\n          flexWrap=\"nowrap\"\n          isLoading={ isPlaceholderData }\n        >\n          { data.status === null && <Spinner mr={ 2 } size=\"sm\" flexShrink={ 0 }/> }\n          <Skeleton isLoaded={ !isPlaceholderData } overflow=\"hidden\">\n            <HashStringShortenDynamic hash={ data.hash }/>\n          </Skeleton>\n          <CopyToClipboard text={ data.hash } isLoading={ isPlaceholderData }/>\n        </DetailsInfoItem>\n        <DetailsInfoItem\n          title={ config.features.zkEvmRollup.isEnabled ? 'L2 status and method' : 'Status and method' }\n          hint=\"Current transaction state: Success, Failed (Error), or Pending (In Process)\"\n          isLoading={ isPlaceholderData }\n        >\n          <TxStatus status={ data.status } errorText={ data.status === 'error' ? data.result : undefined } isLoading={ isPlaceholderData }/>\n          { data.method && (\n            <Tag colorScheme={ data.method === 'Multicall' ? 'teal' : 'gray' } isLoading={ isPlaceholderData } isTruncated ml={ 3 }>\n              { data.method }\n            </Tag>\n          ) }\n        </DetailsInfoItem>\n        { config.features.optimisticRollup.isEnabled && data.op_withdrawals && data.op_withdrawals.length > 0 && (\n          <DetailsInfoItem\n            title=\"Withdrawal status\"\n            hint=\"Detailed status progress of the transaction\"\n          >\n            <Flex flexDir=\"column\" rowGap={ 2 }>\n              { data.op_withdrawals.map((withdrawal) => (\n                <Box key={ withdrawal.nonce }>\n                  <Box mb={ 2 }>\n                    <span>Nonce: </span>\n                    <chakra.span fontWeight={ 600 }>{ withdrawal.nonce }</chakra.span>\n                  </Box>\n                  <TxDetailsWithdrawalStatus\n                    status={ withdrawal.status }\n                    l1TxHash={ withdrawal.l1_transaction_hash }\n                  />\n                </Box>\n              )) }\n            </Flex>\n          </DetailsInfoItem>\n        ) }\n        { data.zkevm_status && (\n          <DetailsInfoItem\n            title=\"Confirmation status\"\n            hint=\"Status of the transaction confirmation path to L1\"\n            isLoading={ isPlaceholderData }\n          >\n            <VerificationSteps currentStep={ data.zkevm_status } steps={ ZKEVM_L2_TX_STATUSES } isLoading={ isPlaceholderData }/>\n          </DetailsInfoItem>\n        ) }\n        { data.revert_reason && (\n          <DetailsInfoItem\n            title=\"Revert reason\"\n            hint=\"The revert reason of the transaction\"\n          >\n            <TxRevertReason { ...data.revert_reason }/>\n          </DetailsInfoItem>\n        ) }\n        <DetailsInfoItem\n          title=\"Block\"\n          hint=\"Block number containing the transaction\"\n          isLoading={ isPlaceholderData }\n        >\n          { data.block === null ?\n            <Text>Pending</Text> : (\n              <BlockEntity\n                isLoading={ isPlaceholderData }\n                number={ data.block }\n                noIcon\n              />\n            ) }\n          { Boolean(data.confirmations) && (\n            <>\n              <TextSeparator color=\"gray.500\"/>\n              <Skeleton isLoaded={ !isPlaceholderData } color=\"text_secondary\">\n                <span>{ data.confirmations } Block confirmations</span>\n              </Skeleton>\n            </>\n          ) }\n        </DetailsInfoItem>\n        { data.zkevm_batch_number && (\n          <DetailsInfoItem\n            title=\"Tx batch\"\n            hint=\"Batch index for this transaction\"\n            isLoading={ isPlaceholderData }\n          >\n            <ZkEvmBatchEntityL2\n              isLoading={ isPlaceholderData }\n              number={ data.zkevm_batch_number }\n            />\n          </DetailsInfoItem>\n        ) }\n        { data.timestamp && (\n          <DetailsInfoItem\n            title=\"Timestamp\"\n            hint=\"Date & time of transaction inclusion, including length of time for confirmation\"\n            isLoading={ isPlaceholderData }\n          >\n            <IconSvg name=\"clock\" boxSize={ 5 } color=\"gray.500\" isLoading={ isPlaceholderData }/>\n            <Skeleton isLoaded={ !isPlaceholderData } ml={ 2 }>{ dayjs(data.timestamp).fromNow() }</Skeleton>\n            <TextSeparator/>\n            <Skeleton isLoaded={ !isPlaceholderData } whiteSpace=\"normal\">{ dayjs(data.timestamp).format('llll') }</Skeleton>\n            <TextSeparator color=\"gray.500\"/>\n            <Skeleton isLoaded={ !isPlaceholderData } color=\"text_secondary\">\n              <span>{ getConfirmationDuration(data.confirmation_duration) }</span>\n            </Skeleton>\n          </DetailsInfoItem>\n        ) }\n        { data.execution_node && (\n          <DetailsInfoItem\n            title=\"Kettle\"\n            hint=\"Node that carried out the confidential computation\"\n            isLoading={ isPlaceholderData }\n          >\n            <AddressEntity\n              address={ data.execution_node }\n              href={ route({ pathname: '/txs/kettle/[hash]', query: { hash: data.execution_node.hash } }) }\n            />\n          </DetailsInfoItem>\n        ) }\n        { data.allowed_peekers && data.allowed_peekers.length > 0 && (\n          <TxAllowedPeekers items={ data.allowed_peekers }/>\n        ) }\n        <DetailsSponsoredItem isLoading={ isPlaceholderData }/>\n\n        <DetailsInfoItemDivider/>\n\n        <TxDetailsActions hash={ data.hash } actions={ data.actions } isTxDataLoading={ isPlaceholderData }/>\n\n        <DetailsInfoItem\n          title=\"From\"\n          hint=\"Address (external or contract) sending the transaction\"\n          isLoading={ isPlaceholderData }\n          columnGap={ 3 }\n        >\n          <AddressEntity\n            address={ data.from }\n            isLoading={ isPlaceholderData }\n          />\n          { data.from.name && <Text>{ data.from.name }</Text> }\n          { addressFromTags.length > 0 && (\n            <Flex columnGap={ 3 }>\n              { addressFromTags }\n            </Flex>\n          ) }\n        </DetailsInfoItem>\n        <DetailsInfoItem\n          title={ data.to?.is_contract ? 'Interacted with contract' : 'To' }\n          hint=\"Address (external or contract) receiving the transaction\"\n          isLoading={ isPlaceholderData }\n          flexWrap={{ base: 'wrap', lg: 'nowrap' }}\n          columnGap={ 3 }\n        >\n          { toAddress ? (\n            <>\n              { data.to && data.to.hash ? (\n                <Flex flexWrap=\"nowrap\" alignItems=\"center\" maxW=\"100%\">\n                  <AddressEntity\n                    address={ toAddress }\n                    isLoading={ isPlaceholderData }\n                  />\n                  { executionSuccessBadge }\n                  { executionFailedBadge }\n                </Flex>\n              ) : (\n                <Flex width=\"100%\" whiteSpace=\"pre\" alignItems=\"center\" flexShrink={ 0 }>\n                  <span>[Contract </span>\n                  <AddressEntity\n                    address={ toAddress }\n                    isLoading={ isPlaceholderData }\n                    noIcon\n                  />\n                  <span>created]</span>\n                  { executionSuccessBadge }\n                  { executionFailedBadge }\n                </Flex>\n              ) }\n              { addressToTags.length > 0 && (\n                <Flex columnGap={ 3 }>\n                  { addressToTags }\n                </Flex>\n              ) }\n            </>\n          ) : (\n            <span>[ Contract creation ]</span>\n          ) }\n        </DetailsInfoItem>\n        { data.token_transfers && <TxDetailsTokenTransfers data={ data.token_transfers } txHash={ data.hash } isOverflow={ data.token_transfers_overflow }/> }\n\n        <DetailsInfoItemDivider/>\n\n        { data.zkevm_sequence_hash && (\n          <DetailsInfoItem\n            title=\"Sequence tx hash\"\n            flexWrap=\"nowrap\"\n\n            isLoading={ isPlaceholderData }\n          >\n            <Skeleton isLoaded={ !isPlaceholderData } overflow=\"hidden\">\n              <HashStringShortenDynamic hash={ data.zkevm_sequence_hash }/>\n            </Skeleton>\n            <CopyToClipboard text={ data.zkevm_sequence_hash } isLoading={ isPlaceholderData }/>\n          </DetailsInfoItem>\n        ) }\n        { data.zkevm_verify_hash && (\n          <DetailsInfoItem\n            title=\"Verify tx hash\"\n            flexWrap=\"nowrap\"\n            isLoading={ isPlaceholderData }\n          >\n            <Skeleton isLoaded={ !isPlaceholderData } overflow=\"hidden\">\n\n              <HashStringShortenDynamic hash={ data.zkevm_verify_hash }/>\n            </Skeleton>\n            <CopyToClipboard text={ data.zkevm_verify_hash } isLoading={ isPlaceholderData }/>\n\n          </DetailsInfoItem>\n        ) }\n\n        { (data.zkevm_batch_number || data.zkevm_verify_hash) && <DetailsInfoItemDivider/> }\n\n        { !config.UI.views.tx.hiddenFields?.value && (\n          <DetailsInfoItem\n            title=\"Value\"\n            hint=\"Value sent in the native token (and USD) if applicable\"\n            isLoading={ isPlaceholderData }\n          >\n            <CurrencyValue\n              value={ data.value }\n              currency={ currencyUnits.ether }\n              exchangeRate={ data.exchange_rate }\n              isLoading={ isPlaceholderData }\n              flexWrap=\"wrap\"\n            />\n          </DetailsInfoItem>\n        ) }\n        { !config.UI.views.tx.hiddenFields?.tx_fee && (\n          <DetailsInfoItem\n            title=\"Transaction fee\"\n            hint=\"Total transaction fee\"\n            isLoading={ isPlaceholderData }\n          >\n            { data.stability_fee ? (\n              <TxFeeStability data={ data.stability_fee } isLoading={ isPlaceholderData }/>\n            ) : (\n              <CurrencyValue\n                value={ data.fee.value }\n                currency={ config.UI.views.tx.hiddenFields?.fee_currency ? '' : currencyUnits.ether }\n                exchangeRate={ data.exchange_rate }\n                flexWrap=\"wrap\"\n                isLoading={ isPlaceholderData }\n              />\n            ) }\n          </DetailsInfoItem>\n        ) }\n\n        <TxDetailsGasPrice gasPrice={ data.gas_price } isLoading={ isPlaceholderData }/>\n\n        <TxDetailsFeePerGas txFee={ data.fee.value } gasUsed={ data.gas_used } isLoading={ isPlaceholderData }/>\n\n        <DetailsInfoItem\n          title=\"Gas usage & limit by txn\"\n          hint=\"Actual gas amount used by the transaction\"\n          isLoading={ isPlaceholderData }\n        >\n          <Skeleton isLoaded={ !isPlaceholderData }>{ BigNumber(data.gas_used || 0).toFormat() }</Skeleton>\n          <TextSeparator/>\n          <Skeleton isLoaded={ !isPlaceholderData }>{ BigNumber(data.gas_limit).toFormat() }</Skeleton>\n          <Utilization ml={ 4 } value={ BigNumber(data.gas_used || 0).dividedBy(BigNumber(data.gas_limit)).toNumber() } isLoading={ isPlaceholderData }/>\n        </DetailsInfoItem>\n        { !config.UI.views.tx.hiddenFields?.gas_fees &&\n          (data.base_fee_per_gas || data.max_fee_per_gas || data.max_priority_fee_per_gas) && (\n          <DetailsInfoItem\n            title={ `Gas fees (${ currencyUnits.gwei })` }\n            // eslint-disable-next-line max-len\n            hint={ `\n              Base Fee refers to the network Base Fee at the time of the block, \n              while Max Fee & Max Priority Fee refer to the max amount a user is willing to pay \n              for their tx & to give to the ${ getNetworkValidatorTitle() } respectively\n            ` }\n            isLoading={ isPlaceholderData }\n          >\n            { data.base_fee_per_gas && (\n              <Skeleton isLoaded={ !isPlaceholderData }>\n                <Text as=\"span\" fontWeight=\"500\">Base: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.base_fee_per_gas).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n                { (data.max_fee_per_gas || data.max_priority_fee_per_gas) && <TextSeparator/> }\n              </Skeleton>\n            ) }\n            { data.max_fee_per_gas && (\n              <Box>\n                <Text as=\"span\" fontWeight=\"500\">Max: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.max_fee_per_gas).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n                { data.max_priority_fee_per_gas && <TextSeparator/> }\n              </Box>\n            ) }\n            { data.max_priority_fee_per_gas && (\n              <Box>\n                <Text as=\"span\" fontWeight=\"500\">Max priority: </Text>\n                <Text fontWeight=\"600\" as=\"span\">{ BigNumber(data.max_priority_fee_per_gas).dividedBy(WEI_IN_GWEI).toFixed() }</Text>\n              </Box>\n            ) }\n          </DetailsInfoItem>\n        ) }\n        { data.tx_burnt_fee && !config.UI.views.tx.hiddenFields?.burnt_fees && !config.features.optimisticRollup.isEnabled && (\n          <DetailsInfoItem\n            title=\"Burnt fees\"\n            hint={ `Amount of ${ currencyUnits.ether } burned for this transaction. Equals Block Base Fee per Gas * Gas Used` }\n          >\n            <IconSvg name=\"flame\" boxSize={ 5 } color=\"gray.500\"/>\n            <CurrencyValue\n              value={ String(data.tx_burnt_fee) }\n              currency={ currencyUnits.ether }\n              exchangeRate={ data.exchange_rate }\n              flexWrap=\"wrap\"\n              ml={ 2 }\n            />\n          </DetailsInfoItem>\n        ) }\n        { config.features.optimisticRollup.isEnabled && (\n          <>\n            { data.l1_gas_used && (\n              <DetailsInfoItem\n                title=\"L1 gas used by txn\"\n                hint=\"L1 gas used by transaction\"\n                isLoading={ isPlaceholderData }\n              >\n                <Text>{ BigNumber(data.l1_gas_used).toFormat() }</Text>\n              </DetailsInfoItem>\n            ) }\n            { data.l1_gas_price && (\n              <DetailsInfoItem\n                title=\"L1 gas price\"\n                hint=\"L1 gas price\"\n                isLoading={ isPlaceholderData }\n              >\n                <Text mr={ 1 }>{ BigNumber(data.l1_gas_price).dividedBy(WEI).toFixed() } { currencyUnits.ether }</Text>\n                <Text variant=\"secondary\">({ BigNumber(data.l1_gas_price).dividedBy(WEI_IN_GWEI).toFixed() } { currencyUnits.gwei })</Text>\n              </DetailsInfoItem>\n            ) }\n            { data.l1_fee && (\n              <DetailsInfoItem\n                title=\"L1 fee\"\n                // eslint-disable-next-line max-len\n                hint={ `L1 Data Fee which is used to cover the L1 \"security\" cost from the batch submission mechanism. In combination with L2 execution fee, L1 fee makes the total amount of fees that a transaction pays.` }\n                isLoading={ isPlaceholderData }\n              >\n                <CurrencyValue\n                  value={ data.l1_fee }\n                  currency={ currencyUnits.ether }\n                  exchangeRate={ data.exchange_rate }\n                  flexWrap=\"wrap\"\n                />\n              </DetailsInfoItem>\n            ) }\n            { data.l1_fee_scalar && (\n              <DetailsInfoItem\n                title=\"L1 fee scalar\"\n                hint=\"A Dynamic overhead (fee scalar) premium, which serves as a buffer in case L1 prices rapidly increase.\"\n                isLoading={ isPlaceholderData }\n              >\n                <Text>{ data.l1_fee_scalar }</Text>\n              </DetailsInfoItem>\n            ) }\n          </>\n        ) }\n        <GridItem colSpan={{ base: undefined, lg: 2 }}>\n          <Element name=\"TxDetails__cutLink\">\n            <Skeleton isLoaded={ !isPlaceholderData } mt={ 6 } display=\"inline-block\">\n              <Link\n                display=\"inline-block\"\n                fontSize=\"sm\"\n                textDecorationLine=\"underline\"\n                textDecorationStyle=\"dashed\"\n                onClick={ handleCutClick }\n              >\n                { isExpanded ? 'Hide details' : 'View details' }\n              </Link>\n            </Skeleton>\n          </Element>\n        </GridItem>\n        { isExpanded && (\n          <>\n            <GridItem colSpan={{ base: undefined, lg: 2 }} mt={{ base: 1, lg: 4 }}/>\n            <TxDetailsOther nonce={ data.nonce } type={ data.type } position={ data.position }/>\n            <DetailsInfoItem\n              title=\"Raw input\"\n              hint=\"Binary data included with the transaction. See logs tab for additional info\"\n            >\n              <RawInputData hex={ data.raw_input }/>\n            </DetailsInfoItem>\n            { data.decoded_input && (\n              <DetailsInfoItem\n                title=\"Decoded input data\"\n                hint=\"Decoded input data\"\n              >\n                <LogDecodedInputData data={ data.decoded_input }/>\n              </DetailsInfoItem>\n            ) }\n          </>\n        ) }\n      </Grid>\n    </>\n  );\n};\n\nexport default TxDetails;\n","import { Flex, Grid } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { Transaction } from 'types/api/transaction';\nimport type { ExcludeUndefined } from 'types/utils';\n\nimport { currencyUnits } from 'lib/units';\nimport Tag from 'ui/shared/chakra/Tag';\nimport CurrencyValue from 'ui/shared/CurrencyValue';\nimport DetailsInfoItem from 'ui/shared/DetailsInfoItem';\nimport DetailsInfoItemDivider from 'ui/shared/DetailsInfoItemDivider';\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport TxEntity from 'ui/shared/entities/tx/TxEntity';\nimport LogDecodedInputData from 'ui/shared/logs/LogDecodedInputData';\nimport RawInputData from 'ui/shared/RawInputData';\nimport TxDetailsGasPrice from 'ui/tx/details/TxDetailsGasPrice';\nimport TxDetailsOther from 'ui/tx/details/TxDetailsOther';\n\ninterface Props {\n  data: ExcludeUndefined<Transaction['wrapped']>;\n}\n\nconst TxDetailsWrapped = ({ data }: Props) => {\n  return (\n    <Grid columnGap={ 8 } rowGap={{ base: 3, lg: 3 }} templateColumns={{ base: 'minmax(0, 1fr)', lg: 'auto minmax(0, 1fr)' }}>\n      <DetailsInfoItem\n        title=\"Transaction hash\"\n        hint=\"Unique character string (TxID) assigned to every verified transaction\"\n        flexWrap=\"nowrap\"\n      >\n        <TxEntity hash={ data.hash } noIcon noLink noCopy={ false }/>\n      </DetailsInfoItem>\n      <DetailsInfoItem\n        title=\"Method\"\n        hint=\"Transaction method name\"\n      >\n        <Tag colorScheme=\"gray\">\n          { data.method }\n        </Tag>\n      </DetailsInfoItem>\n\n      <DetailsInfoItemDivider/>\n\n      <DetailsInfoItem\n        title={ data.to?.is_contract ? 'Interacted with contract' : 'To' }\n        hint=\"Address (external or contract) receiving the transaction\"\n        flexWrap={{ base: 'wrap', lg: 'nowrap' }}\n        columnGap={ 3 }\n      >\n        <Flex flexWrap=\"nowrap\" alignItems=\"center\" maxW=\"100%\">\n          <AddressEntity address={ data.to }/>\n        </Flex>\n      </DetailsInfoItem>\n\n      <DetailsInfoItemDivider/>\n\n      <DetailsInfoItem\n        title=\"Value\"\n        hint=\"Value sent in the native token (and USD) if applicable\"\n      >\n        <CurrencyValue\n          value={ data.value }\n          currency={ currencyUnits.ether }\n          flexWrap=\"wrap\"\n        />\n      </DetailsInfoItem>\n      { data.fee.value !== null && (\n        <DetailsInfoItem\n          title=\"Transaction fee\"\n          hint=\"Total transaction fee\"\n        >\n          <CurrencyValue\n            value={ data.fee.value }\n            currency={ currencyUnits.ether }\n            flexWrap=\"wrap\"\n          />\n        </DetailsInfoItem>\n      ) }\n      <TxDetailsGasPrice gasPrice={ data.gas_price }/>\n      { data.gas_limit && (\n        <DetailsInfoItem\n          title=\"Gas limit\"\n          hint=\"Maximum amount of gas that can be used by the transaction\"\n        >\n          { BigNumber(data.gas_limit).toFormat() }\n        </DetailsInfoItem>\n      ) }\n\n      <DetailsInfoItemDivider/>\n\n      <TxDetailsOther type={ data.type } nonce={ data.nonce } position={ null }/>\n      <DetailsInfoItem\n        title=\"Raw input\"\n        hint=\"Binary data included with the transaction. See logs tab for additional info\"\n      >\n        <RawInputData hex={ data.raw_input }/>\n      </DetailsInfoItem>\n      { data.decoded_input && (\n        <DetailsInfoItem\n          title=\"Decoded input data\"\n          hint=\"Decoded input data\"\n        >\n          <LogDecodedInputData data={ data.decoded_input }/>\n        </DetailsInfoItem>\n      ) }\n    </Grid>\n  );\n};\n\nexport default TxDetailsWrapped;\n","import { Flex, HStack, Skeleton } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { InternalTransaction } from 'types/api/internalTransaction';\n\nimport config from 'configs/app';\nimport { currencyUnits } from 'lib/units';\nimport AddressFromTo from 'ui/shared/address/AddressFromTo';\nimport Tag from 'ui/shared/chakra/Tag';\nimport ListItemMobile from 'ui/shared/ListItemMobile/ListItemMobile';\nimport TxStatus from 'ui/shared/statusTag/TxStatus';\nimport { TX_INTERNALS_ITEMS } from 'ui/tx/internals/utils';\n\ntype Props = InternalTransaction & { isLoading?: boolean };\n\nconst TxInternalsListItem = ({ type, from, to, value, success, error, gas_limit: gasLimit, created_contract: createdContract, isLoading }: Props) => {\n  const typeTitle = TX_INTERNALS_ITEMS.find(({ id }) => id === type)?.title;\n  const toData = to ? to : createdContract;\n\n  return (\n    <ListItemMobile rowGap={ 3 }>\n      <Flex columnGap={ 2 }>\n        { typeTitle && <Tag colorScheme=\"cyan\" isLoading={ isLoading }>{ typeTitle }</Tag> }\n        <TxStatus status={ success ? 'ok' : 'error' } errorText={ error } isLoading={ isLoading }/>\n      </Flex>\n      <AddressFromTo\n        from={ from }\n        to={ toData }\n        isLoading={ isLoading }\n        w=\"100%\"\n        fontWeight=\"500\"\n      />\n      <HStack spacing={ 3 }>\n        <Skeleton isLoaded={ !isLoading } fontSize=\"sm\" fontWeight={ 500 }>Value { currencyUnits.ether }</Skeleton>\n        <Skeleton isLoaded={ !isLoading } fontSize=\"sm\" color=\"text_secondary\">\n          { BigNumber(value).div(BigNumber(10 ** config.chain.currency.decimals)).toFormat() }\n        </Skeleton>\n      </HStack>\n      <HStack spacing={ 3 }>\n        <Skeleton isLoaded={ !isLoading } fontSize=\"sm\" fontWeight={ 500 }>Gas limit</Skeleton>\n        <Skeleton isLoaded={ !isLoading } fontSize=\"sm\" color=\"text_secondary\">{ BigNumber(gasLimit).toFormat() }</Skeleton>\n      </HStack>\n    </ListItemMobile>\n  );\n};\n\nexport default TxInternalsListItem;\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { InternalTransaction } from 'types/api/internalTransaction';\n\nimport TxInternalsListItem from 'ui/tx/internals/TxInternalsListItem';\n\nconst TxInternalsList = ({ data, isLoading }: { data: Array<InternalTransaction>; isLoading?: boolean }) => {\n  return (\n    <Box>\n      { data.map((item, index) => <TxInternalsListItem key={ item.transaction_hash + (isLoading ? index : '') } { ...item } isLoading={ isLoading }/>) }\n    </Box>\n  );\n};\n\nexport default TxInternalsList;\n","import { Tr, Td, Box, Flex, Skeleton } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { InternalTransaction } from 'types/api/internalTransaction';\n\nimport config from 'configs/app';\nimport AddressFromTo from 'ui/shared/address/AddressFromTo';\nimport Tag from 'ui/shared/chakra/Tag';\nimport TxStatus from 'ui/shared/statusTag/TxStatus';\nimport { TX_INTERNALS_ITEMS } from 'ui/tx/internals/utils';\n\ntype Props = InternalTransaction & {\n  isLoading?: boolean;\n}\n\nconst TxInternalTableItem = ({ type, from, to, value, success, error, gas_limit: gasLimit, created_contract: createdContract, isLoading }: Props) => {\n  const typeTitle = TX_INTERNALS_ITEMS.find(({ id }) => id === type)?.title;\n  const toData = to ? to : createdContract;\n\n  return (\n    <Tr alignItems=\"top\">\n      <Td>\n        <Flex rowGap={ 2 } flexWrap=\"wrap\">\n          { typeTitle && (\n            <Box w=\"126px\" display=\"inline-block\">\n              <Tag colorScheme=\"cyan\" mr={ 5 } isLoading={ isLoading }>{ typeTitle }</Tag>\n            </Box>\n          ) }\n          <TxStatus status={ success ? 'ok' : 'error' } errorText={ error } isLoading={ isLoading }/>\n        </Flex>\n      </Td>\n      <Td verticalAlign=\"middle\">\n        <AddressFromTo\n          from={ from }\n          to={ toData }\n          isLoading={ isLoading }\n        />\n      </Td>\n      <Td isNumeric verticalAlign=\"middle\">\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { BigNumber(value).div(BigNumber(10 ** config.chain.currency.decimals)).toFormat() }\n        </Skeleton>\n      </Td>\n      <Td isNumeric verticalAlign=\"middle\">\n        <Skeleton isLoaded={ !isLoading } display=\"inline-block\">\n          { BigNumber(gasLimit).toFormat() }\n        </Skeleton>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default React.memo(TxInternalTableItem);\n","import { Table, Tbody, Tr, Th, Link } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { InternalTransaction } from 'types/api/internalTransaction';\n\nimport { AddressHighlightProvider } from 'lib/contexts/addressHighlight';\nimport { currencyUnits } from 'lib/units';\nimport IconSvg from 'ui/shared/IconSvg';\nimport { default as Thead } from 'ui/shared/TheadSticky';\nimport TxInternalsTableItem from 'ui/tx/internals/TxInternalsTableItem';\nimport type { Sort, SortField } from 'ui/tx/internals/utils';\n\ninterface Props {\n  data: Array<InternalTransaction>;\n  sort: Sort | undefined;\n  onSortToggle: (field: SortField) => () => void;\n  top: number;\n  isLoading?: boolean;\n}\n\nconst TxInternalsTable = ({ data, sort, onSortToggle, top, isLoading }: Props) => {\n  const sortIconTransform = sort?.includes('asc') ? 'rotate(-90deg)' : 'rotate(90deg)';\n\n  return (\n    <AddressHighlightProvider>\n      <Table variant=\"simple\" size=\"sm\">\n        <Thead top={ top }>\n          <Tr>\n            <Th width=\"28%\">Type</Th>\n            <Th width=\"40%\">From/To</Th>\n            <Th width=\"16%\" isNumeric>\n              <Link display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" onClick={ onSortToggle('value') } columnGap={ 1 }>\n                { sort?.includes('value') && <IconSvg name=\"arrows/east\" boxSize={ 4 } transform={ sortIconTransform }/> }\n                Value { currencyUnits.ether }\n              </Link>\n            </Th>\n            <Th width=\"16%\" isNumeric>\n              <Link display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" onClick={ onSortToggle('gas-limit') } columnGap={ 1 }>\n                { sort?.includes('gas-limit') && <IconSvg name=\"arrows/east\" boxSize={ 4 } transform={ sortIconTransform }/> }\n                Gas limit { currencyUnits.ether }\n              </Link>\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          { data.map((item, index) => (\n            <TxInternalsTableItem key={ item.transaction_hash + (isLoading ? index : '') } { ...item } isLoading={ isLoading }/>\n          )) }\n        </Tbody>\n      </Table>\n    </AddressHighlightProvider>\n  );\n};\n\nexport default TxInternalsTable;\n","import { Alert, Spinner } from '@chakra-ui/react';\nimport React from 'react';\n\nconst TxPendingAlert = () => {\n  return (\n    <Alert>\n      <Spinner size=\"sm\" mr={ 2 }/>\n        This transaction is pending confirmation.\n    </Alert>\n  );\n};\n\nexport default TxPendingAlert;\n","import { Show, Hide } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { InternalTransaction } from 'types/api/internalTransaction';\n\nimport { SECOND } from 'lib/consts';\n// import { apos } from 'lib/html-entities';\nimport { INTERNAL_TX } from 'stubs/internalTx';\nimport { generateListStub } from 'stubs/utils';\nimport ActionBar from 'ui/shared/ActionBar';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\n// import FilterInput from 'ui/shared/filters/FilterInput';\n// import TxInternalsFilter from 'ui/tx/internals/TxInternalsFilter';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport { default as getNextSortValueShared } from 'ui/shared/sort/getNextSortValue';\nimport TxInternalsList from 'ui/tx/internals/TxInternalsList';\nimport TxInternalsTable from 'ui/tx/internals/TxInternalsTable';\nimport type { Sort, SortField } from 'ui/tx/internals/utils';\nimport TxPendingAlert from 'ui/tx/TxPendingAlert';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\nimport useFetchTxInfo from 'ui/tx/useFetchTxInfo';\n\nconst SORT_SEQUENCE: Record<SortField, Array<Sort | undefined>> = {\n  value: [ 'value-desc', 'value-asc', undefined ],\n  'gas-limit': [ 'gas-limit-desc', 'gas-limit-asc', undefined ],\n};\n\nconst getNextSortValue = (getNextSortValueShared<SortField, Sort>).bind(undefined, SORT_SEQUENCE);\n\nconst sortFn = (sort: Sort | undefined) => (a: InternalTransaction, b: InternalTransaction) => {\n  switch (sort) {\n    case 'value-desc': {\n      const result = a.value > b.value ? -1 : 1;\n      return a.value === b.value ? 0 : result;\n    }\n\n    case 'value-asc': {\n      const result = a.value > b.value ? 1 : -1;\n      return a.value === b.value ? 0 : result;\n    }\n\n    case 'gas-limit-desc': {\n      const result = a.gas_limit > b.gas_limit ? -1 : 1;\n      return a.gas_limit === b.gas_limit ? 0 : result;\n    }\n\n    case 'gas-limit-asc': {\n      const result = a.gas_limit > b.gas_limit ? 1 : -1;\n      return a.gas_limit === b.gas_limit ? 0 : result;\n    }\n\n    default:\n      return 0;\n  }\n};\n\n// const searchFn = (searchTerm: string) => (item: InternalTransaction): boolean => {\n//   const formattedSearchTerm = searchTerm.toLowerCase();\n//   return item.type.toLowerCase().includes(formattedSearchTerm) ||\n//     item.from.hash.toLowerCase().includes(formattedSearchTerm) ||\n//     item.to.hash.toLowerCase().includes(formattedSearchTerm);\n// };\n\nconst TxInternals = () => {\n  // filters are not implemented yet in api\n  // const [ filters, setFilters ] = React.useState<Array<TxInternalsType>>([]);\n  // const [ searchTerm, setSearchTerm ] = React.useState<string>('');\n  const [ sort, setSort ] = React.useState<Sort>();\n  const txInfo = useFetchTxInfo({ updateDelay: 5 * SECOND });\n  const { data, isPlaceholderData, isError, pagination } = useQueryWithPages({\n    resourceName: 'tx_internal_txs',\n    pathParams: { hash: txInfo.data?.hash },\n    options: {\n      enabled: !txInfo.isPlaceholderData && Boolean(txInfo.data?.hash) && Boolean(txInfo.data?.status),\n      placeholderData: generateListStub<'tx_internal_txs'>(INTERNAL_TX, 3, { next_page_params: null }),\n    },\n  });\n\n  // const handleFilterChange = React.useCallback((nextValue: Array<TxInternalsType>) => {\n  //   setFilters(nextValue);\n  // }, []);\n\n  const handleSortToggle = React.useCallback((field: SortField) => {\n    return () => {\n      if (isPlaceholderData) {\n        return;\n      }\n      setSort(getNextSortValue(field));\n    };\n  }, [ isPlaceholderData ]);\n\n  if (!txInfo.isPlaceholderData && !txInfo.isError && !txInfo.data?.status) {\n    return txInfo.socketStatus ? <TxSocketAlert status={ txInfo.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  const filteredData = data?.items\n    .slice()\n  // .filter(({ type }) => filters.length > 0 ? filters.includes(type) : true)\n  // .filter(searchFn(searchTerm))\n    .sort(sortFn(sort));\n\n  const content = filteredData ? (\n    <>\n      <Show below=\"lg\" ssr={ false }><TxInternalsList data={ filteredData } isLoading={ isPlaceholderData }/></Show>\n      <Hide below=\"lg\" ssr={ false }>\n        <TxInternalsTable\n          data={ filteredData }\n          sort={ sort }\n          onSortToggle={ handleSortToggle }\n          top={ pagination.isVisible ? 80 : 0 }\n          isLoading={ isPlaceholderData }\n        />\n      </Hide>\n    </>\n  ) : null;\n\n  const actionBar = pagination.isVisible ? (\n    <ActionBar mt={ -6 }>\n      { /* <TxInternalsFilter onFilterChange={ handleFilterChange } defaultFilters={ filters } appliedFiltersNum={ filters.length }/> */ }\n      { /* <FilterInput onChange={ setSearchTerm } maxW=\"360px\" ml={ 3 } size=\"xs\" placeholder=\"Search by addresses, hash, method...\"/> */ }\n      <Pagination ml=\"auto\" { ...pagination }/>\n    </ActionBar>\n  ) : null;\n\n  return (\n    <DataListDisplay\n      isError={ isError || txInfo.isError }\n      items={ data?.items }\n      emptyText=\"There are no internal transactions for this transaction.\"\n      // filterProps={{\n      // emptyFilteredText: `Couldn${ apos }t find any transaction that matches your query.`.\n      // hasActiveFilters: Boolean(filters.length || searchTerm),\n      // }}\n      content={ content }\n      actionBar={ actionBar }\n    />\n  );\n};\n\nexport default TxInternals;\n","import { Box, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nimport { SECOND } from 'lib/consts';\nimport { LOG } from 'stubs/log';\nimport { generateListStub } from 'stubs/utils';\nimport ActionBar from 'ui/shared/ActionBar';\nimport DataFetchAlert from 'ui/shared/DataFetchAlert';\nimport LogItem from 'ui/shared/logs/LogItem';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport TxPendingAlert from 'ui/tx/TxPendingAlert';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\nimport useFetchTxInfo from 'ui/tx/useFetchTxInfo';\n\nconst TxLogs = () => {\n  const txInfo = useFetchTxInfo({ updateDelay: 5 * SECOND });\n  const { data, isPlaceholderData, isError, pagination } = useQueryWithPages({\n    resourceName: 'tx_logs',\n    pathParams: { hash: txInfo.data?.hash },\n    options: {\n      enabled: !txInfo.isPlaceholderData && Boolean(txInfo.data?.hash) && Boolean(txInfo.data?.status),\n      placeholderData: generateListStub<'tx_logs'>(LOG, 3, { next_page_params: null }),\n    },\n  });\n\n  if (!txInfo.isPending && !txInfo.isPlaceholderData && !txInfo.isError && !txInfo.data.status) {\n    return txInfo.socketStatus ? <TxSocketAlert status={ txInfo.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  if (isError || txInfo.isError) {\n    return <DataFetchAlert/>;\n  }\n\n  if (!data?.items.length) {\n    return <Text as=\"span\">There are no logs for this transaction.</Text>;\n  }\n\n  return (\n    <Box>\n      { pagination.isVisible && (\n        <ActionBar mt={ -6 }>\n          <Pagination ml=\"auto\" { ...pagination }/>\n        </ActionBar>\n      ) }\n      { data?.items.map((item, index) => <LogItem key={ index } { ...item } type=\"transaction\" isLoading={ isPlaceholderData }/>) }\n    </Box>\n  );\n};\n\nexport default TxLogs;\n","import { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type { SocketMessage } from 'lib/socket/types';\nimport type { RawTracesResponse } from 'types/api/rawTrace';\n\nimport useApiQuery from 'lib/api/useApiQuery';\nimport { SECOND } from 'lib/consts';\nimport getQueryParamString from 'lib/router/getQueryParamString';\nimport useSocketChannel from 'lib/socket/useSocketChannel';\nimport useSocketMessage from 'lib/socket/useSocketMessage';\nimport { TX_RAW_TRACE } from 'stubs/tx';\nimport DataFetchAlert from 'ui/shared/DataFetchAlert';\nimport RawDataSnippet from 'ui/shared/RawDataSnippet';\nimport TxPendingAlert from 'ui/tx/TxPendingAlert';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\nimport useFetchTxInfo from 'ui/tx/useFetchTxInfo';\n\nconst TxRawTrace = () => {\n  const [ isQueryEnabled, setIsQueryEnabled ] = React.useState(false);\n  const [ rawTraces, setRawTraces ] = React.useState<RawTracesResponse>();\n  const router = useRouter();\n  const hash = getQueryParamString(router.query.hash);\n\n  const txInfo = useFetchTxInfo({ updateDelay: 5 * SECOND });\n  const { data, isPlaceholderData, isError } = useApiQuery('tx_raw_trace', {\n    pathParams: { hash },\n    queryOptions: {\n      enabled: Boolean(hash) && Boolean(txInfo.data?.status) && isQueryEnabled,\n      placeholderData: TX_RAW_TRACE,\n    },\n  });\n\n  const handleRawTraceMessage: SocketMessage.TxRawTrace['handler'] = React.useCallback((payload) => {\n    setRawTraces(payload);\n  }, [ ]);\n\n  const enableQuery = React.useCallback(() => setIsQueryEnabled(true), []);\n\n  const channel = useSocketChannel({\n    topic: `transactions:${ hash }`,\n    isDisabled: !hash || txInfo.isPlaceholderData || !txInfo.data?.status,\n    onJoin: enableQuery,\n    onSocketError: enableQuery,\n  });\n  useSocketMessage({\n    channel,\n    event: 'raw_trace',\n    handler: handleRawTraceMessage,\n  });\n\n  if (!txInfo.isPending && !txInfo.isPlaceholderData && !txInfo.isError && !txInfo.data.status) {\n    return txInfo.socketStatus ? <TxSocketAlert status={ txInfo.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  if (isError || txInfo.isError) {\n    return <DataFetchAlert/>;\n  }\n\n  const dataToDisplay = rawTraces ? rawTraces : data;\n\n  if (!isPlaceholderData && dataToDisplay?.length === 0) {\n    return <span>No trace entries found.</span>;\n  }\n\n  const text = JSON.stringify(dataToDisplay, undefined, 4);\n\n  return <RawDataSnippet data={ text } isLoading={ isPlaceholderData }/>;\n};\n\nexport default TxRawTrace;\n","import type { TxStateChange } from 'types/api/txStateChanges';\n\nimport { ADDRESS_PARAMS } from './addressParams';\nimport { TOKEN_INFO_ERC_721 } from './token';\n\nexport const STATE_CHANGE_MINER: TxStateChange = {\n  address: ADDRESS_PARAMS,\n  balance_after: '124280364215547113',\n  balance_before: '123405277440098758',\n  change: '875086775448355',\n  is_miner: true,\n  token: null,\n  type: 'coin',\n};\n\nexport const STATE_CHANGE_COIN: TxStateChange = {\n  address: ADDRESS_PARAMS,\n  balance_after: '61659392141463351540',\n  balance_before: '61660292436225994690',\n  change: '-900294762600000',\n  is_miner: false,\n  token: null,\n  type: 'coin',\n};\n\nexport const STATE_CHANGE_TOKEN: TxStateChange = {\n  address: ADDRESS_PARAMS,\n  balance_after: '43',\n  balance_before: '42',\n  change: [\n    {\n      direction: 'to',\n      total: {\n        token_id: '1621395',\n      },\n    },\n  ],\n  is_miner: false,\n  token: TOKEN_INFO_ERC_721,\n  type: 'token',\n};\n\nexport const TX_STATE_CHANGES: Array<TxStateChange> = [\n  STATE_CHANGE_MINER,\n  STATE_CHANGE_COIN,\n  STATE_CHANGE_TOKEN,\n];\n","import { Flex, Link, useBoolean } from '@chakra-ui/react';\nimport React from 'react';\n\nimport NftEntity from 'ui/shared/entities/nft/NftEntity';\n\ninterface Props {\n  items: Array<{total: { token_id: string} }>;\n  tokenAddress: string;\n  isLoading?: boolean;\n}\n\nconst TxStateTokenIdList = ({ items, tokenAddress, isLoading }: Props) => {\n  const [ isCut, setIsCut ] = useBoolean(true);\n\n  return (\n    <Flex flexDir=\"column\" rowGap={ 2 }>\n      { items.slice(0, isCut ? 3 : items.length).map((item, index) => (\n        <NftEntity\n          key={ index }\n          hash={ tokenAddress }\n          id={ item.total.token_id }\n          isLoading={ isLoading }\n        />\n      )) }\n      { items.length > 3 && (\n        <Link\n          fontWeight={ 400 }\n          textDecoration=\"underline dashed\"\n          _hover={{ textDecoration: 'underline dashed', color: 'link_hovered' }}\n          onClick={ setIsCut.toggle }\n          pb={{ base: '5px', md: 0 }}\n        >\n          View { isCut ? 'more' : 'less' }\n        </Link>\n      ) }\n    </Flex>\n  );\n};\n\nexport default React.memo(TxStateTokenIdList);\n","import { Flex, Skeleton, Tooltip } from '@chakra-ui/react';\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\n\nimport type { TxStateChange } from 'types/api/txStateChanges';\n\nimport config from 'configs/app';\nimport { ZERO_ADDRESS } from 'lib/consts';\nimport { nbsp, space } from 'lib/html-entities';\nimport getNetworkValidatorTitle from 'lib/networks/getNetworkValidatorTitle';\nimport { currencyUnits } from 'lib/units';\nimport Tag from 'ui/shared/chakra/Tag';\nimport NftEntity from 'ui/shared/entities/nft/NftEntity';\nimport TokenEntity from 'ui/shared/entities/token/TokenEntity';\n\nimport TxStateTokenIdList from './TxStateTokenIdList';\n\nexport function getStateElements(data: TxStateChange, isLoading?: boolean) {\n  const tag = (() => {\n    if (data.is_miner) {\n      return (\n        <Tooltip label=\"A block producer who successfully included the block into the blockchain\">\n          <Tag textTransform=\"capitalize\" colorScheme=\"yellow\" isLoading={ isLoading }>\n            { getNetworkValidatorTitle() }\n          </Tag>\n        </Tooltip>\n      );\n    }\n\n    if (data.address.hash === ZERO_ADDRESS) {\n      const changeDirection = (() => {\n        if (Array.isArray(data.change)) {\n          const firstChange = data.change[0];\n          return firstChange.direction;\n        }\n        return Number(data.change) > 0 ? 'to' : 'from';\n      })();\n\n      if (changeDirection) {\n        const text = changeDirection === 'from' ? 'Mint' : 'Burn';\n        return (\n          <Tooltip label=\"Address used in tokens mintings and burnings\">\n            <Tag textTransform=\"capitalize\" colorScheme=\"yellow\" isLoading={ isLoading }>{ text } address</Tag>\n          </Tooltip>\n        );\n      }\n    }\n\n    return null;\n  })();\n\n  switch (data.type) {\n    case 'coin': {\n      const beforeBn = BigNumber(data.balance_before || '0').div(10 ** config.chain.currency.decimals);\n      const afterBn = BigNumber(data.balance_after || '0').div(10 ** config.chain.currency.decimals);\n      const differenceBn = afterBn.minus(beforeBn);\n      const changeColor = beforeBn.lte(afterBn) ? 'green.500' : 'red.500';\n      const changeSign = beforeBn.lte(afterBn) ? '+' : '-';\n\n      return {\n        before: (\n          <Skeleton isLoaded={ !isLoading } wordBreak=\"break-all\" display=\"inline-block\">\n            { beforeBn.toFormat() } { currencyUnits.ether }\n          </Skeleton>\n        ),\n        after: (\n          <Skeleton isLoaded={ !isLoading } wordBreak=\"break-all\" display=\"inline-block\">\n            { afterBn.toFormat() } { currencyUnits.ether }\n          </Skeleton>\n        ),\n        change: (\n          <Skeleton isLoaded={ !isLoading } display=\"inline-block\" color={ changeColor }>\n            <span>{ changeSign }{ nbsp }{ differenceBn.abs().toFormat() }</span>\n          </Skeleton>\n        ),\n        tag,\n      };\n    }\n    case 'token': {\n      const tokenLink = (\n        <TokenEntity\n          token={ data.token }\n          isLoading={ isLoading }\n          noIcon\n          noCopy\n          onlySymbol\n          w=\"auto\"\n        />\n      );\n      const beforeBn = BigNumber(data.balance_before || '0').div(BigNumber(10 ** (Number(data.token.decimals))));\n      const afterBn = BigNumber(data.balance_after || '0').div(BigNumber(10 ** (Number(data.token.decimals))));\n      const change = (() => {\n        let differenceBn;\n        if (typeof data.change === 'string') {\n          differenceBn = BigNumber(data.change || '0').div(BigNumber(10 ** (Number(data.token.decimals))));\n        } else {\n          differenceBn = afterBn.minus(beforeBn);\n        }\n\n        if (!differenceBn || differenceBn.isEqualTo(0)) {\n          return null;\n        }\n\n        const changeColor = differenceBn.isGreaterThanOrEqualTo(0) ? 'green.500' : 'red.500';\n        const changeSign = differenceBn.isGreaterThanOrEqualTo(0) ? '+' : '-';\n\n        return (\n          <Skeleton isLoaded={ !isLoading } display=\"inline-block\" color={ changeColor }>\n            <span>{ changeSign }{ nbsp }{ differenceBn.abs().toFormat() }</span>\n          </Skeleton>\n        );\n      })();\n\n      const tokenId = (() => {\n        if (!Array.isArray(data.change)) {\n          if ('token_id' in data && data.token_id) {\n            return (\n              <NftEntity\n                hash={ data.token.address }\n                id={ data.token_id }\n                isLoading={ isLoading }\n              />\n            );\n          } else {\n            return null;\n          }\n        }\n\n        return <TxStateTokenIdList items={ data.change } tokenAddress={ data.token.address } isLoading={ isLoading }/>;\n      })();\n\n      return {\n        before: data.balance_before ? (\n          <Flex whiteSpace=\"pre-wrap\" justifyContent={{ base: 'flex-start', lg: 'flex-end' }} flexWrap=\"wrap\">\n            <Skeleton isLoaded={ !isLoading }>{ beforeBn.toFormat() }</Skeleton>\n            <span>{ space }</span>\n            { tokenLink }\n          </Flex>\n        ) : null,\n        after: data.balance_after ? (\n          <Flex whiteSpace=\"pre-wrap\" justifyContent={{ base: 'flex-start', lg: 'flex-end' }} flexWrap=\"wrap\">\n            <Skeleton isLoaded={ !isLoading }>{ afterBn.toFormat() }</Skeleton>\n            <span>{ space }</span>\n            { tokenLink }\n          </Flex>\n        ) : null,\n        change,\n        tag,\n        tokenId,\n      };\n    }\n  }\n}\n","import React from 'react';\n\nimport type { TxStateChange } from 'types/api/txStateChanges';\n\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\nimport ListItemMobileGrid from 'ui/shared/ListItemMobile/ListItemMobileGrid';\n\nimport { getStateElements } from './utils';\n\ninterface Props {\n  data: TxStateChange;\n  isLoading?: boolean;\n}\n\nconst TxStateListItem = ({ data, isLoading }: Props) => {\n\n  const { before, after, change, tag, tokenId } = getStateElements(data, isLoading);\n\n  return (\n    <ListItemMobileGrid.Container>\n\n      <ListItemMobileGrid.Label isLoading={ isLoading }>Address</ListItemMobileGrid.Label>\n      <ListItemMobileGrid.Value py=\"3px\" display=\"flex\" flexWrap=\"nowrap\" columnGap={ 3 }>\n        <AddressEntity\n          address={ data.address }\n          isLoading={ isLoading }\n        />\n        { tag }\n      </ListItemMobileGrid.Value>\n\n      { before && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>Before</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value>{ before }</ListItemMobileGrid.Value>\n        </>\n      ) }\n\n      { after && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>After</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value>{ after }</ListItemMobileGrid.Value>\n        </>\n      ) }\n\n      { change && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>Change</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value>{ change }</ListItemMobileGrid.Value>\n        </>\n      ) }\n\n      { tokenId && (\n        <>\n          <ListItemMobileGrid.Label isLoading={ isLoading }>Token ID</ListItemMobileGrid.Label>\n          <ListItemMobileGrid.Value py=\"0\">{ tokenId }</ListItemMobileGrid.Value>\n        </>\n      ) }\n\n    </ListItemMobileGrid.Container>\n  );\n};\n\nexport default TxStateListItem;\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxStateChange } from 'types/api/txStateChanges';\n\nimport TxStateListItem from 'ui/tx/state/TxStateListItem';\n\ninterface Props {\n  data: Array<TxStateChange>;\n  isLoading?: boolean;\n}\n\nconst TxStateList = ({ data, isLoading }: Props) => {\n  return (\n    <Box>\n      { data.map((item, index) => <TxStateListItem key={ index } data={ item } isLoading={ isLoading }/>) }\n    </Box>\n  );\n};\n\nexport default TxStateList;\n","import { Tr, Td, Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxStateChange } from 'types/api/txStateChanges';\n\nimport AddressEntity from 'ui/shared/entities/address/AddressEntity';\n\nimport { getStateElements } from './utils';\n\ninterface Props {\n  data: TxStateChange;\n  isLoading?: boolean;\n}\n\nconst TxStateTableItem = ({ data, isLoading }: Props) => {\n  const { before, after, change, tag, tokenId } = getStateElements(data, isLoading);\n\n  return (\n    <Tr>\n      <Td>\n        <Box py=\"3px\">\n          { tag }\n        </Box>\n      </Td>\n      <Td>\n        <AddressEntity\n          address={ data.address }\n          isLoading={ isLoading }\n          truncation=\"constant\"\n          my=\"7px\"\n          w=\"min-content\"\n        />\n      </Td>\n      <Td isNumeric><Box py=\"7px\">{ before }</Box></Td>\n      <Td isNumeric><Box py=\"7px\">{ after }</Box></Td>\n      <Td isNumeric><Box py=\"7px\">{ change }</Box></Td>\n      <Td>{ tokenId }</Td>\n    </Tr>\n  );\n};\n\nexport default React.memo(TxStateTableItem);\n","import {\n  Table,\n  Tbody,\n  Tr,\n  Th,\n} from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { TxStateChange } from 'types/api/txStateChanges';\n\nimport { AddressHighlightProvider } from 'lib/contexts/addressHighlight';\nimport { default as Thead } from 'ui/shared/TheadSticky';\nimport TxStateTableItem from 'ui/tx/state/TxStateTableItem';\n\ninterface Props {\n  data: Array<TxStateChange>;\n  isLoading?: boolean;\n  top: number;\n}\n\nconst TxStateTable = ({ data, isLoading, top }: Props) => {\n  return (\n    <AddressHighlightProvider>\n      <Table variant=\"simple\" minWidth=\"1000px\" size=\"sm\" w=\"100%\">\n        <Thead top={ top }>\n          <Tr>\n            <Th width=\"140px\">Type</Th>\n            <Th width=\"160px\">Address</Th>\n            <Th width=\"33%\" isNumeric>Before</Th>\n            <Th width=\"33%\" isNumeric>After</Th>\n            <Th width=\"33%\" isNumeric>Change</Th>\n            <Th width=\"150px\" minW=\"80px\" maxW=\"150px\">Token ID</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          { data.map((item, index) => <TxStateTableItem data={ item } key={ index } isLoading={ isLoading }/>) }\n        </Tbody>\n      </Table>\n    </AddressHighlightProvider>\n  );\n};\n\nexport default React.memo(TxStateTable);\n","import { Accordion, Hide, Show, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nimport { SECOND } from 'lib/consts';\nimport { TX_STATE_CHANGES } from 'stubs/txStateChanges';\nimport ActionBar from 'ui/shared/ActionBar';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport TxStateList from 'ui/tx/state/TxStateList';\nimport TxStateTable from 'ui/tx/state/TxStateTable';\nimport useFetchTxInfo from 'ui/tx/useFetchTxInfo';\n\nimport TxPendingAlert from './TxPendingAlert';\nimport TxSocketAlert from './TxSocketAlert';\n\nconst TxState = () => {\n  const txInfo = useFetchTxInfo({ updateDelay: 5 * SECOND });\n  const { data, isPlaceholderData, isError, pagination } = useQueryWithPages({\n    resourceName: 'tx_state_changes',\n    pathParams: { hash: txInfo.data?.hash },\n    options: {\n      enabled: !txInfo.isPlaceholderData && Boolean(txInfo.data?.hash) && Boolean(txInfo.data?.status),\n      placeholderData: {\n        items: TX_STATE_CHANGES,\n        next_page_params: {\n          items_count: 1,\n          state_changes: null,\n        },\n      },\n    },\n  });\n\n  if (!txInfo.isPending && !txInfo.isPlaceholderData && !txInfo.isError && !txInfo.data.status) {\n    return txInfo.socketStatus ? <TxSocketAlert status={ txInfo.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  const content = data ? (\n    <Accordion allowMultiple defaultIndex={ [] }>\n      <Hide below=\"lg\" ssr={ false }>\n        <TxStateTable data={ data.items } isLoading={ isPlaceholderData } top={ pagination.isVisible ? 80 : 0 }/>\n      </Hide>\n      <Show below=\"lg\" ssr={ false }>\n        <TxStateList data={ data.items } isLoading={ isPlaceholderData }/>\n      </Show>\n    </Accordion>\n  ) : null;\n\n  const actionBar = pagination.isVisible ? (\n    <ActionBar mt={ -6 } showShadow>\n      <Pagination ml=\"auto\" { ...pagination }/>\n    </ActionBar>\n  ) : null;\n\n  return (\n    <>\n      <Text mb={ 6 }>\n        A set of information that represents the current state is updated when a transaction takes place on the network.\n        The below is a summary of those changes.\n      </Text>\n      <DataListDisplay\n        isError={ isError }\n        items={ data?.items }\n        emptyText=\"There are no state changes for this transaction.\"\n        content={ content }\n        actionBar={ actionBar }\n      />\n    </>\n  );\n};\n\nexport default TxState;\n","import { Box, Flex, Link } from '@chakra-ui/react';\nimport React from 'react';\n\nimport config from 'configs/app';\nimport useApiQuery from 'lib/api/useApiQuery';\nimport { TX_INTERPRETATION } from 'stubs/txInterpretation';\nimport AccountActionsMenu from 'ui/shared/AccountActionsMenu/AccountActionsMenu';\nimport TxEntity from 'ui/shared/entities/tx/TxEntity';\nimport NetworkExplorers from 'ui/shared/NetworkExplorers';\nimport { TX_ACTIONS_BLOCK_ID } from 'ui/tx/details/txDetailsActions/TxDetailsActionsWrapper';\nimport TxInterpretation from 'ui/tx/interpretation/TxInterpretation';\n\ntype Props = {\n  hash?: string;\n  hasTag: boolean;\n}\n\nconst TxSubHeading = ({ hash, hasTag }: Props) => {\n  const hasInterpretationFeature = config.features.txInterpretation.isEnabled;\n\n  const txInterpretationQuery = useApiQuery('tx_interpretation', {\n    pathParams: { hash },\n    queryOptions: {\n      enabled: Boolean(hash) && hasInterpretationFeature,\n      placeholderData: TX_INTERPRETATION,\n    },\n  });\n\n  const hasInterpretation = hasInterpretationFeature &&\n    (txInterpretationQuery.isPlaceholderData || Boolean(txInterpretationQuery.data?.data.summaries.length));\n\n  return (\n    <Box display={{ base: 'block', lg: 'flex' }} alignItems=\"center\" w=\"100%\">\n      { hasInterpretation && (\n        <Flex mr={{ base: 0, lg: 6 }} flexWrap=\"wrap\" alignItems=\"center\">\n          <TxInterpretation\n            summary={ txInterpretationQuery.data?.data.summaries[0] }\n            isLoading={ txInterpretationQuery.isPlaceholderData }\n            fontSize=\"lg\"\n          />\n          { !txInterpretationQuery.isPlaceholderData && txInterpretationQuery.data?.data.summaries && txInterpretationQuery.data?.data.summaries.length > 1 &&\n            <Link ml={ 3 } href={ `#${ TX_ACTIONS_BLOCK_ID }` }>all actions</Link> }\n        </Flex>\n      ) }\n      { !hasInterpretation && <TxEntity hash={ hash } noLink noCopy={ false } fontWeight={ 500 } mr={{ base: 0, lg: 2 }} fontFamily=\"heading\"/> }\n      <Flex alignItems=\"center\" justifyContent={{ base: 'start', lg: 'space-between' }} flexGrow={ 1 }>\n        { !hasTag && <AccountActionsMenu mr={ 3 } mt={{ base: 3, lg: 0 }}/> }\n        <NetworkExplorers type=\"tx\" pathParam={ hash } ml={{ base: 0, lg: 'auto' }} mt={{ base: 3, lg: 0 }}/>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default TxSubHeading;\n","import { Hide, Show } from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type { TokenType } from 'types/api/token';\n\nimport { SECOND } from 'lib/consts';\nimport getFilterValuesFromQuery from 'lib/getFilterValuesFromQuery';\nimport { apos } from 'lib/html-entities';\nimport { TOKEN_TYPE_IDS } from 'lib/token/tokenTypes';\nimport { getTokenTransfersStub } from 'stubs/token';\nimport ActionBar from 'ui/shared/ActionBar';\nimport DataFetchAlert from 'ui/shared/DataFetchAlert';\nimport DataListDisplay from 'ui/shared/DataListDisplay';\nimport Pagination from 'ui/shared/pagination/Pagination';\nimport useQueryWithPages from 'ui/shared/pagination/useQueryWithPages';\nimport TokenTransferFilter from 'ui/shared/TokenTransfer/TokenTransferFilter';\nimport TokenTransferList from 'ui/shared/TokenTransfer/TokenTransferList';\nimport TokenTransferTable from 'ui/shared/TokenTransfer/TokenTransferTable';\nimport TxPendingAlert from 'ui/tx/TxPendingAlert';\nimport TxSocketAlert from 'ui/tx/TxSocketAlert';\nimport useFetchTxInfo from 'ui/tx/useFetchTxInfo';\n\nconst getTokenFilterValue = (getFilterValuesFromQuery<TokenType>).bind(null, TOKEN_TYPE_IDS);\n\nconst TxTokenTransfer = () => {\n  const txsInfo = useFetchTxInfo({ updateDelay: 5 * SECOND });\n\n  const router = useRouter();\n\n  const [ typeFilter, setTypeFilter ] = React.useState<Array<TokenType>>(getTokenFilterValue(router.query.type) || []);\n\n  const tokenTransferQuery = useQueryWithPages({\n    resourceName: 'tx_token_transfers',\n    pathParams: { hash: txsInfo.data?.hash.toString() },\n    options: {\n      enabled: !txsInfo.isPlaceholderData && Boolean(txsInfo.data?.status && txsInfo.data?.hash),\n      placeholderData: getTokenTransfersStub(),\n    },\n    filters: { type: typeFilter },\n  });\n\n  const handleTypeFilterChange = React.useCallback((nextValue: Array<TokenType>) => {\n    tokenTransferQuery.onFilterChange({ type: nextValue });\n    setTypeFilter(nextValue);\n  }, [ tokenTransferQuery ]);\n\n  if (!txsInfo.isPending && !txsInfo.isPlaceholderData && !txsInfo.isError && !txsInfo.data.status) {\n    return txsInfo.socketStatus ? <TxSocketAlert status={ txsInfo.socketStatus }/> : <TxPendingAlert/>;\n  }\n\n  if (txsInfo.isError || tokenTransferQuery.isError) {\n    return <DataFetchAlert/>;\n  }\n\n  const numActiveFilters = typeFilter.length;\n  const isActionBarHidden = !numActiveFilters && !tokenTransferQuery.data?.items.length;\n\n  const content = tokenTransferQuery.data?.items ? (\n    <>\n      <Hide below=\"lg\" ssr={ false }>\n        <TokenTransferTable data={ tokenTransferQuery.data?.items } top={ isActionBarHidden ? 0 : 80 } isLoading={ tokenTransferQuery.isPlaceholderData }/>\n      </Hide>\n      <Show below=\"lg\" ssr={ false }>\n        <TokenTransferList data={ tokenTransferQuery.data?.items } isLoading={ tokenTransferQuery.isPlaceholderData }/>\n      </Show>\n    </>\n  ) : null;\n\n  const actionBar = !isActionBarHidden ? (\n    <ActionBar mt={ -6 }>\n      <TokenTransferFilter\n        defaultTypeFilters={ typeFilter }\n        onTypeFilterChange={ handleTypeFilterChange }\n        appliedFiltersNum={ numActiveFilters }\n        isLoading={ tokenTransferQuery.isPlaceholderData }\n      />\n      <Pagination ml=\"auto\" { ...tokenTransferQuery.pagination }/>\n    </ActionBar>\n  ) : null;\n\n  return (\n    <DataListDisplay\n      isError={ txsInfo.isError || tokenTransferQuery.isError }\n      items={ tokenTransferQuery.data?.items }\n      emptyText=\"There are no token transfers.\"\n      filterProps={{\n        emptyFilteredText: `Couldn${ apos }t find any token transfer that matches your query.`,\n        hasActiveFilters: Boolean(numActiveFilters),\n      }}\n      content={ content }\n      actionBar={ actionBar }\n    />\n  );\n};\n\nexport default TxTokenTransfer;\n","import { useRouter } from 'next/router';\nimport React from 'react';\n\nimport type { RoutedTab } from 'ui/shared/Tabs/types';\n\nimport config from 'configs/app';\nimport useApiQuery from 'lib/api/useApiQuery';\nimport { useAppContext } from 'lib/contexts/app';\nimport getQueryParamString from 'lib/router/getQueryParamString';\nimport { TX } from 'stubs/tx';\nimport TextAd from 'ui/shared/ad/TextAd';\nimport EntityTags from 'ui/shared/EntityTags';\nimport PageTitle from 'ui/shared/Page/PageTitle';\nimport RoutedTabs from 'ui/shared/Tabs/RoutedTabs';\nimport TabsSkeleton from 'ui/shared/Tabs/TabsSkeleton';\nimport useTabIndexFromQuery from 'ui/shared/Tabs/useTabIndexFromQuery';\nimport TxDetails from 'ui/tx/TxDetails';\nimport TxDetailsWrapped from 'ui/tx/TxDetailsWrapped';\nimport TxInternals from 'ui/tx/TxInternals';\nimport TxLogs from 'ui/tx/TxLogs';\nimport TxRawTrace from 'ui/tx/TxRawTrace';\nimport TxState from 'ui/tx/TxState';\nimport TxSubHeading from 'ui/tx/TxSubHeading';\nimport TxTokenTransfer from 'ui/tx/TxTokenTransfer';\n\nconst TransactionPageContent = () => {\n  const router = useRouter();\n  const appProps = useAppContext();\n\n  const hash = getQueryParamString(router.query.hash);\n\n  const { data, isPlaceholderData } = useApiQuery('tx', {\n    pathParams: { hash },\n    queryOptions: {\n      enabled: Boolean(hash),\n      placeholderData: TX,\n    },\n  });\n\n  const tabs: Array<RoutedTab> = [\n    {\n      id: 'index',\n      title: config.features.suave.isEnabled && data?.wrapped ? 'Confidential compute tx details' : 'Details',\n      component: <TxDetails/>,\n    },\n    config.features.suave.isEnabled && data?.wrapped ?\n      { id: 'wrapped', title: 'Regular tx details', component: <TxDetailsWrapped data={ data.wrapped }/> } :\n      undefined,\n    { id: 'token_transfers', title: 'Token transfers', component: <TxTokenTransfer/> },\n    { id: 'internal', title: 'Internal txns', component: <TxInternals/> },\n    { id: 'logs', title: 'Logs', component: <TxLogs/> },\n    { id: 'state', title: 'State', component: <TxState/> },\n    { id: 'raw_trace', title: 'Raw trace', component: <TxRawTrace/> },\n  ].filter(Boolean);\n\n  const tabIndex = useTabIndexFromQuery(tabs);\n\n  const tags = (\n    <EntityTags\n      isLoading={ isPlaceholderData }\n      tagsBefore={ [ data?.tx_tag ? { label: data.tx_tag, display_name: data.tx_tag } : undefined ] }\n    />\n  );\n\n  const backLink = React.useMemo(() => {\n    const hasGoBackLink = appProps.referrer && appProps.referrer.includes('/txs');\n\n    if (!hasGoBackLink) {\n      return;\n    }\n\n    return {\n      label: 'Back to transactions list',\n      url: appProps.referrer,\n    };\n  }, [ appProps.referrer ]);\n\n  const titleSecondRow = <TxSubHeading hash={ hash } hasTag={ Boolean(data?.tx_tag) }/>;\n\n  return (\n    <>\n      <TextAd mb={ 6 }/>\n      <PageTitle\n        title=\"Transaction details\"\n        backLink={ backLink }\n        contentAfter={ tags }\n        secondRow={ titleSecondRow }\n      />\n      { isPlaceholderData ? (\n        <>\n          <TabsSkeleton tabs={ tabs } mt={ 6 }/>\n          { tabs[tabIndex]?.component }\n        </>\n      ) : <RoutedTabs tabs={ tabs }/> }\n    </>\n  );\n};\n\nexport default TransactionPageContent;\n","import { GridItem } from '@chakra-ui/react';\nimport React from 'react';\n\nconst DetailsInfoItemDivider = () => {\n  return (\n    <GridItem\n      colSpan={{ base: undefined, lg: 2 }}\n      mt={{ base: 2, lg: 3 }}\n      mb={{ base: 0, lg: 3 }}\n      borderBottom=\"1px solid\"\n      borderColor=\"divider\"\n    />\n  );\n};\n\nexport default DetailsInfoItemDivider;\n","import type { ThemingProps } from '@chakra-ui/react';\nimport { Flex, chakra, useDisclosure, Popover, PopoverTrigger, PopoverContent, PopoverBody } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { UserTags } from 'types/api/addressParams';\n\nimport useIsMobile from 'lib/hooks/useIsMobile';\nimport Tag from 'ui/shared/chakra/Tag';\n\ninterface TagData {\n  label: string;\n  display_name: string;\n  colorScheme?: ThemingProps<'Tag'>['colorScheme'];\n  variant?: ThemingProps<'Tag'>['variant'];\n}\n\ninterface Props {\n  className?: string;\n  data?: UserTags;\n  isLoading?: boolean;\n  tagsBefore?: Array<TagData | undefined>;\n  tagsAfter?: Array<TagData | undefined>;\n  contentAfter?: React.ReactNode;\n}\n\nconst EntityTags = ({ className, data, tagsBefore = [], tagsAfter = [], isLoading, contentAfter }: Props) => {\n  const isMobile = useIsMobile();\n  const { isOpen, onToggle, onClose } = useDisclosure();\n\n  const tags: Array<TagData> = [\n    ...tagsBefore,\n    ...(data?.private_tags || []),\n    ...(data?.public_tags || []),\n    ...(data?.watchlist_names || []),\n    ...tagsAfter,\n  ]\n    .filter(Boolean);\n\n  if (tags.length === 0 && !contentAfter) {\n    return null;\n  }\n\n  const content = (() => {\n    if (isMobile && tags.length > 2) {\n      return (\n        <>\n          {\n            tags\n              .slice(0, 2)\n              .map((tag) => (\n                <Tag\n                  key={ tag.label }\n                  isLoading={ isLoading }\n                  isTruncated\n                  maxW={{ base: '115px', lg: 'initial' }}\n                  colorScheme={ 'colorScheme' in tag ? tag.colorScheme : 'gray' }\n                  variant={ 'variant' in tag ? tag.variant : 'subtle' }\n                >\n                  { tag.display_name }\n                </Tag>\n              ))\n          }\n          <Popover isOpen={ isOpen } onClose={ onClose } placement=\"bottom-start\" isLazy>\n            <PopoverTrigger>\n              <Tag onClick={ onToggle }>+{ tags.length - 1 }</Tag>\n            </PopoverTrigger>\n            <PopoverContent w=\"240px\">\n              <PopoverBody >\n                <Flex columnGap={ 2 } rowGap={ 2 } flexWrap=\"wrap\">\n                  {\n                    tags\n                      .slice(2)\n                      .map((tag) => (\n                        <Tag\n                          key={ tag.label }\n                          colorScheme={ 'colorScheme' in tag ? tag.colorScheme : 'gray' }\n                          variant={ 'variant' in tag ? tag.variant : 'subtle' }\n                        >\n                          { tag.display_name }\n                        </Tag>\n                      ))\n                  }\n                </Flex>\n              </PopoverBody>\n            </PopoverContent>\n          </Popover>\n        </>\n      );\n    }\n\n    return tags.map((tag) => (\n      <Tag\n        key={ tag.label }\n        isLoading={ isLoading }\n        isTruncated\n        maxW={{ base: '115px', lg: 'initial' }}\n        colorScheme={ 'colorScheme' in tag ? tag.colorScheme : 'gray' }\n        variant={ 'variant' in tag ? tag.variant : 'subtle' }\n      >\n        { tag.display_name }\n      </Tag>\n    ));\n  })();\n\n  return (\n    <Flex className={ className } columnGap={ 2 } rowGap={ 2 } flexWrap=\"wrap\" alignItems=\"center\" flexGrow={ 1 }>\n      { content }\n      { contentAfter }\n    </Flex>\n  );\n};\n\nexport default React.memo(chakra(EntityTags));\n","import { Flex, chakra } from '@chakra-ui/react';\nimport { motion } from 'framer-motion';\nimport React from 'react';\n\ninterface Props {\n  children: React.ReactNode;\n  className?: string;\n  isAnimated?: boolean;\n}\n\nconst ListItemMobile = ({ children, className, isAnimated }: Props) => {\n  return (\n    <Flex\n      as={ motion.div }\n      initial={ isAnimated ? { opacity: 0, scale: 0.97 } : { opacity: 1, scale: 1 } }\n      animate={{ opacity: 1, scale: 1 }}\n      transitionDuration=\"normal\"\n      transitionTimingFunction=\"linear\"\n      rowGap={ 6 }\n      alignItems=\"flex-start\"\n      flexDirection=\"column\"\n      paddingY={ 6 }\n      borderColor=\"divider\"\n      borderTopWidth=\"1px\"\n      _last={{\n        borderBottomWidth: '1px',\n      }}\n      className={ className }\n      fontSize=\"16px\"\n      lineHeight=\"20px\"\n    >\n      { children }\n    </Flex>\n  );\n};\n\nexport default chakra(ListItemMobile);\n","import { Flex, Button, chakra, Popover, PopoverTrigger, PopoverBody, PopoverContent, useDisclosure } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { NetworkExplorer as TNetworkExplorer } from 'types/networks';\n\nimport config from 'configs/app';\nimport stripTrailingSlash from 'lib/stripTrailingSlash';\nimport IconSvg from 'ui/shared/IconSvg';\nimport LinkExternal from 'ui/shared/LinkExternal';\n\ninterface Props {\n  className?: string;\n  type: keyof TNetworkExplorer['paths'];\n  pathParam: string;\n}\n\nconst NetworkExplorers = ({ className, type, pathParam }: Props) => {\n  const { isOpen, onToggle, onClose } = useDisclosure();\n\n  const explorersLinks = React.useMemo(() => {\n    return config.UI.explorers.items\n      .filter((explorer) => typeof explorer.paths[type] === 'string')\n      .map((explorer) => {\n        const url = new URL(stripTrailingSlash(explorer.paths[type] || '') + '/' + pathParam, explorer.baseUrl);\n        return <LinkExternal key={ explorer.baseUrl } href={ url.toString() }>{ explorer.title }</LinkExternal>;\n      });\n  }, [ pathParam, type ]);\n\n  if (explorersLinks.length === 0) {\n    return null;\n  }\n\n  return (\n    <Popover isOpen={ isOpen } onClose={ onClose } placement=\"bottom-start\" isLazy>\n      <PopoverTrigger>\n        <Button\n          className={ className }\n          size=\"sm\"\n          variant=\"outline\"\n          colorScheme=\"gray\"\n          onClick={ onToggle }\n          aria-label=\"Verify in other explorers\"\n          fontWeight={ 500 }\n          px={ 2 }\n          h=\"32px\"\n          flexShrink={ 0 }\n        >\n          <IconSvg name=\"explorer\" boxSize={ 5 }/>\n          <IconSvg name=\"arrows/east-mini\" transform={ isOpen ? 'rotate(90deg)' : 'rotate(-90deg)' } transitionDuration=\"faster\" boxSize={ 5 }/>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent w=\"240px\">\n        <PopoverBody >\n          <chakra.span color=\"text_secondary\" fontSize=\"xs\">Verify with other explorers</chakra.span>\n          <Flex\n            alignItems=\"center\"\n            flexWrap=\"wrap\"\n            columnGap={ 6 }\n            rowGap={ 3 }\n            mt={ 3 }\n          >\n            { explorersLinks }\n          </Flex>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default React.memo(chakra(NetworkExplorers));\n","import { chakra } from '@chakra-ui/react';\nimport _omit from 'lodash/omit';\nimport React from 'react';\n\nimport { route } from 'nextjs-routes';\n\nimport config from 'configs/app';\n\nimport * as BlockEntity from './BlockEntity';\n\nconst feature = config.features.zkEvmRollup;\n\nconst ZkEvmBatchEntityL2 = (props: BlockEntity.EntityProps) => {\n  const linkProps = _omit(props, [ 'className' ]);\n  const partsProps = _omit(props, [ 'className', 'onClick' ]);\n\n  if (!feature.isEnabled) {\n    return null;\n  }\n\n  return (\n    <BlockEntity.Container className={ props.className }>\n      <BlockEntity.Icon { ...partsProps } name=\"txn_batches_slim\"/>\n      <BlockEntity.Link\n        { ...linkProps }\n        href={ route({ pathname: '/zkevm-l2-txn-batch/[number]', query: { number: props.number.toString() } }) }\n      >\n        <BlockEntity.Content { ...partsProps }/>\n      </BlockEntity.Link>\n    </BlockEntity.Container>\n  );\n};\n\nexport default chakra(ZkEvmBatchEntityL2);\n","import { chakra } from '@chakra-ui/react';\nimport _omit from 'lodash/omit';\nimport React from 'react';\n\nimport { route } from 'nextjs-routes';\n\nimport config from 'configs/app';\n\nimport * as TxEntity from './TxEntity';\n\nconst feature = config.features.optimisticRollup.isEnabled ? config.features.optimisticRollup : config.features.zkEvmRollup;\n\nconst TxEntityL1 = (props: TxEntity.EntityProps) => {\n  const partsProps = _omit(props, [ 'className', 'onClick' ]);\n  const linkProps = _omit(props, [ 'className' ]);\n\n  if (!feature.isEnabled) {\n    return null;\n  }\n\n  return (\n    <TxEntity.Container className={ props.className }>\n      <TxEntity.Icon { ...partsProps }/>\n      <TxEntity.Link\n        { ...linkProps }\n        isExternal\n        href={ feature.L1BaseUrl + route({ pathname: '/tx/[hash]', query: { hash: props.hash } }) }\n      >\n        <TxEntity.Content { ...partsProps }/>\n      </TxEntity.Link>\n      <TxEntity.Copy { ...partsProps }/>\n    </TxEntity.Container>\n  );\n};\n\nexport default chakra(TxEntityL1);\n","export default function getNextSortValue<SortField extends string, Sort extends string>(\n  sortSequence: Record<SortField, Array<Sort| undefined>>, field: SortField,\n) {\n  return (prevValue: Sort | undefined) => {\n    const sequence = sortSequence[field];\n    const curIndex = sequence.findIndex((sort) => sort === prevValue);\n    const nextIndex = curIndex + 1 > sequence.length - 1 ? 0 : curIndex + 1;\n    return sequence[nextIndex];\n  };\n}\n","import { HStack, Box } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { Step } from './types';\n\nimport IconSvg from 'ui/shared/IconSvg';\n\ntype Props = {\n  step: Step;\n  isLast: boolean;\n  isPassed: boolean;\n}\n\nconst VerificationStep = ({ step, isLast, isPassed }: Props) => {\n  const stepColor = isPassed ? 'green.500' : 'text_secondary';\n\n  return (\n    <HStack gap={ 2 } color={ stepColor }>\n      <IconSvg name={ isPassed ? 'finalized' : 'unfinalized' } boxSize={ 5 }/>\n      <Box color={ stepColor }>{ typeof step === 'string' ? step : step.content }</Box>\n      { !isLast && <IconSvg name=\"arrows/east\" boxSize={ 5 }/> }\n    </HStack>\n  );\n};\n\nexport default VerificationStep;\n","import { Skeleton, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { Step } from './types';\n\nimport VerificationStep from './VerificationStep';\n\nexport interface Props {\n  currentStep: string;\n  steps: Array<Step>;\n  isLoading?: boolean;\n  rightSlot?: React.ReactNode;\n  className?: string;\n}\n\nconst VerificationSteps = ({ currentStep, steps, isLoading, rightSlot, className }: Props) => {\n  const currentStepIndex = steps.findIndex((step) => {\n    const label = typeof step === 'string' ? step : step.label;\n    return label === currentStep;\n  });\n\n  return (\n    <Skeleton\n      className={ className }\n      isLoaded={ !isLoading }\n      display=\"flex\"\n      gap={ 2 }\n      alignItems=\"center\"\n      flexWrap=\"wrap\"\n    >\n      { steps.map((step, index) => (\n        <VerificationStep\n          key={ index }\n          step={ step }\n          isLast={ index === steps.length - 1 && !rightSlot }\n          isPassed={ index <= currentStepIndex }\n        />\n      )) }\n      { rightSlot }\n    </Skeleton>\n  );\n};\n\nexport default chakra(VerificationSteps);\n","// src/checkbox-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [CheckboxGroupProvider, useCheckboxGroupContext] = createContext({\n  name: \"CheckboxGroupContext\",\n  strict: false\n});\n\nexport {\n  CheckboxGroupProvider,\n  useCheckboxGroupContext\n};\n","// src/use-checkbox.ts\nimport { useFormControlProps } from \"@chakra-ui/form-control\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\n\n// src/use-checkbox.ts\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nfunction useCheckbox(props = {}) {\n  const formControlProps = useFormControlProps(props);\n  const {\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-describedby\": ariaDescribedBy\n  } = formControlProps;\n  const {\n    defaultChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    onChange,\n    isIndeterminate,\n    name,\n    value,\n    tabIndex = void 0,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    ...rest\n  } = props;\n  const htmlProps = omit(rest, [\n    \"isDisabled\",\n    \"isReadOnly\",\n    \"isRequired\",\n    \"isInvalid\",\n    \"id\",\n    \"onBlur\",\n    \"onFocus\",\n    \"aria-describedby\"\n  ]);\n  const onChangeProp = useCallbackRef(onChange);\n  const onBlurProp = useCallbackRef(onBlur);\n  const onFocusProp = useCallbackRef(onFocus);\n  const [isFocusVisible, setIsFocusVisible] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const [isHovered, setHovered] = useState(false);\n  const [isActive, setActive] = useState(false);\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  const inputRef = useRef(null);\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true);\n  const [checkedState, setCheckedState] = useState(!!defaultChecked);\n  const isControlled = checkedProp !== void 0;\n  const isChecked = isControlled ? checkedProp : checkedState;\n  const handleChange = useCallback(\n    (event) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault();\n        return;\n      }\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked);\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked);\n        }\n      }\n      onChangeProp == null ? void 0 : onChangeProp(event);\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp\n    ]\n  );\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  useUpdateEffect(() => {\n    if (isDisabled) {\n      setFocused(false);\n    }\n  }, [isDisabled, setFocused]);\n  useSafeLayoutEffect(() => {\n    const el = inputRef.current;\n    if (!(el == null ? void 0 : el.form))\n      return;\n    el.form.onreset = () => {\n      setCheckedState(!!defaultChecked);\n    };\n  }, []);\n  const trulyDisabled = isDisabled && !isFocusable;\n  const onKeyDown = useCallback(\n    (event) => {\n      if (event.key === \" \") {\n        setActive(true);\n      }\n    },\n    [setActive]\n  );\n  const onKeyUp = useCallback(\n    (event) => {\n      if (event.key === \" \") {\n        setActive(false);\n      }\n    },\n    [setActive]\n  );\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current)\n      return;\n    const notInSync = inputRef.current.checked !== isChecked;\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  const getCheckboxProps = useCallback(\n    (props2 = {}, forwardedRef = null) => {\n      const onPressDown = (event) => {\n        if (isFocused) {\n          event.preventDefault();\n        }\n        setActive(true);\n      };\n      return {\n        ...props2,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),\n        onMouseEnter: callAllHandlers(\n          props2.onMouseEnter,\n          () => setHovered(true)\n        ),\n        onMouseLeave: callAllHandlers(\n          props2.onMouseLeave,\n          () => setHovered(false)\n        )\n      };\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isFocusVisible,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly\n    ]\n  );\n  const getRootProps = useCallback(\n    (props2 = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props2,\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node)\n          return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: callAllHandlers(props2.onClick, () => {\n        var _a;\n        if (!rootIsLabelElement) {\n          (_a = inputRef.current) == null ? void 0 : _a.click();\n          requestAnimationFrame(() => {\n            var _a2;\n            (_a2 = inputRef.current) == null ? void 0 : _a2.focus({ preventScroll: true });\n          });\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    }),\n    [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]\n  );\n  const getInputProps = useCallback(\n    (props2 = {}, forwardedRef = null) => {\n      return {\n        ...props2,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        tabIndex,\n        onChange: callAllHandlers(props2.onChange, handleChange),\n        onBlur: callAllHandlers(\n          props2.onBlur,\n          onBlurProp,\n          () => setFocused(false)\n        ),\n        onFocus: callAllHandlers(\n          props2.onFocus,\n          onFocusProp,\n          () => setFocused(true)\n        ),\n        onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle\n      };\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n      tabIndex\n    ]\n  );\n  const getLabelProps = useCallback(\n    (props2 = {}, forwardedRef = null) => ({\n      ...props2,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    }),\n    [isChecked, isDisabled, isInvalid]\n  );\n  const state = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isIndeterminate,\n    isDisabled,\n    isReadOnly,\n    isRequired\n  };\n  return {\n    state,\n    getRootProps,\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nexport {\n  useCheckbox\n};\n","// src/use-initial-animation-state.tsx\nimport { useState } from \"react\";\nfunction useInitialAnimationState(isChecked) {\n  const [previousIsChecked, setPreviousIsChecked] = useState(isChecked);\n  const [shouldAnimate, setShouldAnimate] = useState(false);\n  if (isChecked !== previousIsChecked) {\n    setShouldAnimate(true);\n    setPreviousIsChecked(isChecked);\n  }\n  return shouldAnimate;\n}\n\nexport {\n  useInitialAnimationState\n};\n","// src/checkbox-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction CheckIcon(props) {\n  return /* @__PURE__ */ jsx(\n    chakra.svg,\n    {\n      width: \"1.2em\",\n      viewBox: \"0 0 12 10\",\n      style: {\n        fill: \"none\",\n        strokeWidth: 2,\n        stroke: \"currentColor\",\n        strokeDasharray: 16\n      },\n      ...props,\n      children: /* @__PURE__ */ jsx(\"polyline\", { points: \"1.5 6 4.5 9 10.5 1\" })\n    }\n  );\n}\nfunction IndeterminateIcon(props) {\n  return /* @__PURE__ */ jsx(\n    chakra.svg,\n    {\n      width: \"1.2em\",\n      viewBox: \"0 0 24 24\",\n      style: { stroke: \"currentColor\", strokeWidth: 4 },\n      ...props,\n      children: /* @__PURE__ */ jsx(\"line\", { x1: \"21\", x2: \"3\", y1: \"12\", y2: \"12\" })\n    }\n  );\n}\nfunction CheckboxIcon(props) {\n  const { isIndeterminate, isChecked, ...rest } = props;\n  const BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon;\n  return isChecked || isIndeterminate ? /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"100%\"\n      },\n      children: /* @__PURE__ */ jsx(BaseIcon, { ...rest })\n    }\n  ) : null;\n}\n\nexport {\n  CheckboxIcon\n};\n","import {\n  useInitialAnimationState\n} from \"./chunk-OW24QTOM.mjs\";\nimport {\n  useCheckboxGroupContext\n} from \"./chunk-6XFPBTDN.mjs\";\nimport {\n  CheckboxIcon\n} from \"./chunk-DFEUIRKX.mjs\";\nimport {\n  useCheckbox\n} from \"./chunk-HPA3SDH4.mjs\";\n\n// src/checkbox.tsx\nimport { callAll, cx } from \"@chakra-ui/shared-utils\";\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { cloneElement, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\"\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\"\n  }\n});\nvar indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\"\n  },\n  to: {\n    transform: \"scaleX(1)\"\n  }\n});\nvar Checkbox = forwardRef(function Checkbox2(props, ref) {\n  const group = useCheckboxGroupContext();\n  const mergedProps = { ...group, ...props };\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  const ownProps = omitThemingProps(props);\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = /* @__PURE__ */ jsx(CheckboxIcon, {}),\n    isChecked: isCheckedProp,\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps;\n  let isChecked = isCheckedProp;\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n  let onChange = onChangeProp;\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange\n  });\n  const shouldAnimate = useInitialAnimationState(state.isChecked);\n  const iconStyles = useMemo(\n    () => ({\n      animation: !shouldAnimate ? void 0 : state.isIndeterminate ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear` : `${checkAnim} 200ms linear`,\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon\n    }),\n    [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon]\n  );\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      __css: { ...rootStyles, ...styles.container },\n      className: cx(\"chakra-checkbox\", className),\n      ...getRootProps(),\n      children: [\n        /* @__PURE__ */ jsx(\n          \"input\",\n          {\n            className: \"chakra-checkbox__input\",\n            ...getInputProps(inputProps, ref)\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          chakra.span,\n          {\n            __css: { ...controlStyles, ...styles.control },\n            className: \"chakra-checkbox__control\",\n            ...getCheckboxProps(),\n            children: clonedIcon\n          }\n        ),\n        children && /* @__PURE__ */ jsx(\n          chakra.span,\n          {\n            className: \"chakra-checkbox__label\",\n            ...getLabelProps(),\n            __css: {\n              marginStart: spacing,\n              ...styles.label\n            },\n            children\n          }\n        )\n      ]\n    }\n  );\n});\nCheckbox.displayName = \"Checkbox\";\n\nexport {\n  Checkbox\n};\n","import {\n  useMediaQuery\n} from \"./chunk-MG6WC47T.mjs\";\n\n// src/visibility.tsx\nfunction Visibility(props) {\n  const { breakpoint, hide, children, ssr } = props;\n  const [show] = useMediaQuery(breakpoint, { ssr });\n  const isVisible = hide ? !show : show;\n  const rendered = isVisible ? children : null;\n  return rendered;\n}\n\nexport {\n  Visibility\n};\n","import {\n  Visibility\n} from \"./chunk-DZU5YH7Z.mjs\";\nimport {\n  useQuery\n} from \"./chunk-R3K6W4OF.mjs\";\n\n// src/show.tsx\nimport { jsx } from \"react/jsx-runtime\";\nfunction Show(props) {\n  const { children, ssr } = props;\n  const query = useQuery(props);\n  return /* @__PURE__ */ jsx(Visibility, { breakpoint: query, ssr, children });\n}\nShow.displayName = \"Show\";\n\nexport {\n  Show\n};\n","// src/media-query.tsx\nimport { useTheme } from \"@chakra-ui/system\";\nvar getBreakpoint = (theme, value) => {\n  var _a, _b;\n  return (_b = (_a = theme == null ? void 0 : theme.breakpoints) == null ? void 0 : _a[value]) != null ? _b : value;\n};\nfunction useQuery(props) {\n  const { breakpoint = \"\", below, above } = props;\n  const theme = useTheme();\n  const bpBelow = getBreakpoint(theme, below);\n  const bpAbove = getBreakpoint(theme, above);\n  let query = breakpoint;\n  if (bpBelow) {\n    query = `(max-width: ${bpBelow})`;\n  } else if (bpAbove) {\n    query = `(min-width: ${bpAbove})`;\n  }\n  return query;\n}\n\nexport {\n  useQuery\n};\n","import {\n  Visibility\n} from \"./chunk-DZU5YH7Z.mjs\";\nimport {\n  useQuery\n} from \"./chunk-R3K6W4OF.mjs\";\n\n// src/hide.tsx\nimport { jsx } from \"react/jsx-runtime\";\nfunction Hide(props) {\n  const { children, ssr } = props;\n  const query = useQuery(props);\n  return /* @__PURE__ */ jsx(Visibility, { breakpoint: query, hide: true, ssr, children });\n}\nHide.displayName = \"Hide\";\n\nexport {\n  Hide\n};\n","// src/visually-hidden.style.ts\nvar visuallyHiddenStyle = {\n  border: \"0\",\n  clip: \"rect(0, 0, 0, 0)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  padding: \"0\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\"\n};\n\nexport {\n  visuallyHiddenStyle\n};\n"],"names":["delay","time","Promise","window","setTimeout","resolve","hexToUtf8","hex","utf8decoder","TextDecoder","bytes","Uint8Array","hexToBytes","c","length","push","parseInt","substring","decode","useIsInitialLoading","isLoading","isInitialLoading","setIsInitialLoading","React","Boolean","getNetworkValidatorTitle","config","chain","verificationType","generateListStub","stub","num","rest","items","Array","fill","ZKEVM_L2_TX_STATUSES","OPTIONS","shared_RawInputData","param","selectedDataType","setSelectedDataType","handleSelectChange","event","target","value","jsx_runtime","jsxs","Box","w","Flex","justifyContent","alignItems","jsx","Select","size","borderRadius","onChange","focusBorderColor","map","option","CopyToClipboard","text","Textarea","maxH","mt","p","variant","fontSize","TX_INTERPRETATION","data","summaries","summary_template","summary_template_variables","action_type","type","source_amount","destination_amount","destination_token","TOKEN_INFO_ERC_20","VAR_REGEXP","TxInterpretationElementByType","variable","onAddressClick","mixpanel","TX_INTERPRETATION_INTERACTION","Type","onTokenClick","AddressEntity","address","truncation","sx","marginLeft","whiteSpace","onClick","TokenEntity","token","onlySymbol","noCopy","width","mr","numberString","BigNumber","isLessThan","toPrecision","dp","toFormat","dividedBy","Text","color","dayjs","Number","format","toString","interpretation_TxInterpretation","chakra","summary","className","template","variables","variablesNames","extractVariables","templateString","matches","match","slice","chunks","split","Skeleton","display","flexWrap","isLoaded","IconSvg","name","boxSize","chunk","index","fontWeight","trim","currencyUnits","ether","TX_ACTIONS_BLOCK_ID","TxDetailsActionsWrapper","children","containerRef","hasScroll","setHasScroll","gradientStartColor","useColorModeValue","gradientEndColor","current","scrollHeight","clientHeight","SCROLL_GRADIENT_HEIGHT","DetailsInfoItem","title","hint","note","undefined","position","id","flexDirection","rowGap","overflowY","ref","_after","content","bottom","left","right","height","concat","bgGradient","pr","pb","txDetailsActions_TxDetailsActionsInterpretation","txInterpretationQuery","hash","isTxDataLoading","useApiQuery","pathParams","queryOptions","enabled","placeholderData","refetchOnMount","actions","Fragment","isPlaceholderData","action","TxInterpretation","DetailsInfoItemDivider","txDetailsActions_TxDetailsAction","protocol","amount0","amount1","text0","text1","getActionText","actionType","token0","symbol0","address0","currency","symbol","icon_url","token1","symbol1","address1","columnGap","span","noLink","noIcon","noSymbol","maxW","flexShrink","bgColor","div","to","pl","ids","NftEntity","iconSize","txDetailsActions_TxDetailsActionsRaw","TxDetailsAction","txDetailsActions_TxDetailsActions","features","txInterpretation","isEnabled","TxDetailsActionsInterpretation","TxDetailsActionsRaw","details_TxDetailsFeePerGas","txFee","gasUsed","UI","views","tx","additionalFields","fee_per_gas","decimals","toFixed","hiddenFields","fee_currency","details_TxDetailsGasPrice","gasPrice","gas_price","WEI","WEI_IN_GWEI","gwei","details_TxDetailsOther","nonce","as","ml","filter","item","TextSeparator","tx_NftTokenTransferSnippet","tokenId","base","lg","flexGrow","details_TxDetailsTokenTransfer","total","valueStr","usd","getCurrencyValue","exchangeRate","exchange_rate","accuracyUsd","NftTokenTransferSnippet","token_id","flexDir","AddressFromTo","from","overflow","TOKEN_TRANSFERS_TYPES","details_TxDetailsTokenTransfers","txHash","isOverflow","viewAllUrl","route","pathname","query","tab","transferGroups","group","TxDetailsTokenTransfer","Show","above","ssr","GridItem","LinkInternal","href","WITHDRAWAL_STATUSES","details_TxDetailsWithdrawalStatus","status","l1TxHash","includes","hasClaimButton","steps","TxEntityL1","label","rightSlot","Button","VerificationSteps","currentStep","my","lineHeight","details_TxRevertReason","props","HEX_REGEXP","test","raw","decoded","Grid","templateColumns","replace","LogDecodedInputData","tx_TxAllowedPeekers","isExpanded","expand","useBoolean","is_contract","Link","textDecorationLine","textDecorationStyle","toggle","tx_TxSocketAlert","Alert","document","location","useFetchTxInfo","onTxStatusUpdate","updateDelay","arguments","router","useRouter","queryClient","useQueryClient","socketStatus","setSocketStatus","getQueryParamString","queryResult","zkEvmRollup","TX_ZKEVM_L2","TX","isError","isPending","handleStatusUpdateMessage","invalidateQueries","queryKey","getResourceKey","handleSocketClose","handleSocketError","channel","useSocketChannel","topic","onSocketClose","onSocketError","isDisabled","useSocketMessage","handler","tx_TxDetails","error","setIsExpanded","handleCutClick","flag","scroller","scrollTo","duration","smooth","executionSuccessIconColor","throwOnResourceLoadError","resource","DataFetchAlert","addressFromTags","private_tags","public_tags","watchlist_names","Tag","tag","display_name","toAddress","created_contract","addressToTags","executionSuccessBadge","result","Tooltip","cursor","executionFailedBadge","isTestnet","mb","colSpan","TxSocketAlert","Spinner","HashStringShortenDynamic","TxStatus","errorText","method","colorScheme","isTruncated","optimisticRollup","op_withdrawals","withdrawal","TxDetailsWithdrawalStatus","l1_transaction_hash","zkevm_status","revert_reason","TxRevertReason","block","BlockEntity","number","confirmations","zkevm_batch_number","ZkEvmBatchEntityL2","timestamp","fromNow","getConfirmationDuration","durations","lower","upper","toLocaleString","confirmation_duration","execution_node","allowed_peekers","TxAllowedPeekers","DetailsSponsoredItem","TxDetailsActions","token_transfers","TxDetailsTokenTransfers","token_transfers_overflow","zkevm_sequence_hash","zkevm_verify_hash","CurrencyValue","tx_fee","stability_fee","TxFeeStability","fee","TxDetailsGasPrice","TxDetailsFeePerGas","gas_used","gas_limit","Utilization","toNumber","gas_fees","base_fee_per_gas","max_fee_per_gas","max_priority_fee_per_gas","tx_burnt_fee","burnt_fees","String","l1_gas_used","l1_gas_price","l1_fee","l1_fee_scalar","Element","TxDetailsOther","RawInputData","raw_input","decoded_input","tx_TxDetailsWrapped","TxEntity","internals_TxInternalsListItem","TX_INTERNALS_ITEMS","success","gasLimit","createdContract","typeTitle","find","ListItemMobile","HStack","spacing","internals_TxInternalsList","TxInternalsListItem","transaction_hash","TxInternalsTableItem","Tr","Td","verticalAlign","isNumeric","internals_TxInternalsTable","sort","onSortToggle","top","sortIconTransform","AddressHighlightProvider","Table","Thead","Th","transform","Tbody","tx_TxPendingAlert","getNextSortValue","Z","bind","sortFn","a","b","tx_TxInternals","txInfo","setSort","SECOND","pagination","useQueryWithPages","resourceName","options","INTERNAL_TX","next_page_params","handleSortToggle","field","TxPendingAlert","filteredData","below","TxInternalsList","Hide","TxInternalsTable","isVisible","actionBar","ActionBar","Pagination","DataListDisplay","emptyText","tx_TxLogs","LOG","LogItem","tx_TxRawTrace","isQueryEnabled","setIsQueryEnabled","rawTraces","setRawTraces","TX_RAW_TRACE","handleRawTraceMessage","payload","enableQuery","onJoin","dataToDisplay","JSON","stringify","RawDataSnippet","STATE_CHANGE_MINER","ADDRESS_PARAMS","balance_after","balance_before","change","is_miner","STATE_CHANGE_COIN","STATE_CHANGE_TOKEN","direction","TOKEN_INFO_ERC_721","TX_STATE_CHANGES","state_TxStateTokenIdList","tokenAddress","isCut","setIsCut","textDecoration","_hover","md","getStateElements","textTransform","ZERO_ADDRESS","changeDirection","isArray","firstChange","beforeBn","afterBn","differenceBn","minus","changeColor","lte","changeSign","before","wordBreak","after","nbsp","abs","tokenLink","isEqualTo","isGreaterThanOrEqualTo","TxStateTokenIdList","space","state_TxStateListItem","ListItemMobileGrid","Container","Label","Value","py","state_TxStateList","TxStateListItem","state_TxStateTableItem","state_TxStateTable","minWidth","minW","TxStateTableItem","tx_TxState","items_count","state_changes","Accordion","allowMultiple","defaultIndex","TxStateTable","TxStateList","showShadow","tx_TxSubHeading","hasTag","hasInterpretationFeature","hasInterpretation","fontFamily","AccountActionsMenu","NetworkExplorers","pathParam","getTokenFilterValue","getFilterValuesFromQuery","TOKEN_TYPE_IDS","tx_TxTokenTransfer","txsInfo","tokenTransferQuery","typeFilter","setTypeFilter","getTokenTransfersStub","filters","handleTypeFilterChange","onFilterChange","nextValue","numActiveFilters","isActionBarHidden","TokenTransferTable","TokenTransferList","TokenTransferFilter","defaultTypeFilters","onTypeFilterChange","appliedFiltersNum","filterProps","emptyFilteredText","apos","hasActiveFilters","Transaction","tabs","appProps","useAppContext","suave","wrapped","component","TxDetails","TxDetailsWrapped","TxTokenTransfer","TxInternals","TxLogs","TxState","TxRawTrace","tabIndex","useTabIndexFromQuery","tags","EntityTags","tagsBefore","tx_tag","backLink","hasGoBackLink","referrer","url","titleSecondRow","TxSubHeading","TextAd","PageTitle","contentAfter","secondRow","TabsSkeleton","RoutedTabs","__webpack_exports__","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","borderBottom","borderColor","tagsAfter","isMobile","useIsMobile","isOpen","onToggle","onClose","useDisclosure","Popover","placement","isLazy","PopoverTrigger","PopoverContent","PopoverBody","isAnimated","motion","initial","opacity","scale","animate","transitionDuration","transitionTimingFunction","paddingY","borderTopWidth","_last","borderBottomWidth","explorersLinks","explorers","explorer","paths","URL","stripTrailingSlash","baseUrl","LinkExternal","aria-label","px","h","feature","linkProps","_omit","partsProps","isExternal","L1BaseUrl","sortSequence","sequence","curIndex","findIndex","prevValue","nextIndex","verificationSteps_VerificationStep","step","isLast","isPassed","stepColor","gap","verificationSteps_VerificationSteps","currentStepIndex","VerificationStep","CheckboxGroupProvider","useCheckboxGroupContext","_chakra_ui_react_context__WEBPACK_IMPORTED_MODULE_0__","k","strict","useCheckbox","formControlProps","_chakra_ui_form_control__WEBPACK_IMPORTED_MODULE_1__","K","isReadOnly","isRequired","isInvalid","onBlur","onFocus","ariaDescribedBy","defaultChecked","isChecked","checkedProp","isFocusable","isIndeterminate","ariaLabel","ariaLabelledBy","ariaInvalid","htmlProps","omit","object","keysToOmit","clone","Object","assign","key","onChangeProp","_chakra_ui_react_use_callback_ref__WEBPACK_IMPORTED_MODULE_2__","W","onBlurProp","onFocusProp","isFocusVisible","setIsFocusVisible","react__WEBPACK_IMPORTED_MODULE_0__","useState","isFocused","setFocused","isHovered","setHovered","isActive","setActive","useEffect","_zag_js_focus_visible__WEBPACK_IMPORTED_MODULE_3__","BT","inputRef","useRef","rootIsLabelElement","setRootIsLabelElement","checkedState","setCheckedState","isControlled","handleChange","useCallback","preventDefault","checked","_chakra_ui_react_use_safe_layout_effect__WEBPACK_IMPORTED_MODULE_4__","G","indeterminate","_chakra_ui_react_use_update_effect__WEBPACK_IMPORTED_MODULE_5__","r","el","form","onreset","trulyDisabled","onKeyDown","onKeyUp","notInSync","getCheckboxProps","props2","forwardedRef","_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_6__","PB","onMouseDown","v0","onMouseUp","onMouseEnter","onMouseLeave","getRootProps","_chakra_ui_react_use_merge_refs__WEBPACK_IMPORTED_MODULE_7__","lq","node","tagName","_a","click","requestAnimationFrame","_a2","focus","preventScroll","getInputProps","required","disabled","readOnly","style","_chakra_ui_visually_hidden__WEBPACK_IMPORTED_MODULE_8__","N","getLabelProps","stopEvent","state","stopPropagation","CheckIcon","chunk_3LE6AY5Q","m","svg","viewBox","strokeWidth","stroke","strokeDasharray","points","IndeterminateIcon","x1","x2","y1","y2","CheckboxIcon","BaseIcon","controlStyles","userSelect","rootStyles","checkAnim","emotion_react_browser_esm","F4","strokeDashoffset","indeterminateOpacityAnim","indeterminateScaleAnim","Checkbox","chunk_QEVFQ4EU","chunk_6XFPBTDN","J","mergedProps","styles","chunk_T2VHL7RE","jC","ownProps","styled_system_dist","Lr","iconColor","icon","isCheckedProp","inputProps","dist","PP","chunk_HPA3SDH4","O","shouldAnimate","useInitialAnimationState","previousIsChecked","setPreviousIsChecked","react","setShouldAnimate","iconStyles","useMemo","animation","clonedIcon","cloneElement","__css","container","cx","control","marginStart","displayName","Visibility","breakpoint","hide","show","_chunk_MG6WC47T_mjs__WEBPACK_IMPORTED_MODULE_0__","_chunk_R3K6W4OF_mjs__WEBPACK_IMPORTED_MODULE_1__","_chunk_DZU5YH7Z_mjs__WEBPACK_IMPORTED_MODULE_2__","E","getBreakpoint","theme","_b","breakpoints","useQuery","_chakra_ui_system__WEBPACK_IMPORTED_MODULE_0__","F","bpBelow","bpAbove","visuallyHiddenStyle","border","clip","margin","padding"],"sourceRoot":""}