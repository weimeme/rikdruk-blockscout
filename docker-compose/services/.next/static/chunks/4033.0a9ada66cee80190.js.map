{"version":3,"file":"static/chunks/4033.0a9ada66cee80190.js","mappings":"8aA+CAA,EAAeC,EAAAA,IAAU,CA/Be,OAAC,CAAEC,UAAAA,CAAS,CAAEC,QAAAA,CAAO,CAAS,CAAAC,EAC9DC,EAAkBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,QAAS,YAE7CC,EAAgBN,EAAAA,WAAiB,CAAC,OAAC,CAAEO,MAAAA,CAAK,CAAqD,CAAAJ,EAC7FK,EAAQ,YAAaP,EAAUQ,MAAM,CAAGR,EAAUQ,MAAM,CAACC,OAAO,CAAGC,KAAAA,EAEzE,MACE,GAAAC,EAAAC,IAAA,EAACC,EAAAA,EAAWA,CAAAA,CAACC,QAAQ,WAAWC,GAAKT,EAAMU,IAAI,CAAGC,WAAU,GAACC,KAAK,KAAKf,gBAAkBA,EAAkBgB,GAAK,YAC9G,GAAAR,EAAAS,GAAA,EAACC,EAAAA,CAAKA,CAAAA,CACF,GAAGf,CAAK,CACVgB,SAAQ,GACRC,UAAYC,CAAAA,CAAQjB,EACpBkB,UAAYC,EAAAA,CAAcA,CAC1BC,WAAa3B,EAAU4B,YAAY,CACnCC,aAAa,QAEf,GAAAlB,EAAAS,GAAA,EAACU,EAAAA,CAAgBA,CAAAA,CAACC,KAAK,iCAAiCxB,MAAQA,MAGtE,EAAG,CAAEP,EAAUQ,MAAM,CAAER,EAAU4B,YAAY,CAAEzB,EAAiB,EAEhE,MACE,GAAAQ,EAAAS,GAAA,EAACY,EAAAA,EAAUA,CAAAA,CACThB,KAAK,UACLf,QAAUA,EACVgC,OAAS5B,EACT6B,MAAO,CAAEZ,SAAU,GAAMa,QAASC,EAAAA,CAAcA,GAGtD,GCuEAC,EAAetC,EAAAA,IAAU,CAvFc,OAAC,CAAEuC,eAAAA,CAAc,CAAEC,WAAAA,CAAU,CAAS,CAAArC,EACrEsC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB,CAC9BC,KAAM,SACNC,cAAe,CACblC,QAAS6B,CACX,CACF,GACM,CAAEM,aAAAA,CAAY,CAAE5C,UAAAA,CAAS,CAAEC,QAAAA,CAAO,CAAE4C,SAAAA,CAAQ,CAAEC,YAAAA,CAAW,CAAEC,MAAAA,CAAK,CAAE,CAAGP,EACrEQ,EAAWC,CAAAA,EAAAA,EAAAA,CAAAA,IAEXxC,EAAUsC,EAAM,WAEtBhD,EAAAA,SAAe,CAAC,KACd+C,EAAY,OACd,EAAG,CAAErC,EAASqC,EAAa,EAE3B,IAAMI,EAAsCnD,EAAAA,WAAiB,CAAC,MAAMoD,QAYrBC,EAOC7C,EAlB9C,GAAI,CACF,IAAM8C,EAAO,CACXC,gBAAiBH,EAAK1C,OAAO,EAEzB2C,EAAW,MAAMJ,EAAgG,uBAAwB,CAC7IO,YAAa,CAAEC,OAAQ,OAAQH,KAAAA,CAAK,EACpCI,WAAY,CAAEC,QAASC,EAAAA,CAAMA,CAACC,KAAK,CAAC7C,EAAE,CAAE8C,KAAM,UAAW,CAC3D,GAEA,GAAIT,YAAAA,EAASU,MAAM,CAAgB,CACjC,IAAMD,EAAO,iBAAOT,EAASU,MAAM,CAAgB,gBAAkBV,EAASU,MAAM,CAC9EC,EAAU,CAAC,YAAaX,EAAAA,OAAWA,CAAAA,EAAAA,EAASY,OAAO,GAAhBZ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkBW,OAAO,CAAGrD,KAAAA,CAAAA,GAAc,6BACnF,OAAOmC,EAAS,OAAQ,CAAEgB,KAAAA,EAAME,QAAAA,CAAQ,EAC1C,CAEAxB,EAAW,CAAE,GAAGa,EAASa,MAAM,CAAExD,QAAS0C,EAAK1C,OAAO,EACxD,CAAE,MAAOyD,EAAQ,CAEfrB,EAAS,OAAQ,CAAEgB,KAAM,SAAUE,QAASxD,CAAAA,OAAAA,CAAAA,EAAAA,EAAMyD,OAAO,GAAbzD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAewD,OAAO,GAAI,4BAA6B,EACrG,CAEF,EAAG,CAAEf,EAAUT,EAAYM,EAAU,EAE/BsB,EAAWvB,EAAaM,GAExBkB,EAAY,CAAC,SACTpE,EAwBGA,EAxBX,cAAQA,CAAAA,EAAAA,EAAUQ,MAAM,CAAC6D,IAAI,GAArBrE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuB6D,IAAI,EACjC,IAAK,wBACH,MAAO,GAAAlD,EAAAS,GAAA,EAACkD,OAAAA,UAAK,sDAEf,KAAK,iBACH,MAAO,GAAA3D,EAAAS,GAAA,EAACkD,OAAAA,UAAK,2EAEf,KAAK,2BACH,MAAO,GAAA3D,EAAAS,GAAA,EAACkD,OAAAA,UAAK,8EAEf,KAAK,iCAAkC,CACrC,IAAMC,EAAOC,CAAAA,EAAAA,EAAAA,CAAAA,EAAM,CAAEC,SAAU,wCAAyCC,MAAO,CAAEC,KAAMlE,CAAQ,CAAE,GACjG,MACE,GAAAE,EAAAC,IAAA,EAACgE,EAAAA,EAAGA,CAAAA,WACF,GAAAjE,EAAAS,GAAA,EAACkD,OAAAA,UAAK,4FACN,GAAA3D,EAAAS,GAAA,EAACyD,EAAAA,CAAYA,CAAAA,CAACN,KAAOA,WAAO,wBAC5B,GAAA5D,EAAAS,GAAA,EAACkD,OAAAA,UAAK,QAGZ,CACA,KAAK5D,KAAAA,EACH,OAAO,IAET,SACE,cAAOV,CAAAA,EAAAA,EAAUQ,MAAM,CAAC6D,IAAI,GAArBrE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuB+D,OAAO,CAG3C,KAEA,MACE,GAAApD,EAAAC,IAAA,EAACkE,OAAAA,CAAKC,WAAU,GAACZ,SAAWA,YAC1B,GAAAxD,EAAAS,GAAA,EAACwD,EAAAA,EAAGA,CAAAA,UAAC,gEACHR,GAAa,GAAAzD,EAAAS,GAAA,EAAC4D,EAAAA,CAAKA,CAAAA,CAAClB,OAAO,UAAU3C,GAAK,WAAMiD,IAClD,GAAAzD,EAAAS,GAAA,EAAC6D,EAA+BA,CAACjF,UAAYA,EAAYC,QAAUA,IACnE,GAAAU,EAAAC,IAAA,EAACsE,EAAAA,CAAIA,CAAAA,CAACC,WAAY,CAAEC,KAAM,aAAcC,GAAI,QAAS,EAAGlE,GAAK,EAAImE,UAAY,EAAIC,OAAS,EAAIC,QAAS,CAAEJ,KAAM,SAAUC,GAAI,KAAM,YACjI,GAAA1E,EAAAS,GAAA,EAACqE,EAAAA,CAAMA,CAAAA,CAACvE,KAAK,KAAK2C,KAAK,SAASlC,WAAa3B,EAAU4B,YAAY,CAAG8D,WAAa,WAAI,aAGvF,GAAA/E,EAAAS,GAAA,EAACuE,EAAAA,CAAgBA,CAAAA,CAAAA,QAIzB,2FClEAC,EAAe7F,EAAAA,IAAU,CAhCe,OAAC,CAAEC,UAAAA,CAAS,CAAEC,QAAAA,CAAO,CAAS,CAAAC,EAC9DC,EAAkBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,QAAS,YAE7CC,EAAgBN,EAAAA,WAAiB,CAAC,OAAC,CAAEO,MAAAA,CAAK,CAAqD,CAAAJ,EAC7FK,EAAQ,YAAaP,EAAUQ,MAAM,CAAGR,EAAUQ,MAAM,CAACuD,OAAO,CAAGrD,KAAAA,EAEzE,MACE,GAAAC,EAAAC,IAAA,EAACC,EAAAA,EAAWA,CAAAA,CAACC,QAAQ,WAAWC,GAAKT,EAAMU,IAAI,CAAGC,WAAU,GAACC,KAAK,KAAKf,gBAAkBA,YACvF,GAAAQ,EAAAS,GAAA,EAACyE,EAAAA,CAAQA,CAAAA,CACL,GAAGvF,CAAK,CACVgB,SAAQ,GACRC,UAAYC,CAAAA,CAAQjB,EACpBoB,WAAU,GACVE,aAAa,MACbiE,KAAM,CAAEV,KAAM,QAASC,GAAI,MAAO,IAEpC,GAAA1E,EAAAS,GAAA,EAACU,EAAAA,CAAgBA,CAAAA,CAACC,KAAK,kBAAkBxB,MAAQA,EAAQwF,UAAS,OAGxE,EAAG,CAAE/F,EAAUQ,MAAM,CAAEL,EAAiB,EAExC,MACE,GAAAQ,EAAAS,GAAA,EAACY,EAAAA,EAAUA,CAAAA,CACTgE,aAAa,aACbhF,KAAK,UACLf,QAAUA,EACVgC,OAAS5B,EACT6B,MAAO,CAAEZ,SAAU,EAAK,GAG9B,GC9CO,IAAM2E,EAAmB,sBC+ChC,IAAAC,EAAenG,EAAAA,IAAU,CA9BiB,OAAC,CAAEC,UAAAA,CAAS,CAAEC,QAAAA,CAAO,CAAS,CAAAC,EAChEC,EAAkBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAkB,QAAS,YAE7CC,EAAgBN,EAAAA,WAAiB,CAAC,OAAC,CAAEO,MAAAA,CAAK,CAAuD,CAAAJ,EAC/FK,EAAQ,cAAeP,EAAUQ,MAAM,CAAGR,EAAUQ,MAAM,CAAC2F,SAAS,CAAGzF,KAAAA,EAE7E,MACE,GAAAC,EAAAC,IAAA,EAACC,EAAAA,EAAWA,CAAAA,CAACC,QAAQ,WAAWC,GAAKT,EAAMU,IAAI,CAAGC,WAAU,GAACC,KAAK,KAAKf,gBAAkBA,YACvF,GAAAQ,EAAAS,GAAA,EAACC,EAAAA,CAAKA,CAAAA,CACF,GAAGf,CAAK,CACVgB,SAAQ,GACRC,UAAYC,CAAAA,CAAQjB,EACpBoB,WAAa3B,EAAU4B,YAAY,CACnCC,aAAa,QAEf,GAAAlB,EAAAS,GAAA,EAACU,EAAAA,CAAgBA,CAAAA,CAACC,KAAK,iBAAiBxB,MAAQA,MAGtD,EAAG,CAAEP,EAAUQ,MAAM,CAAER,EAAU4B,YAAY,CAAEzB,EAAiB,EAEhE,MACE,GAAAQ,EAAAS,GAAA,EAACY,EAAAA,EAAUA,CAAAA,CACThB,KAAK,YACLf,QAAUA,EACVgC,OAAS5B,EACT6B,MAAO,CAAEZ,SAAU,GAAMa,QAAS8D,CAAiB,GAGzD,GC6LAG,EAAerG,EAAAA,IAAU,CAvMgB,OAAC,CAAEU,QAAAA,CAAO,CAAE4F,eAAAA,CAAc,CAAEC,gBAAAA,CAAe,CAAEC,cAAAA,CAAa,CAAEhE,WAAAA,CAAU,CAAEiE,eAAAA,CAAc,CAAS,CAAAtG,EAChI,CAAEuG,EAAYC,EAAe,CAAG3G,EAAAA,QAAc,CAAayG,EAAiB,SAAW,UAEvF,CAAEG,KAAMC,CAAa,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,IAC1B,CAAEC,YAAAA,CAAW,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,IAElBvE,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB,CAC9BC,KAAM,SACNC,cAAe,CACboB,QAASsC,CACX,CACF,GACM,CAAEzD,aAAAA,CAAY,CAAE5C,UAAAA,CAAS,CAAEC,QAAAA,CAAO,CAAE+G,SAAAA,CAAQ,CAAEC,UAAAA,CAAS,CAAEpE,SAAAA,CAAQ,CAAEC,YAAAA,CAAW,CAAEC,MAAAA,CAAK,CAAE,CAAGP,EAE1FQ,EAAWC,CAAAA,EAAAA,EAAAA,CAAAA,IAEXkD,EAAYpD,EAAM,aACxBhD,EAAAA,SAAe,CAAC,KACd+C,EAAY,OACd,EAAG,CAAEA,EAAaqD,EAAW,EAE7B,IAAMjD,EAAsCnD,EAAAA,WAAiB,CAAC,MAAMoD,IAClE,GAAI,CACF,IAAME,EAAO,CACXC,gBAAiB7C,EACjBsD,QAASZ,EAAKY,OAAO,CACrBoC,UAAWhD,EAAKgD,SAAS,EAGrB/C,EAAW,MAAMJ,EAAqG,uBAAwB,CAClJO,YAAa,CAAEC,OAAQ,OAAQH,KAAAA,CAAK,EACpCI,WAAY,CAAEC,QAASC,EAAAA,CAAMA,CAACC,KAAK,CAAC7C,EAAE,CAAE8C,KAAM,SAAU,CAC1D,GAEA,GAAIT,YAAAA,EAASU,MAAM,CAAgB,CACjC,IAAMD,EAAO,iBAAOT,EAASU,MAAM,CAAgB,iBAAmBV,EAASU,MAAM,CACrF,OAAOjB,EAAS,OAAQ,CAAEgB,KAAAA,EAAME,QAASX,yBAAAA,EAASU,MAAM,CAA8BV,EAAS8D,aAAa,CAACC,MAAM,CAAGzG,KAAAA,CAAU,EAClI,CAEA6B,EAAWa,EAASa,MAAM,CAACmD,eAAe,CAAEX,EAC9C,CAAE,MAAOlG,EAAO,CACdsC,EAAS,OAAQ,CAAEgB,KAAM,gBAAiB,EAC5C,CACF,EAAG,CAAEpD,EAASuC,EAAUT,EAAYM,EAAU4D,EAAY,EAEpDtC,EAAWvB,EAAaM,GAExB,CAAEmE,YAAAA,CAAW,CAAEC,UAAWC,CAAS,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,EAAe,CAC3DC,UAAW,IACTT,EAAS,YAAa7D,GACtBgB,GACF,EACAuD,QAAS,GACA7E,EAAS,OAAQ,CAAEgB,KAAM,eAAgBE,QAAS,CAACxD,MAAAA,EAAAA,KAAAA,EAADA,EAAkBwD,OAAO,GAAI,4BAA6B,EAEvH,GAEM4D,EAAyB5H,EAAAA,WAAiB,CAAC,IAC/C2G,EAAckB,GACd9E,EAAY,OACd,EAAG,CAAEA,EAAa,EAEZ+E,EAAsB9H,EAAAA,WAAiB,CAAC,KAC5C+C,EAAY,QACZ8D,GACF,EAAG,CAAE9D,EAAa8D,EAAe,EAE3BkB,EAAsB/H,EAAAA,WAAiB,CAAC,KAG5C,GAFA+C,EAAY,QAER,CAACgE,EACH,OAAOjE,EAAS,OAAQ,CAAEgB,KAAM,SAAUE,QAAS,0CAA2C,GAGhG,IAAMA,EAAUkD,EAAU,WAC1BI,EAAY,CAAEtD,QAAAA,CAAQ,EACxB,EAAG,CAAEjB,EAAagE,EAAaG,EAAWI,EAAaxE,EAAU,EAE3DkF,EAAwBhI,EAAAA,WAAiB,CAAC,KAC9C+C,EAAY,QACZqB,GACF,EAAG,CAAErB,EAAaqB,EAAU,EAEtB6D,EACJ,WAAIvB,EAEA,GAAA9F,EAAAS,GAAA,EAACqE,EAAAA,CAAMA,CAAAA,CACLvE,KAAK,KACL+G,QAAUF,EACVT,UAAYtH,EAAU4B,YAAY,CAClCsG,YAAY,qBACb,WAOH,GAAAvH,EAAAS,GAAA,EAACqE,EAAAA,CAAMA,CAAAA,CACLvE,KAAK,KACL+G,QAAUnB,EAAcgB,EAAsBD,EAC9CP,UAAYtH,EAAU4B,YAAY,EAAI2F,EACtCW,YAAcX,EAAY,UAAY,qBAEpCT,EAAc,kBAAoB,mBAKpCqB,EAAgB,GAAAxH,EAAAC,IAAA,EAAC0D,OAAAA,WAAK,cAAW,GAAA3D,EAAAS,GAAA,EAACgH,EAAAA,CAAIA,CAAAA,CAAC7D,KAAK,sCAA6B,2BAEzEH,EAAY,CAAC,SACTpE,EAAR,cAAQA,CAAAA,EAAAA,EAAUQ,MAAM,CAAC6D,IAAI,GAArBrE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuB6D,IAAI,EACjC,IAAK,0BACH,MAAO,GAAAlD,EAAAS,GAAA,EAACkD,OAAAA,UAAK,yCAEf,KAAK,yBACH,MAAO,GAAA3D,EAAAS,GAAA,EAACkD,OAAAA,UAAK,2FAEf,KAAK,eACH,MAAO,GAAA3D,EAAAS,GAAA,EAACkD,OAAAA,UAAOtE,EAAUQ,MAAM,CAAC6D,IAAI,CAACN,OAAO,EAE9C,KAAK,uBAAwB,CAC3B,IAAMoD,EAASkB,CAAAA,EAAAA,EAAAA,CAAAA,EAAcrI,EAAUQ,MAAM,CAAC6D,IAAI,CAACN,OAAO,EAAI,IACxDuE,EAAkB,CAAEhC,EAAiBC,EAAe,CAACgC,MAAM,CAAC/G,SAASgH,GAAG,CAACH,EAAAA,CAAaA,EAAEI,IAAI,CAAC,MACnG,MACE,GAAA9H,EAAAC,IAAA,EAACgE,EAAAA,EAAGA,CAAAA,WACF,GAAAjE,EAAAS,GAAA,EAACkD,OAAAA,UAAK,kBACN,GAAA3D,EAAAS,GAAA,EAACkD,OAAAA,UAAO6C,IACR,GAAAxG,EAAAS,GAAA,EAACkD,OAAAA,UAAK,wFACN,GAAA3D,EAAAS,GAAA,EAACkD,OAAAA,UAAOgE,IACR,GAAA3H,EAAAS,GAAA,EAACkD,OAAAA,UAAK,8CAGZ,CACA,IAAK,iBACH,MACE,GAAA3D,EAAAC,IAAA,EAACgE,EAAAA,EAAGA,CAAAA,WACF,GAAAjE,EAAAS,GAAA,EAACkD,OAAAA,UAAK,+FACJ6D,EACF,GAAAxH,EAAAS,GAAA,EAACkD,OAAAA,UAAK,+BAIZ,MAAK5D,KAAAA,EACH,OAAO,IAEX,CACF,KAEA,MACE,GAAAC,EAAAC,IAAA,EAACkE,OAAAA,CAAKC,WAAU,GAACZ,SAAWA,YACxBC,GAAa,GAAAzD,EAAAS,GAAA,EAAC4D,EAAAA,CAAKA,CAAAA,CAAClB,OAAO,UAAU4E,GAAK,WAAMtE,IAClD,GAAAzD,EAAAC,IAAA,EAACgE,EAAAA,EAAGA,CAAAA,CAAC8D,GAAK,YACR,GAAA/H,EAAAS,GAAA,EAACkD,OAAAA,UAAK,8HACN,GAAA3D,EAAAS,GAAA,EAACgH,EAAAA,CAAIA,CAAAA,CAAC7D,KAAK,4FAA4FoE,OAAO,kBAAS,4BAGvH,GAAAhI,EAAAS,GAAA,EAACkD,OAAAA,UAAK,uGACJ6D,EACF,GAAAxH,EAAAS,GAAA,EAACkD,OAAAA,UAAK,gCAELiC,CAAAA,GAAiBD,CAAAA,GAClB,GAAA3F,EAAAC,IAAA,EAACsE,EAAAA,CAAIA,CAAAA,CAACM,QAAQ,SAASD,OAAS,EAAImD,GAAK,YACrCpC,GACA,GAAA3F,EAAAC,IAAA,EAACgE,EAAAA,EAAGA,CAAAA,WACF,GAAAjE,EAAAS,GAAA,EAACwH,EAAAA,CAAMA,CAACtE,IAAI,EAACuE,WAAa,aAAM,uBAChC,GAAAlI,EAAAS,GAAA,EAACwH,EAAAA,CAAMA,CAACtE,IAAI,WAAGgC,OAGjBC,GACA,GAAA5F,EAAAC,IAAA,EAACgE,EAAAA,EAAGA,CAAAA,WACF,GAAAjE,EAAAS,GAAA,EAACwH,EAAAA,CAAMA,CAACtE,IAAI,EAACuE,WAAa,aAAM,qBAChC,GAAAlI,EAAAS,GAAA,EAACwH,EAAAA,CAAMA,CAACtE,IAAI,WAAGiC,UAKvB,GAAA5F,EAAAC,IAAA,EAACsE,EAAAA,CAAIA,CAAAA,CAACK,OAAS,EAAIC,QAAQ,mBACzB,GAAA7E,EAAAC,IAAA,EAACkI,MAAAA,WACC,GAAAnI,EAAAS,GAAA,EAAC2H,EAAAA,CAAeA,CAAAA,CAAChH,KAAOsE,EAAiB2C,GAAG,OAAOC,QAAQ,UAC3D,GAAAtI,EAAAS,GAAA,EAAC8H,EAA+BA,CAAClJ,UAAYA,EAAYC,QAAUA,OAEnE,CAACuG,GACD,GAAA7F,EAAAC,IAAA,EAACuI,EAAAA,CAAUA,CAAAA,CAACC,SAAWzB,EAAyBC,MAAQnB,EAAawC,QAAQ,OAAOzD,QAAQ,SAASD,OAAS,YAC5G,GAAA5E,EAAAS,GAAA,EAACiI,EAAAA,CAAKA,CAAAA,CAACzB,MAAM,kBAAS,yBACtB,GAAAjH,EAAAS,GAAA,EAACiI,EAAAA,CAAKA,CAAAA,CAACzB,MAAM,oBAAW,qBAG1BnB,WAAAA,GAA2B,GAAA9F,EAAAS,GAAA,EAACkI,EAAiCA,CAACtJ,UAAYA,EAAYC,QAAUA,OAEpG,GAAAU,EAAAC,IAAA,EAACsE,EAAAA,CAAIA,CAAAA,CAACC,WAAY,CAAEC,KAAM,aAAcC,GAAI,QAAS,EAAGlE,GAAK,EAAImE,UAAY,EAAIC,OAAS,EAAIC,QAAS,CAAEJ,KAAM,SAAUC,GAAI,KAAM,YAC/H2C,EACF,GAAArH,EAAAS,GAAA,EAACuE,EAAAA,CAAgBA,CAAAA,CAAAA,QAIzB,GCvMA4D,EAAexJ,EAAAA,IAAU,CAvBc,OAAC,CAAEyJ,oBAAAA,CAAmB,CAAEC,gBAAAA,CAAe,CAAEC,QAAAA,CAAO,CAAEjJ,QAAAA,CAAO,CAAS,CAAAP,EACvG,MACE,GAAAS,EAAAC,IAAA,EAACgE,EAAAA,EAAGA,CAAAA,WACF,GAAAjE,EAAAC,IAAA,EAACoE,EAAAA,CAAKA,CAAAA,CAAClB,OAAO,UAAU6F,SAAS,OAAOC,WAAW,WAAWC,UAAU,aAAanB,GAAK,EAAIO,QAAQ,yBACpG,GAAAtI,EAAAS,GAAA,EAACkD,OAAAA,UAAK,+BACN,GAAA3D,EAAAS,GAAA,EAACwH,EAAAA,CAAMA,CAACtE,IAAI,EAACuE,WAAa,aAAQpI,IAClC,GAAAE,EAAAS,GAAA,EAACkD,OAAAA,UAAK,qBAER,GAAA3D,EAAAS,GAAA,EAAC0I,IAAAA,UAAE,2DACH,GAAAnJ,EAAAC,IAAA,EAACsE,EAAAA,CAAIA,CAAAA,CAACC,WAAW,SAAShE,GAAK,EAAImE,UAAY,EAAIqE,SAAS,OAAOpE,OAAS,YAC1E,GAAA5E,EAAAS,GAAA,EAACqE,EAAAA,CAAMA,CAAAA,CAACvE,KAAK,KAAKJ,QAAU4I,EAAU,UAAY,QAAUzB,QAAUwB,WAAkB,+BAGtFC,GACA,GAAA/I,EAAAS,GAAA,EAACqE,EAAAA,CAAMA,CAAAA,CAACvE,KAAK,KAAK+G,QAAUuB,WAAsB,+BAO5D,GCuFAO,EAAehK,EAAAA,IAAU,CA5FQ,OAAC,CAAEuC,eAAAA,CAAc,CAAE0H,OAAAA,CAAM,CAAEC,QAAAA,CAAO,CAAE9F,SAAAA,CAAQ,CAAEqF,oBAAAA,CAAmB,CAAEC,gBAAAA,CAAe,CAAES,SAAAA,CAAQ,CAAS,CAAAhK,EAC9H,CAAEiK,EAAWC,EAAc,CAAGrK,EAAAA,QAAc,CAAC,GAC7C,CAAEoD,EAAMkH,EAAS,CAAGtK,EAAAA,QAAc,CAAY,CAAEU,QAAS,GAAI4F,eAAgB,EAAG,GAEtFtG,EAAAA,SAAe,CAAC,KACdiK,GAAUM,EAAAA,EAAiB,CACzBA,EAAAA,EAAmB,CAACC,cAAc,CAClC,CAAEC,OAAQ,cAAe,YAAaN,CAAS,EAEnD,EAAG,CAAEF,EAAQE,EAAU,EAEvB,IAAMO,EAAuB1K,EAAAA,WAAiB,CAAC,IAC7CsK,EAAQK,GACRN,EAAa,GAAUO,EAAO,GAC9BL,EAAAA,EAAiB,CACfA,EAAAA,EAAmB,CAACC,cAAc,CAClC,CAAEC,OAAQ,kBAAmB,YAAaN,CAAS,EAEvD,EAAG,CAAEA,EAAU,EAETU,EAAsB7K,EAAAA,WAAiB,CAAC,CAACU,EAA0BgG,KACvEtC,EAAS1D,GACT2J,EAAa,GAAUO,EAAO,GAC9BN,EAAQ,GAAW,EAAE,GAAGM,CAAI,CAAEjB,QAASlI,CAAAA,CAAQf,EAAQoK,QAAQ,CAACC,SAAS,CAAE,GAC3ER,EAAAA,EAAiB,CACfA,EAAAA,EAAmB,CAACC,cAAc,CAClC,CAAEC,OAAQ,iBAAkB,YAAaN,EAAU,cAAezD,CAAW,EAEjF,EAAG,CAAEtC,EAAU+F,EAAU,EAEnBa,EAAqBhL,EAAAA,WAAiB,CAAC,KAC3CqK,EAAa,GAAUO,EAAO,EAChC,EAAG,EAAE,EAECK,EAAcjL,EAAAA,WAAiB,CAAC,KACpCkK,IACAG,EAAa,GACbC,EAAQ,CAAE5J,QAAS,GAAI4F,eAAgB,EAAG,EAC5C,EAAG,CAAE4D,EAAS,EAERgB,EAA0BlL,EAAAA,WAAiB,CAAC,KAChDyJ,EAAoBrG,EAAK1C,OAAO,EAChCuK,GACF,EAAG,CAAEA,EAAa7H,EAAK1C,OAAO,CAAE+I,EAAqB,EAE/C0B,EAAQ,CACZ,CACEC,MAAO,+BACPC,QAAS,GAAAzK,EAAAS,GAAA,EAACiK,EAA8BA,CAAC9I,WAAakI,EAAuBnI,eAAiBA,GAChG,EACA,CACE6I,MAAO,wBACPC,QAAS,GAAAzK,EAAAS,GAAA,EAACkK,EAAgCA,CAAG,GAAGnI,CAAI,CAAGZ,WAAaqI,IACpEW,SAAU,GAAA5K,EAAAS,GAAA,EAACkK,EAAgCA,CAAG,GAAGnI,CAAI,CAAGZ,WAAaqI,EAAsBpE,eAAc,IAC3G,EACA,CACE2E,MAAO,iCACPC,QACE,GAAAzK,EAAAS,GAAA,EAACoK,EAA8BA,CAC7B/B,gBAAkBA,EAClBD,oBAAsByB,EACtBvB,QAAUvG,EAAKuG,OAAO,CACtBjJ,QAAU0C,EAAK1C,OAAO,EAG5B,EACD,CACKgL,EAAOP,CAAK,CAACf,EAAU,CAE7B,MACE,GAAAxJ,EAAAC,IAAA,EAAC8K,EAAAA,EAAKA,CAAAA,CAAC1B,OAASA,EAASC,QAAUe,EAAc9J,KAAM,CAAEkE,KAAM,OAAQC,GAAI,IAAK,YAC9E,GAAA1E,EAAAS,GAAA,EAACuK,EAAAA,CAAYA,CAAAA,CAAAA,GACb,GAAAhL,EAAAC,IAAA,EAACgL,EAAAA,CAAYA,CAAAA,WACX,GAAAjL,EAAAC,IAAA,EAACiL,EAAAA,CAAWA,CAAAA,CAAChD,WAAW,MAAMiD,UAAU,KAAKpD,GAAK,YAC9CyB,IAAAA,GACA,GAAAxJ,EAAAS,GAAA,EAACgH,EAAAA,CAAIA,CAAAA,CAAC2D,GAAK,EAAI9D,QAAU8C,WACvB,GAAApK,EAAAS,GAAA,EAAC4K,EAAAA,CAAOA,CAAAA,CAAChL,KAAK,cAAciL,QAAU,EAAIC,UAAU,iBAAiBC,cAAc,aAGvF,GAAAxL,EAAAS,GAAA,EAACkD,OAAAA,UAAOmH,EAAKN,KAAK,MAEpB,GAAAxK,EAAAS,GAAA,EAACgL,EAAAA,CAAgBA,CAAAA,CAAAA,GACjB,GAAAzL,EAAAS,GAAA,EAACiL,EAAAA,CAASA,CAAAA,CAAC3D,GAAK,WACd,GAAA/H,EAAAS,GAAA,EAACkL,EAAAA,CAAiBA,CAAAA,CAACf,SAAWE,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAMF,QAAQ,GAAIE,EAAKL,OAAO,UACxDK,EAAKL,OAAO,UAM1B,wEClFAmB,EAAAC,CAAA,CAAe5D,CAAAA,EAAAA,EAAAA,CAAAA,EArBU,OAAC,CAAE7G,KAAAA,CAAI,CAAE0K,KAAAA,CAAI,CAAElM,MAAAA,CAAK,CAAEmM,UAAAA,CAAS,CAAEC,QAAAA,CAAO,CAAE5G,UAAAA,CAAS,CAAS,CAAA7F,EAC/E0M,EAAerM,MAAAA,EAAAA,KAAAA,EAAAA,EAAOwD,OAAO,CAMjC,OAJK6I,GAAgBrM,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAOsD,IAAI,IAAK,WACnC+I,CAAAA,EAAe,kBAIf,GAAAC,EAAAjM,IAAA,EAACkM,EAAAA,CAASA,CAAAA,CACRJ,UAAYA,EACZvH,WAAW,SACT,GAAIwH,EAAU,CAAE,aAAc,EAAK,EAAI,CAAC,CAAC,CACzC,GAAI5G,EAAY,CAAE,gBAAiB,EAAK,EAAI,CAAC,CAAC,WAE9C0G,EACF,GAAAI,EAAAzL,GAAA,EAACwH,EAAAA,CAAMA,CAACtE,IAAI,WAAGvC,IACb6K,GAAgB,GAAAC,EAAAjM,IAAA,EAACgI,EAAAA,CAAMA,CAACtE,IAAI,EAACyI,MAAQ,EAAInD,WAAW,gBAAM,MAAKgD,OAGvE,uGCtBA,IAAMI,EAAYpE,CAAAA,EAAAA,EAAAA,CAAAA,EAAO,OAAC,CAAEqE,WAAAA,CAAU,CAAEC,SAAAA,CAAQ,CAAER,UAAAA,CAAS,CAAkB,CAAAxM,EAC3E,MACE,GAAA2M,EAAAzL,GAAA,EAAC+L,EAAAA,CAAIA,CAAAA,CACHC,GAAKC,EAAAA,CAAMA,CAACvE,GAAG,CACfwE,EAAE,OACFC,QAAUN,EAAa,CAAEO,QAAS,EAAGC,MAAO,GAAK,EAAI,CAAED,QAAS,EAAGC,MAAO,CAAE,EAC5EC,QAAS,CAAEF,QAAS,EAAGC,MAAO,CAAE,EAChCE,mBAAmB,SACnBC,yBAAyB,SACzBrI,OAAS,EACTD,UAAY,EACZuI,oBAAoB,YACpB1I,WAAW,QACX2I,SAAW,EACXC,YAAY,UACZC,eAAe,MACfC,MAAO,CACLC,kBAAmB,KACrB,EACAxB,UAAYA,EACZyB,SAAS,KACTC,WAAW,gBAETlB,GAGR,GAQMmB,EAAQzF,CAAAA,EAAAA,EAAAA,CAAAA,EAAO,OAAC,CAAEsE,SAAAA,CAAQ,CAAER,UAAAA,CAAS,CAAEpF,UAAAA,CAAS,CAAc,CAAApH,EAClE,MACE,GAAA2M,EAAAzL,GAAA,EAACkN,EAAAA,CAAQA,CAAAA,CACP5B,UAAYA,EACZ6B,SAAW,CAACjH,EACZuB,WAAa,IACb2F,GAAG,MACHC,YAAY,iBAEVvB,GAGR,GAOMwB,EAAQ9F,CAAAA,EAAAA,EAAAA,CAAAA,EAAO,OAAC,CAAEsE,SAAAA,CAAQ,CAAER,UAAAA,CAAS,CAAc,CAAAxM,EACvD,MACE,GAAA2M,EAAAzL,GAAA,EAACuN,EAAAA,CAAQA,CAAAA,CACPjC,UAAYA,EACZkC,GAAG,MACHC,MAAM,iBACNC,SAAS,kBAEP5B,GAGR,EAQAX,CAAAA,EAAAC,CAAA,CAN2B,CACzBQ,UAAAA,EACAqB,MAAAA,EACAK,MAAAA,CACF,kFC/DAnC,EAAAC,CAAA,CAAe5D,CAAAA,EAAAA,EAAAA,CAAAA,EAVU,OAAC,CAAE8D,UAAAA,CAAS,CAAS,CAAAxM,EAC5C,MACE,GAAA2M,EAAAjM,IAAA,EAACgE,EAAAA,EAAGA,CAAAA,CAAC8H,UAAYA,YACf,GAAAG,EAAAzL,GAAA,EAACkD,OAAAA,UAAK,sCACN,GAAAuI,EAAAzL,GAAA,EAACgH,EAAAA,CAAIA,CAAAA,CAAC7D,KAAK,sCAA6B,wBACxC,GAAAsI,EAAAzL,GAAA,EAACkD,OAAAA,UAAK,uBAGZ","sources":["webpack://_N_E/./ui/addressVerification/fields/AddressVerificationFieldAddress.tsx","webpack://_N_E/./ui/addressVerification/steps/AddressVerificationStepAddress.tsx","webpack://_N_E/./ui/addressVerification/fields/AddressVerificationFieldMessage.tsx","webpack://_N_E/./lib/validations/signature.ts","webpack://_N_E/./ui/addressVerification/fields/AddressVerificationFieldSignature.tsx","webpack://_N_E/./ui/addressVerification/steps/AddressVerificationStepSignature.tsx","webpack://_N_E/./ui/addressVerification/steps/AddressVerificationStepSuccess.tsx","webpack://_N_E/./ui/addressVerification/AddressVerificationModal.tsx","webpack://_N_E/./ui/shared/InputPlaceholder.tsx","webpack://_N_E/./ui/shared/ListItemMobile/ListItemMobileGrid.tsx","webpack://_N_E/./ui/shared/texts/AdminSupportText.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { FormControl, Input, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\nimport type { Control, ControllerRenderProps, FormState } from 'react-hook-form';\nimport { Controller } from 'react-hook-form';\n\nimport type { AddressVerificationFormFirstStepFields, RootFields } from '../types';\n\nimport { ADDRESS_REGEXP, ADDRESS_LENGTH } from 'lib/validations/address';\nimport InputPlaceholder from 'ui/shared/InputPlaceholder';\ntype Fields = RootFields & AddressVerificationFormFirstStepFields;\n\ninterface Props {\n  formState: FormState<Fields>;\n  control: Control<Fields>;\n}\n\nconst AddressVerificationFieldAddress = ({ formState, control }: Props) => {\n  const backgroundColor = useColorModeValue('white', 'gray.900');\n\n  const renderControl = React.useCallback(({ field }: {field: ControllerRenderProps<Fields, 'address'>}) => {\n    const error = 'address' in formState.errors ? formState.errors.address : undefined;\n\n    return (\n      <FormControl variant=\"floating\" id={ field.name } isRequired size=\"md\" backgroundColor={ backgroundColor } mt={ 8 }>\n        <Input\n          { ...field }\n          required\n          isInvalid={ Boolean(error) }\n          maxLength={ ADDRESS_LENGTH }\n          isDisabled={ formState.isSubmitting }\n          autoComplete=\"off\"\n        />\n        <InputPlaceholder text=\"Smart contract address (0x...)\" error={ error }/>\n      </FormControl>\n    );\n  }, [ formState.errors, formState.isSubmitting, backgroundColor ]);\n\n  return (\n    <Controller\n      name=\"address\"\n      control={ control }\n      render={ renderControl }\n      rules={{ required: true, pattern: ADDRESS_REGEXP }}\n    />\n  );\n};\n\nexport default React.memo(AddressVerificationFieldAddress);\n","import { Alert, Box, Button, Flex } from '@chakra-ui/react';\nimport React from 'react';\nimport type { SubmitHandler } from 'react-hook-form';\nimport { useForm } from 'react-hook-form';\n\nimport type {\n  AddressVerificationResponseError,\n  AddressCheckResponseSuccess,\n  AddressCheckStatusSuccess,\n  AddressVerificationFormFirstStepFields,\n  RootFields,\n} from '../types';\n\nimport { route } from 'nextjs-routes';\n\nimport config from 'configs/app';\nimport type { ResourceError } from 'lib/api/resources';\nimport useApiFetch from 'lib/api/useApiFetch';\nimport LinkInternal from 'ui/shared/LinkInternal';\nimport AdminSupportText from 'ui/shared/texts/AdminSupportText';\n\nimport AddressVerificationFieldAddress from '../fields/AddressVerificationFieldAddress';\ntype Fields = RootFields & AddressVerificationFormFirstStepFields;\n\ninterface Props {\n  defaultAddress?: string;\n  onContinue: (data: AddressVerificationFormFirstStepFields & AddressCheckStatusSuccess) => void;\n}\n\nconst AddressVerificationStepAddress = ({ defaultAddress, onContinue }: Props) => {\n  const formApi = useForm<Fields>({\n    mode: 'onBlur',\n    defaultValues: {\n      address: defaultAddress,\n    },\n  });\n  const { handleSubmit, formState, control, setError, clearErrors, watch } = formApi;\n  const apiFetch = useApiFetch();\n\n  const address = watch('address');\n\n  React.useEffect(() => {\n    clearErrors('root');\n  }, [ address, clearErrors ]);\n\n  const onFormSubmit: SubmitHandler<Fields> = React.useCallback(async(data) => {\n    try {\n      const body = {\n        contractAddress: data.address,\n      };\n      const response = await apiFetch<'address_verification', AddressCheckResponseSuccess, AddressVerificationResponseError>('address_verification', {\n        fetchParams: { method: 'POST', body },\n        pathParams: { chainId: config.chain.id, type: ':prepare' },\n      });\n\n      if (response.status !== 'SUCCESS') {\n        const type = typeof response.status === 'number' ? 'UNKNOWN_ERROR' : response.status;\n        const message = ('payload' in response ? response.payload?.message : undefined) || 'Oops! Something went wrong';\n        return setError('root', { type, message });\n      }\n\n      onContinue({ ...response.result, address: data.address });\n    } catch (_error) {\n      const error = _error as ResourceError<AddressVerificationResponseError>;\n      setError('root', { type: 'manual', message: error.payload?.message || 'Oops! Something went wrong' });\n    }\n\n  }, [ apiFetch, onContinue, setError ]);\n\n  const onSubmit = handleSubmit(onFormSubmit);\n\n  const rootError = (() => {\n    switch (formState.errors.root?.type) {\n      case 'INVALID_ADDRESS_ERROR': {\n        return <span>Specified address either does not exist or is EOA.</span>;\n      }\n      case 'IS_OWNER_ERROR': {\n        return <span>Ownership of this contract address is already verified by this account.</span>;\n      }\n      case 'OWNERSHIP_VERIFIED_ERROR': {\n        return <span>Ownership of this contract address is already verified by another account.</span>;\n      }\n      case 'SOURCE_CODE_NOT_VERIFIED_ERROR': {\n        const href = route({ pathname: '/address/[hash]/contract-verification', query: { hash: address } });\n        return (\n          <Box>\n            <span>The contract source code you entered is not yet verified. Please follow these steps to </span>\n            <LinkInternal href={ href }>verify the contract</LinkInternal>\n            <span>.</span>\n          </Box>\n        );\n      }\n      case undefined: {\n        return null;\n      }\n      default: {\n        return formState.errors.root?.message;\n      }\n    }\n  })();\n\n  return (\n    <form noValidate onSubmit={ onSubmit }>\n      <Box>Enter the contract address you are verifying ownership for.</Box>\n      { rootError && <Alert status=\"warning\" mt={ 3 }>{ rootError }</Alert> }\n      <AddressVerificationFieldAddress formState={ formState } control={ control }/>\n      <Flex alignItems={{ base: 'flex-start', lg: 'center' }} mt={ 8 } columnGap={ 5 } rowGap={ 2 } flexDir={{ base: 'column', lg: 'row' }}>\n        <Button size=\"lg\" type=\"submit\" isDisabled={ formState.isSubmitting } flexShrink={ 0 }>\n            Continue\n        </Button>\n        <AdminSupportText/>\n      </Flex>\n    </form>\n  );\n};\n\nexport default React.memo(AddressVerificationStepAddress);\n","import { FormControl, Textarea, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\nimport type { Control, ControllerRenderProps, FormState } from 'react-hook-form';\nimport { Controller } from 'react-hook-form';\n\nimport type { AddressVerificationFormSecondStepFields, RootFields } from '../types';\n\nimport InputPlaceholder from 'ui/shared/InputPlaceholder';\n\ntype Fields = RootFields & AddressVerificationFormSecondStepFields;\n\ninterface Props {\n  formState: FormState<Fields>;\n  control: Control<Fields>;\n}\n\nconst AddressVerificationFieldMessage = ({ formState, control }: Props) => {\n  const backgroundColor = useColorModeValue('white', 'gray.900');\n\n  const renderControl = React.useCallback(({ field }: {field: ControllerRenderProps<Fields, 'message'>}) => {\n    const error = 'message' in formState.errors ? formState.errors.message : undefined;\n\n    return (\n      <FormControl variant=\"floating\" id={ field.name } isRequired size=\"md\" backgroundColor={ backgroundColor }>\n        <Textarea\n          { ...field }\n          required\n          isInvalid={ Boolean(error) }\n          isDisabled\n          autoComplete=\"off\"\n          maxH={{ base: '140px', lg: '80px' }}\n        />\n        <InputPlaceholder text=\"Message to sign\" error={ error } isInModal/>\n      </FormControl>\n    );\n  }, [ formState.errors, backgroundColor ]);\n\n  return (\n    <Controller\n      defaultValue=\"some value\"\n      name=\"message\"\n      control={ control }\n      render={ renderControl }\n      rules={{ required: true }}\n    />\n  );\n};\n\nexport default React.memo(AddressVerificationFieldMessage);\n","export const SIGNATURE_REGEXP = /^0x[a-fA-F\\d]{130}$/;\n","import { FormControl, Input, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\nimport type { Control, ControllerRenderProps, FormState } from 'react-hook-form';\nimport { Controller } from 'react-hook-form';\n\nimport type { AddressVerificationFormSecondStepFields, RootFields } from '../types';\n\nimport { SIGNATURE_REGEXP } from 'lib/validations/signature';\nimport InputPlaceholder from 'ui/shared/InputPlaceholder';\n\ntype Fields = RootFields & AddressVerificationFormSecondStepFields;\n\ninterface Props {\n  formState: FormState<Fields>;\n  control: Control<Fields>;\n}\n\nconst AddressVerificationFieldSignature = ({ formState, control }: Props) => {\n  const backgroundColor = useColorModeValue('white', 'gray.900');\n\n  const renderControl = React.useCallback(({ field }: {field: ControllerRenderProps<Fields, 'signature'>}) => {\n    const error = 'signature' in formState.errors ? formState.errors.signature : undefined;\n\n    return (\n      <FormControl variant=\"floating\" id={ field.name } isRequired size=\"md\" backgroundColor={ backgroundColor }>\n        <Input\n          { ...field }\n          required\n          isInvalid={ Boolean(error) }\n          isDisabled={ formState.isSubmitting }\n          autoComplete=\"off\"\n        />\n        <InputPlaceholder text=\"Signature hash\" error={ error }/>\n      </FormControl>\n    );\n  }, [ formState.errors, formState.isSubmitting, backgroundColor ]);\n\n  return (\n    <Controller\n      name=\"signature\"\n      control={ control }\n      render={ renderControl }\n      rules={{ required: true, pattern: SIGNATURE_REGEXP }}\n    />\n  );\n};\n\nexport default React.memo(AddressVerificationFieldSignature);\n","import { Alert, Box, Button, chakra, Flex, Link, Radio, RadioGroup } from '@chakra-ui/react';\nimport { useWeb3Modal } from '@web3modal/wagmi/react';\nimport React from 'react';\nimport type { SubmitHandler } from 'react-hook-form';\nimport { useForm } from 'react-hook-form';\nimport { useSignMessage, useAccount } from 'wagmi';\n\nimport type {\n  AddressVerificationFormSecondStepFields,\n  AddressCheckStatusSuccess,\n  AddressVerificationFormFirstStepFields,\n  RootFields,\n  AddressVerificationResponseError,\n  AddressValidationResponseSuccess,\n} from '../types';\nimport type { VerifiedAddress } from 'types/api/account';\n\nimport config from 'configs/app';\nimport useApiFetch from 'lib/api/useApiFetch';\nimport shortenString from 'lib/shortenString';\nimport CopyToClipboard from 'ui/shared/CopyToClipboard';\nimport AdminSupportText from 'ui/shared/texts/AdminSupportText';\n\nimport AddressVerificationFieldMessage from '../fields/AddressVerificationFieldMessage';\nimport AddressVerificationFieldSignature from '../fields/AddressVerificationFieldSignature';\n\ntype Fields = RootFields & AddressVerificationFormSecondStepFields;\n\ntype SignMethod = 'wallet' | 'manual';\n\ninterface Props extends AddressVerificationFormFirstStepFields, AddressCheckStatusSuccess{\n  onContinue: (newItem: VerifiedAddress, signMethod: SignMethod) => void;\n  noWeb3Provider?: boolean;\n}\n\nconst AddressVerificationStepSignature = ({ address, signingMessage, contractCreator, contractOwner, onContinue, noWeb3Provider }: Props) => {\n  const [ signMethod, setSignMethod ] = React.useState<SignMethod>(noWeb3Provider ? 'manual' : 'wallet');\n\n  const { open: openWeb3Modal } = useWeb3Modal();\n  const { isConnected } = useAccount();\n\n  const formApi = useForm<Fields>({\n    mode: 'onBlur',\n    defaultValues: {\n      message: signingMessage,\n    },\n  });\n  const { handleSubmit, formState, control, setValue, getValues, setError, clearErrors, watch } = formApi;\n\n  const apiFetch = useApiFetch();\n\n  const signature = watch('signature');\n  React.useEffect(() => {\n    clearErrors('root');\n  }, [ clearErrors, signature ]);\n\n  const onFormSubmit: SubmitHandler<Fields> = React.useCallback(async(data) => {\n    try {\n      const body = {\n        contractAddress: address,\n        message: data.message,\n        signature: data.signature,\n      };\n\n      const response = await apiFetch<'address_verification', AddressValidationResponseSuccess, AddressVerificationResponseError>('address_verification', {\n        fetchParams: { method: 'POST', body },\n        pathParams: { chainId: config.chain.id, type: ':verify' },\n      });\n\n      if (response.status !== 'SUCCESS') {\n        const type = typeof response.status === 'number' ? 'UNKNOWN_STATUS' : response.status;\n        return setError('root', { type, message: response.status === 'INVALID_SIGNER_ERROR' ? response.invalidSigner.signer : undefined });\n      }\n\n      onContinue(response.result.verifiedAddress, signMethod);\n    } catch (error) {\n      setError('root', { type: 'UNKNOWN_STATUS' });\n    }\n  }, [ address, apiFetch, onContinue, setError, signMethod ]);\n\n  const onSubmit = handleSubmit(onFormSubmit);\n\n  const { signMessage, isLoading: isSigning } = useSignMessage({\n    onSuccess: (data) => {\n      setValue('signature', data);\n      onSubmit();\n    },\n    onError: (error) => {\n      return setError('root', { type: 'SIGNING_FAIL', message: (error as Error)?.message || 'Oops! Something went wrong' });\n    },\n  });\n\n  const handleSignMethodChange = React.useCallback((value: typeof signMethod) => {\n    setSignMethod(value);\n    clearErrors('root');\n  }, [ clearErrors ]);\n\n  const handleOpenWeb3Modal = React.useCallback(() => {\n    clearErrors('root');\n    openWeb3Modal();\n  }, [ clearErrors, openWeb3Modal ]);\n\n  const handleWeb3SignClick = React.useCallback(() => {\n    clearErrors('root');\n\n    if (!isConnected) {\n      return setError('root', { type: 'manual', message: 'Please connect to your Web3 wallet first' });\n    }\n\n    const message = getValues('message');\n    signMessage({ message });\n  }, [ clearErrors, isConnected, getValues, signMessage, setError ]);\n\n  const handleManualSignClick = React.useCallback(() => {\n    clearErrors('root');\n    onSubmit();\n  }, [ clearErrors, onSubmit ]);\n\n  const button = (() => {\n    if (signMethod === 'manual') {\n      return (\n        <Button\n          size=\"lg\"\n          onClick={ handleManualSignClick }\n          isLoading={ formState.isSubmitting }\n          loadingText=\"Verifying\"\n        >\n          Verify\n        </Button>\n      );\n    }\n\n    return (\n      <Button\n        size=\"lg\"\n        onClick={ isConnected ? handleWeb3SignClick : handleOpenWeb3Modal }\n        isLoading={ formState.isSubmitting || isSigning }\n        loadingText={ isSigning ? 'Signing' : 'Verifying' }\n      >\n        { isConnected ? 'Sign and verify' : 'Connect wallet' }\n      </Button>\n    );\n  })();\n\n  const contactUsLink = <span>contact us <Link href=\"mailto:help@blockscout.com\">help@blockscout.com</Link></span>;\n\n  const rootError = (() => {\n    switch (formState.errors.root?.type) {\n      case 'INVALID_SIGNATURE_ERROR': {\n        return <span>The signature could not be processed.</span>;\n      }\n      case 'VALIDITY_EXPIRED_ERROR': {\n        return <span>This verification message has expired. Add the contract address to restart the process.</span>;\n      }\n      case 'SIGNING_FAIL': {\n        return <span>{ formState.errors.root.message }</span>;\n      }\n      case 'INVALID_SIGNER_ERROR': {\n        const signer = shortenString(formState.errors.root.message || '');\n        const expectedSigners = [ contractCreator, contractOwner ].filter(Boolean).map(shortenString).join(', ');\n        return (\n          <Box>\n            <span>This address </span>\n            <span>{ signer }</span>\n            <span> is not a creator/owner of the requested contract and cannot claim ownership. Only </span>\n            <span>{ expectedSigners }</span>\n            <span> can verify ownership of this contract.</span>\n          </Box>\n        );\n      }\n      case 'UNKNOWN_STATUS': {\n        return (\n          <Box>\n            <span>We are not able to process the verify account ownership for this contract address. Kindly </span>\n            { contactUsLink }\n            <span> for further assistance.</span>\n          </Box>\n        );\n      }\n      case undefined: {\n        return null;\n      }\n    }\n  })();\n\n  return (\n    <form noValidate onSubmit={ onSubmit }>\n      { rootError && <Alert status=\"warning\" mb={ 6 }>{ rootError }</Alert> }\n      <Box mb={ 8 }>\n        <span>Please select the address to sign and copy the message and sign it using the Blockscout message provider of your choice. </span>\n        <Link href=\"https://docs.blockscout.com/for-users/my-account/verified-addresses/copy-and-sign-message\" target=\"_blank\">\n          Additional instructions\n        </Link>\n        <span>. If you do not see your address here but are sure that you are the owner of the contract, kindly </span>\n        { contactUsLink }\n        <span> for further assistance.</span>\n      </Box>\n      { (contractOwner || contractCreator) && (\n        <Flex flexDir=\"column\" rowGap={ 4 } mb={ 4 }>\n          { contractCreator && (\n            <Box>\n              <chakra.span fontWeight={ 600 }>Contract creator: </chakra.span>\n              <chakra.span>{ contractCreator }</chakra.span>\n            </Box>\n          ) }\n          { contractOwner && (\n            <Box>\n              <chakra.span fontWeight={ 600 }>Contract owner: </chakra.span>\n              <chakra.span>{ contractOwner }</chakra.span>\n            </Box>\n          ) }\n        </Flex>\n      ) }\n      <Flex rowGap={ 5 } flexDir=\"column\">\n        <div>\n          <CopyToClipboard text={ signingMessage } ml=\"auto\" display=\"block\"/>\n          <AddressVerificationFieldMessage formState={ formState } control={ control }/>\n        </div>\n        { !noWeb3Provider && (\n          <RadioGroup onChange={ handleSignMethodChange } value={ signMethod } display=\"flex\" flexDir=\"column\" rowGap={ 4 }>\n            <Radio value=\"wallet\">Sign via Web3 wallet</Radio>\n            <Radio value=\"manually\">Sign manually</Radio>\n          </RadioGroup>\n        ) }\n        { signMethod === 'manual' && <AddressVerificationFieldSignature formState={ formState } control={ control }/> }\n      </Flex>\n      <Flex alignItems={{ base: 'flex-start', lg: 'center' }} mt={ 8 } columnGap={ 5 } rowGap={ 2 } flexDir={{ base: 'column', lg: 'row' }}>\n        { button }\n        <AdminSupportText/>\n      </Flex>\n    </form>\n  );\n};\n\nexport default React.memo(AddressVerificationStepSignature);\n","import { Alert, Box, Button, chakra, Flex } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface Props {\n  onShowListClick: () => void;\n  onAddTokenInfoClick: () => void;\n  isToken?: boolean;\n  address: string;\n}\n\nconst AddressVerificationStepSuccess = ({ onAddTokenInfoClick, onShowListClick, isToken, address }: Props) => {\n  return (\n    <Box>\n      <Alert status=\"success\" flexWrap=\"wrap\" whiteSpace=\"pre-wrap\" wordBreak=\"break-word\" mb={ 3 } display=\"inline-block\">\n        <span>The address ownership for </span>\n        <chakra.span fontWeight={ 700 }>{ address }</chakra.span>\n        <span> is verified.</span>\n      </Alert>\n      <p>You may now submit the “Add token information” request</p>\n      <Flex alignItems=\"center\" mt={ 8 } columnGap={ 5 } flexWrap=\"wrap\" rowGap={ 5 }>\n        <Button size=\"lg\" variant={ isToken ? 'outline' : 'solid' } onClick={ onShowListClick }>\n          View my verified addresses\n        </Button>\n        { isToken && (\n          <Button size=\"lg\" onClick={ onAddTokenInfoClick }>\n            Add token information\n          </Button>\n        ) }\n      </Flex>\n    </Box>\n  );\n};\n\nexport default React.memo(AddressVerificationStepSuccess);\n","import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Link } from '@chakra-ui/react';\nimport React from 'react';\n\nimport type { AddressVerificationFormFirstStepFields, AddressCheckStatusSuccess } from './types';\nimport type { VerifiedAddress } from 'types/api/account';\n\nimport * as mixpanel from 'lib/mixpanel/index';\nimport IconSvg from 'ui/shared/IconSvg';\nimport Web3ModalProvider from 'ui/shared/Web3ModalProvider';\n\nimport AddressVerificationStepAddress from './steps/AddressVerificationStepAddress';\nimport AddressVerificationStepSignature from './steps/AddressVerificationStepSignature';\nimport AddressVerificationStepSuccess from './steps/AddressVerificationStepSuccess';\n\ntype StateData = AddressVerificationFormFirstStepFields & AddressCheckStatusSuccess & { isToken?: boolean };\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (address: VerifiedAddress) => void;\n  onAddTokenInfoClick: (address: string) => void;\n  onShowListClick: () => void;\n  defaultAddress?: string;\n  pageType: string;\n}\n\nconst AddressVerificationModal = ({ defaultAddress, isOpen, onClose, onSubmit, onAddTokenInfoClick, onShowListClick, pageType }: Props) => {\n  const [ stepIndex, setStepIndex ] = React.useState(0);\n  const [ data, setData ] = React.useState<StateData>({ address: '', signingMessage: '' });\n\n  React.useEffect(() => {\n    isOpen && mixpanel.logEvent(\n      mixpanel.EventTypes.VERIFY_ADDRESS,\n      { Action: 'Form opened', 'Page type': pageType },\n    );\n  }, [ isOpen, pageType ]);\n\n  const handleGoToSecondStep = React.useCallback((firstStepResult: typeof data) => {\n    setData(firstStepResult);\n    setStepIndex((prev) => prev + 1);\n    mixpanel.logEvent(\n      mixpanel.EventTypes.VERIFY_ADDRESS,\n      { Action: 'Address entered', 'Page type': pageType },\n    );\n  }, [ pageType ]);\n\n  const handleGoToThirdStep = React.useCallback((address: VerifiedAddress, signMethod: 'wallet' | 'manual') => {\n    onSubmit(address);\n    setStepIndex((prev) => prev + 1);\n    setData((prev) => ({ ...prev, isToken: Boolean(address.metadata.tokenName) }));\n    mixpanel.logEvent(\n      mixpanel.EventTypes.VERIFY_ADDRESS,\n      { Action: 'Sign ownership', 'Page type': pageType, 'Sign method': signMethod },\n    );\n  }, [ onSubmit, pageType ]);\n\n  const handleGoToPrevStep = React.useCallback(() => {\n    setStepIndex((prev) => prev - 1);\n  }, []);\n\n  const handleClose = React.useCallback(() => {\n    onClose();\n    setStepIndex(0);\n    setData({ address: '', signingMessage: '' });\n  }, [ onClose ]);\n\n  const handleAddTokenInfoClick = React.useCallback(() => {\n    onAddTokenInfoClick(data.address);\n    handleClose();\n  }, [ handleClose, data.address, onAddTokenInfoClick ]);\n\n  const steps = [\n    {\n      title: 'Verify new address ownership',\n      content: <AddressVerificationStepAddress onContinue={ handleGoToSecondStep } defaultAddress={ defaultAddress }/>,\n    },\n    {\n      title: 'Copy and sign message',\n      content: <AddressVerificationStepSignature { ...data } onContinue={ handleGoToThirdStep }/>,\n      fallback: <AddressVerificationStepSignature { ...data } onContinue={ handleGoToThirdStep } noWeb3Provider/>,\n    },\n    {\n      title: 'Congrats! Address is verified.',\n      content: (\n        <AddressVerificationStepSuccess\n          onShowListClick={ onShowListClick }\n          onAddTokenInfoClick={ handleAddTokenInfoClick }\n          isToken={ data.isToken }\n          address={ data.address }\n        />\n      ),\n    },\n  ];\n  const step = steps[stepIndex];\n\n  return (\n    <Modal isOpen={ isOpen } onClose={ handleClose } size={{ base: 'full', lg: 'md' }}>\n      <ModalOverlay/>\n      <ModalContent>\n        <ModalHeader fontWeight=\"500\" textStyle=\"h3\" mb={ 6 }>\n          { stepIndex !== 0 && (\n            <Link mr={ 3 } onClick={ handleGoToPrevStep }>\n              <IconSvg name=\"arrows/east\" boxSize={ 6 } transform=\"rotate(180deg)\" verticalAlign=\"middle\"/>\n            </Link>\n          ) }\n          <span>{ step.title }</span>\n        </ModalHeader>\n        <ModalCloseButton/>\n        <ModalBody mb={ 0 }>\n          <Web3ModalProvider fallback={ step?.fallback || step.content }>\n            { step.content }\n          </Web3ModalProvider>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default React.memo(AddressVerificationModal);\n","import { FormLabel, chakra } from '@chakra-ui/react';\nimport React from 'react';\nimport type { FieldError } from 'react-hook-form';\n\ninterface Props {\n  text: string;\n  icon?: React.ReactNode;\n  error?: Partial<FieldError>;\n  className?: string;\n  isFancy?: boolean;\n  isInModal?: boolean;\n}\n\nconst InputPlaceholder = ({ text, icon, error, className, isFancy, isInModal }: Props) => {\n  let errorMessage = error?.message;\n\n  if (!errorMessage && error?.type === 'pattern') {\n    errorMessage = 'Invalid format';\n  }\n\n  return (\n    <FormLabel\n      className={ className }\n      alignItems=\"center\"\n      { ...(isFancy ? { 'data-fancy': true } : {}) }\n      { ...(isInModal ? { 'data-in-modal': true } : {}) }\n    >\n      { icon }\n      <chakra.span>{ text }</chakra.span>\n      { errorMessage && <chakra.span order={ 3 } whiteSpace=\"pre\"> - { errorMessage }</chakra.span> }\n    </FormLabel>\n  );\n};\n\nexport default chakra(InputPlaceholder);\n","import { Grid, chakra, GridItem, Skeleton } from '@chakra-ui/react';\nimport { motion } from 'framer-motion';\nimport React from 'react';\n\ninterface ContainerProps {\n  className?: string;\n  isAnimated?: boolean;\n  children: React.ReactNode;\n}\n\nconst Container = chakra(({ isAnimated, children, className }: ContainerProps) => {\n  return (\n    <Grid\n      as={ motion.div }\n      w=\"100%\"\n      initial={ isAnimated ? { opacity: 0, scale: 0.97 } : { opacity: 1, scale: 1 } }\n      animate={{ opacity: 1, scale: 1 }}\n      transitionDuration=\"normal\"\n      transitionTimingFunction=\"linear\"\n      rowGap={ 2 }\n      columnGap={ 2 }\n      gridTemplateColumns=\"86px auto\"\n      alignItems=\"start\"\n      paddingY={ 4 }\n      borderColor=\"divider\"\n      borderTopWidth=\"1px\"\n      _last={{\n        borderBottomWidth: '1px',\n      }}\n      className={ className }\n      fontSize=\"sm\"\n      lineHeight=\"20px\"\n    >\n      { children }\n    </Grid>\n  );\n});\n\ninterface LabelProps {\n  className?: string;\n  children: React.ReactNode;\n  isLoading?: boolean;\n}\n\nconst Label = chakra(({ children, className, isLoading }: LabelProps) => {\n  return (\n    <Skeleton\n      className={ className }\n      isLoaded={ !isLoading }\n      fontWeight={ 500 }\n      my=\"5px\"\n      justifySelf=\"start\"\n    >\n      { children }\n    </Skeleton>\n  );\n});\n\ninterface ValueProps {\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst Value = chakra(({ children, className }: ValueProps) => {\n  return (\n    <GridItem\n      className={ className }\n      py=\"5px\"\n      color=\"text_secondary\"\n      overflow=\"hidden\"\n    >\n      { children }\n    </GridItem>\n  );\n});\n\nconst ListItemMobileGrid = {\n  Container,\n  Label,\n  Value,\n};\n\nexport default ListItemMobileGrid;\n","import { Box, Link, chakra } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface Props {\n  className?: string;\n}\n\nconst AdminSupportText = ({ className }: Props) => {\n  return (\n    <Box className={ className }>\n      <span>Need help? Contact admin team at </span>\n      <Link href=\"mailto:help@blockscout.com\">help@blockscout.com</Link>\n      <span> for assistance!</span>\n    </Box>\n  );\n};\n\nexport default chakra(AdminSupportText);\n"],"names":["fields_AddressVerificationFieldAddress","React","formState","control","param","backgroundColor","useColorModeValue","renderControl","field","error","errors","address","undefined","jsx_runtime","jsxs","FormControl","variant","id","name","isRequired","size","mt","jsx","Input","required","isInvalid","Boolean","maxLength","ADDRESS_LENGTH","isDisabled","isSubmitting","autoComplete","InputPlaceholder","text","Controller","render","rules","pattern","ADDRESS_REGEXP","steps_AddressVerificationStepAddress","defaultAddress","onContinue","formApi","useForm","mode","defaultValues","handleSubmit","setError","clearErrors","watch","apiFetch","useApiFetch","onFormSubmit","data","response","body","contractAddress","fetchParams","method","pathParams","chainId","config","chain","type","status","message","payload","result","_error","onSubmit","rootError","root","span","href","route","pathname","query","hash","Box","LinkInternal","form","noValidate","Alert","AddressVerificationFieldAddress","Flex","alignItems","base","lg","columnGap","rowGap","flexDir","Button","flexShrink","AdminSupportText","fields_AddressVerificationFieldMessage","Textarea","maxH","isInModal","defaultValue","SIGNATURE_REGEXP","fields_AddressVerificationFieldSignature","signature","steps_AddressVerificationStepSignature","signingMessage","contractCreator","contractOwner","noWeb3Provider","signMethod","setSignMethod","open","openWeb3Modal","useWeb3Modal","isConnected","useAccount","setValue","getValues","invalidSigner","signer","verifiedAddress","signMessage","isLoading","isSigning","useSignMessage","onSuccess","onError","handleSignMethodChange","value","handleOpenWeb3Modal","handleWeb3SignClick","handleManualSignClick","button","onClick","loadingText","contactUsLink","Link","shortenString","expectedSigners","filter","map","join","mb","target","chakra","fontWeight","div","CopyToClipboard","ml","display","AddressVerificationFieldMessage","RadioGroup","onChange","Radio","AddressVerificationFieldSignature","steps_AddressVerificationStepSuccess","onAddTokenInfoClick","onShowListClick","isToken","flexWrap","whiteSpace","wordBreak","p","addressVerification_AddressVerificationModal","isOpen","onClose","pageType","stepIndex","setStepIndex","setData","mixpanel","VERIFY_ADDRESS","Action","handleGoToSecondStep","firstStepResult","prev","handleGoToThirdStep","metadata","tokenName","handleGoToPrevStep","handleClose","handleAddTokenInfoClick","steps","title","content","AddressVerificationStepAddress","AddressVerificationStepSignature","fallback","AddressVerificationStepSuccess","step","Modal","ModalOverlay","ModalContent","ModalHeader","textStyle","mr","IconSvg","boxSize","transform","verticalAlign","ModalCloseButton","ModalBody","Web3ModalProvider","__webpack_exports__","Z","icon","className","isFancy","errorMessage","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","FormLabel","order","Container","isAnimated","children","Grid","as","motion","w","initial","opacity","scale","animate","transitionDuration","transitionTimingFunction","gridTemplateColumns","paddingY","borderColor","borderTopWidth","_last","borderBottomWidth","fontSize","lineHeight","Label","Skeleton","isLoaded","my","justifySelf","Value","GridItem","py","color","overflow"],"sourceRoot":""}