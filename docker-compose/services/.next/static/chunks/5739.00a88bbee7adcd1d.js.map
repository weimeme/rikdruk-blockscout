{"version":3,"file":"static/chunks/5739.00a88bbee7adcd1d.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@graphiql/react/dist/foldgutter.es.js","webpack://_N_E/<anon>"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { a as codemirror } from \"./codemirror.es.js\";\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: \"Module\" }));\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar foldgutter$2 = { exports: {} };\nvar foldcode = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports);\n  })(function(CodeMirror) {\n    function doFold(cm, pos, options, force) {\n      if (options && options.call) {\n        var finder = options;\n        options = null;\n      } else {\n        var finder = getOption(cm, options, \"rangeFinder\");\n      }\n      if (typeof pos == \"number\")\n        pos = CodeMirror.Pos(pos, 0);\n      var minSize = getOption(cm, options, \"minFoldSize\");\n      function getRange(allowFolded) {\n        var range2 = finder(cm, pos);\n        if (!range2 || range2.to.line - range2.from.line < minSize)\n          return null;\n        if (force === \"fold\")\n          return range2;\n        var marks = cm.findMarksAt(range2.from);\n        for (var i = 0; i < marks.length; ++i) {\n          if (marks[i].__isFold) {\n            if (!allowFolded)\n              return null;\n            range2.cleared = true;\n            marks[i].clear();\n          }\n        }\n        return range2;\n      }\n      __name(getRange, \"getRange\");\n      var range = getRange(true);\n      if (getOption(cm, options, \"scanUp\"))\n        while (!range && pos.line > cm.firstLine()) {\n          pos = CodeMirror.Pos(pos.line - 1, 0);\n          range = getRange(false);\n        }\n      if (!range || range.cleared || force === \"unfold\")\n        return;\n      var myWidget = makeWidget(cm, options, range);\n      CodeMirror.on(myWidget, \"mousedown\", function(e) {\n        myRange.clear();\n        CodeMirror.e_preventDefault(e);\n      });\n      var myRange = cm.markText(range.from, range.to, {\n        replacedWith: myWidget,\n        clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n        __isFold: true\n      });\n      myRange.on(\"clear\", function(from, to) {\n        CodeMirror.signal(cm, \"unfold\", cm, from, to);\n      });\n      CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n    }\n    __name(doFold, \"doFold\");\n    function makeWidget(cm, options, range) {\n      var widget = getOption(cm, options, \"widget\");\n      if (typeof widget == \"function\") {\n        widget = widget(range.from, range.to);\n      }\n      if (typeof widget == \"string\") {\n        var text = document.createTextNode(widget);\n        widget = document.createElement(\"span\");\n        widget.appendChild(text);\n        widget.className = \"CodeMirror-foldmarker\";\n      } else if (widget) {\n        widget = widget.cloneNode(true);\n      }\n      return widget;\n    }\n    __name(makeWidget, \"makeWidget\");\n    CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n      return function(cm, pos) {\n        doFold(cm, pos, { rangeFinder, widget });\n      };\n    };\n    CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n      doFold(this, pos, options, force);\n    });\n    CodeMirror.defineExtension(\"isFolded\", function(pos) {\n      var marks = this.findMarksAt(pos);\n      for (var i = 0; i < marks.length; ++i)\n        if (marks[i].__isFold)\n          return true;\n    });\n    CodeMirror.commands.toggleFold = function(cm) {\n      cm.foldCode(cm.getCursor());\n    };\n    CodeMirror.commands.fold = function(cm) {\n      cm.foldCode(cm.getCursor(), null, \"fold\");\n    };\n    CodeMirror.commands.unfold = function(cm) {\n      cm.foldCode(cm.getCursor(), { scanUp: false }, \"unfold\");\n    };\n    CodeMirror.commands.foldAll = function(cm) {\n      cm.operation(function() {\n        for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n          cm.foldCode(CodeMirror.Pos(i, 0), { scanUp: false }, \"fold\");\n      });\n    };\n    CodeMirror.commands.unfoldAll = function(cm) {\n      cm.operation(function() {\n        for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n          cm.foldCode(CodeMirror.Pos(i, 0), { scanUp: false }, \"unfold\");\n      });\n    };\n    CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n      var funcs = Array.prototype.slice.call(arguments, 0);\n      return function(cm, start) {\n        for (var i = 0; i < funcs.length; ++i) {\n          var found = funcs[i](cm, start);\n          if (found)\n            return found;\n        }\n      };\n    });\n    CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n      var helpers = cm.getHelpers(start, \"fold\");\n      for (var i = 0; i < helpers.length; i++) {\n        var cur = helpers[i](cm, start);\n        if (cur)\n          return cur;\n      }\n    });\n    var defaultOptions = {\n      rangeFinder: CodeMirror.fold.auto,\n      widget: \"\\u2194\",\n      minFoldSize: 0,\n      scanUp: false,\n      clearOnEnter: true\n    };\n    CodeMirror.defineOption(\"foldOptions\", null);\n    function getOption(cm, options, name) {\n      if (options && options[name] !== void 0)\n        return options[name];\n      var editorOptions = cm.options.foldOptions;\n      if (editorOptions && editorOptions[name] !== void 0)\n        return editorOptions[name];\n      return defaultOptions[name];\n    }\n    __name(getOption, \"getOption\");\n    CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n      return getOption(this, options, name);\n    });\n  });\n})();\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports, foldcode.exports);\n  })(function(CodeMirror) {\n    CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n      if (old && old != CodeMirror.Init) {\n        cm.clearGutter(cm.state.foldGutter.options.gutter);\n        cm.state.foldGutter = null;\n        cm.off(\"gutterClick\", onGutterClick);\n        cm.off(\"changes\", onChange);\n        cm.off(\"viewportChange\", onViewportChange);\n        cm.off(\"fold\", onFold);\n        cm.off(\"unfold\", onFold);\n        cm.off(\"swapDoc\", onChange);\n      }\n      if (val) {\n        cm.state.foldGutter = new State(parseOptions(val));\n        updateInViewport(cm);\n        cm.on(\"gutterClick\", onGutterClick);\n        cm.on(\"changes\", onChange);\n        cm.on(\"viewportChange\", onViewportChange);\n        cm.on(\"fold\", onFold);\n        cm.on(\"unfold\", onFold);\n        cm.on(\"swapDoc\", onChange);\n      }\n    });\n    var Pos = CodeMirror.Pos;\n    function State(options) {\n      this.options = options;\n      this.from = this.to = 0;\n    }\n    __name(State, \"State\");\n    function parseOptions(opts) {\n      if (opts === true)\n        opts = {};\n      if (opts.gutter == null)\n        opts.gutter = \"CodeMirror-foldgutter\";\n      if (opts.indicatorOpen == null)\n        opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n      if (opts.indicatorFolded == null)\n        opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n      return opts;\n    }\n    __name(parseOptions, \"parseOptions\");\n    function isFolded(cm, line) {\n      var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold) {\n          var fromPos = marks[i].find(-1);\n          if (fromPos && fromPos.line === line)\n            return marks[i];\n        }\n      }\n    }\n    __name(isFolded, \"isFolded\");\n    function marker(spec) {\n      if (typeof spec == \"string\") {\n        var elt = document.createElement(\"div\");\n        elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n        return elt;\n      } else {\n        return spec.cloneNode(true);\n      }\n    }\n    __name(marker, \"marker\");\n    function updateFoldInfo(cm, from, to) {\n      var opts = cm.state.foldGutter.options, cur = from - 1;\n      var minSize = cm.foldOption(opts, \"minFoldSize\");\n      var func = cm.foldOption(opts, \"rangeFinder\");\n      var clsFolded = typeof opts.indicatorFolded == \"string\" && classTest(opts.indicatorFolded);\n      var clsOpen = typeof opts.indicatorOpen == \"string\" && classTest(opts.indicatorOpen);\n      cm.eachLine(from, to, function(line) {\n        ++cur;\n        var mark = null;\n        var old = line.gutterMarkers;\n        if (old)\n          old = old[opts.gutter];\n        if (isFolded(cm, cur)) {\n          if (clsFolded && old && clsFolded.test(old.className))\n            return;\n          mark = marker(opts.indicatorFolded);\n        } else {\n          var pos = Pos(cur, 0);\n          var range = func && func(cm, pos);\n          if (range && range.to.line - range.from.line >= minSize) {\n            if (clsOpen && old && clsOpen.test(old.className))\n              return;\n            mark = marker(opts.indicatorOpen);\n          }\n        }\n        if (!mark && !old)\n          return;\n        cm.setGutterMarker(line, opts.gutter, mark);\n      });\n    }\n    __name(updateFoldInfo, \"updateFoldInfo\");\n    function classTest(cls) {\n      return new RegExp(\"(^|\\\\s)\" + cls + \"(?:$|\\\\s)\\\\s*\");\n    }\n    __name(classTest, \"classTest\");\n    function updateInViewport(cm) {\n      var vp = cm.getViewport(), state = cm.state.foldGutter;\n      if (!state)\n        return;\n      cm.operation(function() {\n        updateFoldInfo(cm, vp.from, vp.to);\n      });\n      state.from = vp.from;\n      state.to = vp.to;\n    }\n    __name(updateInViewport, \"updateInViewport\");\n    function onGutterClick(cm, line, gutter) {\n      var state = cm.state.foldGutter;\n      if (!state)\n        return;\n      var opts = state.options;\n      if (gutter != opts.gutter)\n        return;\n      var folded = isFolded(cm, line);\n      if (folded)\n        folded.clear();\n      else\n        cm.foldCode(Pos(line, 0), opts);\n    }\n    __name(onGutterClick, \"onGutterClick\");\n    function onChange(cm) {\n      var state = cm.state.foldGutter;\n      if (!state)\n        return;\n      var opts = state.options;\n      state.from = state.to = 0;\n      clearTimeout(state.changeUpdate);\n      state.changeUpdate = setTimeout(function() {\n        updateInViewport(cm);\n      }, opts.foldOnChangeTimeSpan || 600);\n    }\n    __name(onChange, \"onChange\");\n    function onViewportChange(cm) {\n      var state = cm.state.foldGutter;\n      if (!state)\n        return;\n      var opts = state.options;\n      clearTimeout(state.changeUpdate);\n      state.changeUpdate = setTimeout(function() {\n        var vp = cm.getViewport();\n        if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n          updateInViewport(cm);\n        } else {\n          cm.operation(function() {\n            if (vp.from < state.from) {\n              updateFoldInfo(cm, vp.from, state.from);\n              state.from = vp.from;\n            }\n            if (vp.to > state.to) {\n              updateFoldInfo(cm, state.to, vp.to);\n              state.to = vp.to;\n            }\n          });\n        }\n      }, opts.updateViewportTimeSpan || 400);\n    }\n    __name(onViewportChange, \"onViewportChange\");\n    function onFold(cm, from) {\n      var state = cm.state.foldGutter;\n      if (!state)\n        return;\n      var line = from.line;\n      if (line >= state.from && line < state.to)\n        updateFoldInfo(cm, line, line + 1);\n    }\n    __name(onFold, \"onFold\");\n  });\n})();\nvar foldgutter = foldgutter$2.exports;\nvar foldgutter$1 = /* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  \"default\": foldgutter\n}, [foldgutter$2.exports]);\nexport { foldgutter$1 as f };\n"],"names":["__defProp","Object","defineProperty","__name","target","value","configurable","_mergeNamespaces","n","m","forEach","e","Array","isArray","keys","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","Symbol","toStringTag","foldgutter$2","exports","mod","CodeMirror","doFold","cm","pos","options","force","call","finder","getOption","Pos","minSize","getRange","allowFolded","range2","to","line","from","marks","findMarksAt","i","length","__isFold","cleared","clear","range","firstLine","myWidget","makeWidget","on","myRange","e_preventDefault","markText","replacedWith","clearOnEnter","signal","widget","text","document","createTextNode","createElement","appendChild","className","cloneNode","newFoldFunction","rangeFinder","defineExtension","commands","toggleFold","foldCode","getCursor","fold","unfold","scanUp","foldAll","operation","lastLine","unfoldAll","registerHelper","funcs","prototype","slice","arguments","start","found","helpers","getHelpers","cur","defaultOptions","auto","minFoldSize","name","editorOptions","foldOptions","defineOption","_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__","a","val","old","Init","clearGutter","state","foldGutter","gutter","off","onGutterClick","onChange","onViewportChange","onFold","State","parseOptions","updateInViewport","opts","indicatorOpen","indicatorFolded","isFolded","findMarks","fromPos","find","marker","spec","elt","updateFoldInfo","foldOption","func","clsFolded","classTest","clsOpen","eachLine","mark","gutterMarkers","test","setGutterMarker","cls","vp","getViewport","folded","clearTimeout","changeUpdate","setTimeout","foldOnChangeTimeSpan","updateViewportTimeSpan","foldgutter$1","__proto__"],"sourceRoot":""}