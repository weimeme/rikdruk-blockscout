'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var growthbook = require('@growthbook/growthbook');
var React = require('react');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

const GrowthBookContext = /*#__PURE__*/React__namespace.createContext({});
function run(exp, growthbook) {
  if (!growthbook) {
    return {
      featureId: null,
      value: exp.variations[0],
      variationId: 0,
      inExperiment: false,
      hashUsed: false,
      hashAttribute: exp.hashAttribute || "id",
      hashValue: "",
      key: ""
    };
  }
  return growthbook.run(exp);
}
function feature(id, growthbook) {
  if (!growthbook) {
    return {
      value: null,
      on: false,
      off: true,
      source: "unknownFeature",
      ruleId: ""
    };
  }
  return growthbook.evalFeature(id);
}

// Get features from API and targeting attributes during SSR
async function getGrowthBookSSRData(context) {
  // Server-side GrowthBook instance
  const gb = new growthbook.GrowthBook({
    ...context
  });

  // Load feature flags from network if needed
  if (context.clientKey) {
    await gb.loadFeatures();
  }
  const data = {
    attributes: gb.getAttributes(),
    features: gb.getFeatures()
  };
  gb.destroy();
  return data;
}

// Populate the GrowthBook instance in context from the SSR props
function useGrowthBookSSR(data) {
  const gb = useGrowthBook();

  // Only do this once to avoid infinite loops
  const isFirst = React__namespace.useRef(true);
  if (gb && isFirst.current) {
    gb.setFeatures(data.features);
    gb.setAttributes(data.attributes);
    isFirst.current = false;
  }
}
function useExperiment(exp) {
  const {
    growthbook
  } = React__namespace.useContext(GrowthBookContext);
  return run(exp, growthbook);
}
function useFeature(id) {
  const growthbook = useGrowthBook();
  return feature(id, growthbook);
}
function useFeatureIsOn(id) {
  const growthbook = useGrowthBook();
  return growthbook ? growthbook.isOn(id) : false;
}
function useFeatureValue(id, fallback) {
  const growthbook = useGrowthBook();
  return growthbook ? growthbook.getFeatureValue(id, fallback) : fallback;
}
function useGrowthBook() {
  const {
    growthbook
  } = React__namespace.useContext(GrowthBookContext);
  return growthbook;
}
function FeaturesReady({
  children,
  timeout,
  fallback
}) {
  const gb = useGrowthBook();
  const [hitTimeout, setHitTimeout] = React__namespace.useState(false);
  const ready = gb ? gb.ready : false;
  React__namespace.useEffect(() => {
    if (timeout && !ready) {
      const timer = setTimeout(() => {
        gb && gb.log("FeaturesReady timed out waiting for features to load", {
          timeout
        });
        setHitTimeout(true);
      }, timeout);
      return () => clearTimeout(timer);
    }
  }, [timeout, ready, gb]);
  return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, ready || hitTimeout ? children : fallback || null);
}
function IfFeatureEnabled({
  children,
  feature
}) {
  return useFeature(feature).on ? /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, children) : null;
}
function FeatureString(props) {
  const value = useFeature(props.feature).value;
  if (value !== null) {
    return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, value);
  }
  return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, props.default);
}
const withRunExperiment = Component => {
  // eslint-disable-next-line
  const withRunExperimentWrapper = props => /*#__PURE__*/React__namespace.createElement(GrowthBookContext.Consumer, null, ({
    growthbook
  }) => {
    return /*#__PURE__*/React__namespace.createElement(Component, _extends({}, props, {
      runExperiment: exp => run(exp, growthbook)
    }));
  });
  return withRunExperimentWrapper;
};
withRunExperiment.displayName = "WithRunExperiment";
const GrowthBookProvider = ({
  children,
  growthbook
}) => {
  // Tell growthbook how to re-render our app (for dev mode integration)
  // eslint-disable-next-line
  const [_, setRenderCount] = React__namespace.useState(0);
  React__namespace.useEffect(() => {
    if (!growthbook || !growthbook.setRenderer) return;
    growthbook.setRenderer(() => {
      setRenderCount(v => v + 1);
    });
    return () => {
      growthbook.setRenderer(() => {
        // do nothing
      });
    };
  }, [growthbook]);
  return /*#__PURE__*/React__namespace.createElement(GrowthBookContext.Provider, {
    value: {
      growthbook
    }
  }, children);
};

Object.defineProperty(exports, 'GrowthBook', {
  enumerable: true,
  get: function () { return growthbook.GrowthBook; }
});
Object.defineProperty(exports, 'clearCache', {
  enumerable: true,
  get: function () { return growthbook.clearCache; }
});
Object.defineProperty(exports, 'configureCache', {
  enumerable: true,
  get: function () { return growthbook.configureCache; }
});
Object.defineProperty(exports, 'setPolyfills', {
  enumerable: true,
  get: function () { return growthbook.setPolyfills; }
});
exports.FeatureString = FeatureString;
exports.FeaturesReady = FeaturesReady;
exports.GrowthBookContext = GrowthBookContext;
exports.GrowthBookProvider = GrowthBookProvider;
exports.IfFeatureEnabled = IfFeatureEnabled;
exports.getGrowthBookSSRData = getGrowthBookSSRData;
exports.useExperiment = useExperiment;
exports.useFeature = useFeature;
exports.useFeatureIsOn = useFeatureIsOn;
exports.useFeatureValue = useFeatureValue;
exports.useGrowthBook = useGrowthBook;
exports.useGrowthBookSSR = useGrowthBookSSR;
exports.withRunExperiment = withRunExperiment;
//# sourceMappingURL=index.js.map
