"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var _formControl = require("@chakra-ui/form-control");
var _system = require("@chakra-ui/system");
var _chakraComponents = _interopRequireDefault(require("./chakra-components"));
var _excluded = ["components", "theme", "size", "colorScheme", "isDisabled", "isInvalid", "isReadOnly", "isRequired", "inputId", "tagVariant", "hasStickyGroupHeaders", "selectedOptionStyle", "selectedOptionColor", "variant", "focusBorderColor", "errorBorderColor", "chakraStyles", "onFocus", "onBlur", "menuIsOpen"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var useChakraSelectProps = function useChakraSelectProps(_ref) {
  var _props$ariaInvalid;
  var _ref$components = _ref.components,
    components = _ref$components === void 0 ? {} : _ref$components,
    theme = _ref.theme,
    size = _ref.size,
    _ref$colorScheme = _ref.colorScheme,
    colorScheme = _ref$colorScheme === void 0 ? "gray" : _ref$colorScheme,
    isDisabled = _ref.isDisabled,
    isInvalid = _ref.isInvalid,
    isReadOnly = _ref.isReadOnly,
    isRequired = _ref.isRequired,
    inputId = _ref.inputId,
    tagVariant = _ref.tagVariant,
    _ref$hasStickyGroupHe = _ref.hasStickyGroupHeaders,
    hasStickyGroupHeaders = _ref$hasStickyGroupHe === void 0 ? false : _ref$hasStickyGroupHe,
    _ref$selectedOptionSt = _ref.selectedOptionStyle,
    selectedOptionStyle = _ref$selectedOptionSt === void 0 ? "color" : _ref$selectedOptionSt,
    _ref$selectedOptionCo = _ref.selectedOptionColor,
    selectedOptionColor = _ref$selectedOptionCo === void 0 ? "blue" : _ref$selectedOptionCo,
    variant = _ref.variant,
    focusBorderColor = _ref.focusBorderColor,
    errorBorderColor = _ref.errorBorderColor,
    _ref$chakraStyles = _ref.chakraStyles,
    chakraStyles = _ref$chakraStyles === void 0 ? {} : _ref$chakraStyles,
    onFocus = _ref.onFocus,
    onBlur = _ref.onBlur,
    menuIsOpen = _ref.menuIsOpen,
    props = _objectWithoutPropertiesLoose(_ref, _excluded);
  var chakraTheme = (0, _system.useTheme)();
  var _chakraTheme$componen = chakraTheme.components.Input.defaultProps,
    defaultVariant = _chakraTheme$componen.variant,
    defaultSize = _chakraTheme$componen.size;

  /**
   * Combine the props passed into the component with the props that can be set
   * on a surrounding form control to get the values of `isDisabled` and
   * `isInvalid`
   */
  var inputProps = (0, _formControl.useFormControl)({
    id: inputId,
    isDisabled: isDisabled,
    isInvalid: isInvalid,
    isRequired: isRequired,
    isReadOnly: isReadOnly,
    onFocus: onFocus,
    onBlur: onBlur
  });

  // Unless `menuIsOpen` is controlled, disable it if the select is readonly
  var realMenuIsOpen = menuIsOpen != null ? menuIsOpen : inputProps.readOnly ? false : undefined;

  /** Ensure that the size used is one of the options, either `sm`, `md`, or `lg` */
  var realSize = size != null ? size : defaultSize === "xs" ? "sm" : defaultSize;
  var sizeOptions = ["sm", "md", "lg"];
  if (!sizeOptions.includes(realSize)) {
    realSize = "md";
  }

  /**
   * Ensure that the tag variant used is one of the options, either `subtle`,
   * `solid`, or `outline` (or undefined)
   */
  var realTagVariant = tagVariant;
  var tagVariantOptions = ["subtle", "solid", "outline"];
  if (tagVariant !== undefined) {
    if (!tagVariantOptions.includes(tagVariant)) {
      realTagVariant = "subtle";
    }
  }

  /** Ensure that the selected option style is either `color` or `check` */
  var realSelectedOptionStyle = selectedOptionStyle;
  var selectedOptionStyleOptions = ["color", "check"];
  if (!selectedOptionStyleOptions.includes(selectedOptionStyle)) {
    realSelectedOptionStyle = "color";
  }

  /** Ensure that the color used for the selected options is a string */
  var realSelectedOptionColor = selectedOptionColor;
  if (typeof selectedOptionColor !== "string") {
    realSelectedOptionColor = "blue";
  }
  var realVariant = variant != null ? variant : defaultVariant;
  var variantOptions = ["outline", "filled", "flushed", "unstyled"];
  if (!variantOptions.includes(realVariant)) {
    realVariant = defaultVariant;
  }
  var select = _extends({
    // Allow overriding of custom components
    components: _extends({}, _chakraComponents["default"], components),
    // Custom select props
    colorScheme: colorScheme,
    size: realSize,
    tagVariant: realTagVariant,
    selectedOptionStyle: realSelectedOptionStyle,
    selectedOptionColor: realSelectedOptionColor,
    variant: realVariant,
    hasStickyGroupHeaders: hasStickyGroupHeaders,
    chakraStyles: chakraStyles,
    focusBorderColor: focusBorderColor,
    errorBorderColor: errorBorderColor,
    // Extract custom props from form control
    onFocus: inputProps.onFocus,
    onBlur: inputProps.onBlur,
    isDisabled: inputProps.disabled,
    isInvalid: !!inputProps["aria-invalid"],
    inputId: inputProps.id,
    isReadOnly: inputProps.readOnly,
    menuIsOpen: realMenuIsOpen
  }, props, {
    // aria-invalid can be passed to react-select, so we allow that to
    // override the `isInvalid` prop
    "aria-invalid": ((_props$ariaInvalid = props["aria-invalid"]) != null ? _props$ariaInvalid : inputProps["aria-invalid"]) ? true : undefined
  });
  return select;
};
var _default = useChakraSelectProps;
exports["default"] = _default;
//# sourceMappingURL=use-chakra-select-props.js.map