export function route(r) {
    const params = new Set();
    const path = "/" +
        r.pathname
            .split("/")
            .map((segment) => {
            // optional catch all
            if (segment.startsWith("[[...") && segment.endsWith("]]")) {
                const query = segment.slice(5, -2);
                params.add(query);
                return r.query?.[query]?.join("/");
            }
            // catch all
            if (segment.startsWith("[...") && segment.endsWith("]")) {
                const query = segment.slice(4, -1);
                params.add(query);
                return r.query[query].join("/");
            }
            // dynamic
            if (segment.startsWith("[") && segment.endsWith("]")) {
                const query = segment.slice(1, -1);
                params.add(query);
                return r.query[query];
            }
            return segment;
        })
            // removes optional catch all if no query is supplied
            .filter(Boolean)
            .join("/");
    const search = new URLSearchParams();
    for (const key in r.query) {
        if (!params.has(key)) {
            const value = r.query[key];
            if (Array.isArray(value)) {
                value.forEach((val) => search.append(key, val));
            }
            else {
                search.append(key, value);
            }
        }
    }
    const qs = search.toString().length > 0 ? "?" + search.toString() : "";
    const hash = r.hash ? "#" + r.hash : "";
    return path + qs + hash;
}
